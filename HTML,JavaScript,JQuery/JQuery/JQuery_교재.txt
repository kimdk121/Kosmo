■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<1> JQuery 란 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	● 공개적으로 개발되고 무료로 제공되는 [자바스크립스 사용자 정의 객체]의 이름이다.
	------------------------------------------------------------------
	<주의> 프로그램 언어의 한 종류가 절대 아니다.
	<참고> 누구나 버그 수정, 성능 향상 그리고 도움말 작성에 참여할 수 있다.
	<참고> http://plugins.jquery.com/ 에 광범위한 라이브러리(~.js)가 있으며, 꾸준히 업데이트되고 있고 
	       누구나 버그 수정，성능향상, 도움말 작성에 참여할 수 있다.


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<2> JQuery 의 장점 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	● 디자이너, 퍼블리셔, 개발자 모두가 사용하기 편하고 강력한 기능을 가진 메소드를 제공한다.
	------------------------------------------------------------------
	● 대부분의 브라우저에서 동일한 결과를 생산한다. 즉 브라우저에 따라 다른 코딩을 할 필요가 없다.
	   즉 브라우저에 따라 다른 코딩을 할 필요가 없다.
	   기존 자스 코딩은 브라우저에 따라 다른 결과를 산출하는 어려움이 있었다.
	------------------------------------------------------------------
	<참고> 한번의 코딩으로 모든 브라우저에서 같은 실행결과를 산출하는 것을
	       크로스 브라우징(=cross browsing) 이라고 한다.
	       개발자가 제일 싫어하는 작업 중에 하나.
	------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<3> JQuery 객체의 메소드를 사용하기 위한 사전 작업은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	● JQuery-x.x.x.min.js 다운 받고 HTML의 head 태그에 아래와 같이 수입하는
	   코드를 작성한다. x는 임의의 버전 번호이다.
	------------------------------------------------------------------
		<script src="query-1.6.2.min.js" type="text/javascript"></script>
		------------------------------------------------------------------
	JQuery-x.x.x.min.js 파일 안에는 JQuery 객체의 메위주를 리턴하는 JQuery 함수 또는 $ 함수가 존재하고
	JQuery 객체의 메소드나 속성변수가 선언되어 있다.
	------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<4> JQuery 객체의 메위주를 얻는 방법은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	jQuery ("선택자") 함수 또는 $("선택자") 함수를 호출하여 얻는다.
	------------------------------------------------------------------
	jQuery ("선택자") 함수 또는 $("선택자") 함수는 JQuery-x.x.x.min.js 파일 안에 존재한다.
	------------------------------------------------------------------
	<참고> JQuery 객체의 메위주를 얻어야 메소드를 호출할 수 있다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<5> JQuery 객체의 메위주를 얻고 메소드를 호출하는 형식은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	var 변수명 = $("선택자");	// $("선택자"); 함수를 호출하여 얻은 JQuery 객체의 메위주를 변수 xxx에 저장하기
	---------------------------------
	xxx.JQuery 객체메소드명(~)		// JQuery 객체의 메소드 호출
	---------------------------------
	xxx.JQuery 객체속성변수명		// JQuery 객체의 속성변수 호출
	---------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<6> JQuery ("선택자") 함수 또는 $("선택자") 함수를 호출시 선택자 란 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	선택자는 태그를 지칭하는 방법론을 말한다.
	------------------------------------------------------------------
	JQuery 객체는 태그를 관리하는 객체이므로 태그를 지칭하는 방법론이 여러가지 있다.
	------------------------------------------------------------------
	<예> var obj = $("[name=uid]");
	------------------------------------------------------------------
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		    이때 JQuery 객체는 name=uid 를 가진 태그를 관리한다.
	------------------------------------------------------------------
	<예> var obj = $(".pwd");
	------------------------------------------------------------------
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		    이때 JQuery 객체는 class=pwd 를 가진 태그를 관리한다.
	------------------------------------------------------------------
	<예> var obj = $("#addr");
	------------------------------------------------------------------
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		    이때 JQuery 객체는 id=addr 를 가진 태그를 관리한다.
	------------------------------------------------------------------
	<예> var obj = $(".family .relation");
	------------------------------------------------------------------
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		    이때 JQuery 객체는 class=family 를 가진 태그 후손 즉 내부에
				       class=relation 가진 태그를 관리한다.
				       ---------------------------------
					<div class=family>
						<span class=relation>ㅇㅇ</span>
					</div>
					<div class=employee>
						<span class=relation>dd</span>
					</div>
				       ---------------------------------
	------------------------------------------------------------------
	<예> var obj = $("div");
	------------------------------------------------------------------
		<1> 변수 obj 선언.
		<2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj 저장.
		    이 때 JQuery 객체는 div 태그를 관리한다.
		    만약 div 태그가 2개 이상이면 정말 2개 이상을 관리한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<7> body 태그 안의 모든 태그를 읽어들인 이후 실행하고 싶은 코드가 있다.
    JQuery 를 이용한다면 어떻게 코딩해야 할까 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	$(document).ready(
		function() {
			body 태그 안의 모든 태그를 읽어들인 이후 실행하고 싶은 코드
		}
	}
	------------------------------------------------------------------
	$(document) => $(document) 함수 호출하여 JQuery 객체의 메위주를 얻는 코딩.
		       <주의> ready 메소드를 호출하려면 $ 함수 호출 시 매개변수로
			      선택자를 넘겨주지말고 Document 객체의 메위주를 넘겨 준다.
			      Document 객체의 메위주는 document 라는 변수에 저장되어 있다.
			      document 라는 변수는 개발자가 만드는 변수가 아닌
			      이미 만들어져 있는 변수이다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<8> <input type="button" value="로그인" class ="login_btn"> 태그가
    실행된 결과물인 버튼을 클릭하면 checkForm() 라는 함수를 호출하고 싶으면 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	$(".login_btn").click(
		function() {
			checkForm();
		}
	);
	------------------------------------------------------------------
	click (익명함수) => JQuery 객체가 관리하는 태그에 클릭 이벤트가 발생하면
			    익명함수 안의 코딩을 실행하라.
	------------------------------------------------------------------
	선택자가 가리키는 태그에 클릭 이벤트가 발생하면 실행구문을 실행하기
	------------------------------------------------------------------
	$("선택자").click(
		function() {
			실행구문
		}
	);
	------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<9> 아래 html 태그의 실행 결과에서 웹 브라우저에 문자열 입력양식이 출력된다.
    웹 브라우저에서 아이디를 입력한 경우 입력된 아이디를 얻기 위한 JQuery 차원의 코딩은 ?
		---------------------------------
		<form name="loginForm">
			<input type="text" name="uid" size=10>
		</form>
		---------------------------------
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	<정답1>
	---------------------------------
		var uid = $(".uid").val();
	---------------------------------
	<정답2>
	---------------------------------
		var uid = $("[name='uid']").val();
	---------------------------------
	<정답3>
	---------------------------------
		var uid = $("[name='loginForm'] .uid").val();
	---------------------------------
	<정답4>
	---------------------------------
		var uid = $("[name='loginForm'] [name='uid']").val();
	---------------------------------
	<주의> $("[name='loginForm'] .uid")
	       $("[name='loginForm'] [name='uid']") 에서 공백은 후손을 의미한다.
	---------------------------------
	<참고> 될수 있는대로 <정답1> 또는 <정답3>을 쓰는게 좋다.
	       선택자는 주로 class 값을 많이 사용한다. 여러 이점이 있기 때문에.

	---------------------------------
	val() => JQuery 객체가 관리하는 태그의 value 값을 리턴하는 메소드

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<10> $(".xxx").val() 와 $(".xxx").val("") 의 차이점은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	$(".xxx").val()
	---------------------------------
		class=xxx 를 가진 태그의 value 값을 리턴하라는 의미
		<예> var uid = $(".uid").val();
	---------------------------------
	$(".xxx").val("")
	---------------------------------
		class=xxx 를 가진 태그의 value 값을 ""로 세팅하라는 의미
		<예> $(".uid").val("");

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<11> JQuery 객체에서 선택자의 종류는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	$(".xxx")
	---------------------------------
		class="xxx" 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
	
	---------------------------------
	$("#xxx")
	---------------------------------
		id="xxx" 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기

	---------------------------------
	$("태그명")
	---------------------------------
		<태그명 ~> 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
	
	---------------------------------
	$("*")
	---------------------------------
		모든 선택자가 가리키는 태그를 관리하는 JQuery 객체 리턴
		------------------------------------------------------------------
		<form name = "memberRegForm">
			<td><input type="text" name="mem_name" class="mem_name"></td>
			<td><input type="text" name="mem_id" class="mem_id"></td>
			<td><input type="password" name="pwd" class="pwd"></td>
			<select name="addr" class="addr" size=5>
				<option value=" ">선택요망</option>
				<option value="서울">서울</option>
				<option value="경기">경기</option>
				<option value="인천">인천</option>
			</select>
		</form>
		------------------------------------------------------------------
		$("[name=memRegForm] *")
		------------------------------------------------------------------
			name="memRegForm" 가진 태그 모든 후손 태그를 관리하는 JQuery 객체 리턴

	---------------------------------
	$(".xxx:checked")
	---------------------------------
		class="xxx" 가진 태그 중에 체크된 태그를 관리하는 JQuery 객체 메위주 리턴하기
		체크된 태그는 주로 radio 또는 checkbox 입력양식이다.
	
	---------------------------------
	$("선택자1 선택자2")
	---------------------------------
		선택자1이 가리키는 태그의 후손 중에 선택자2 가 가리키는 태그를 관리하는 JQuery 객체 메위주 리턴하기
		중간의 공백은 후손을 의미한다.
		---------------------------------
		<예> $(".xxx :checked")
		---------------------------------
			class="xxx" 가진 태그의 후손 중에 체크된 태그를 관리하는 JQuery객체 메위주 리턴하기
	
	---------------------------------
	$("선택자1,선택자2")
	---------------------------------
		선택자1이 가리키는 태그와 선택자2 가 가리키는 태그를 관리하는 JQuery 객체 메위주 리턴하기
		중간의 공백은 후손을 의미한다.
		
	---------------------------------
	$("선택자1>선택자2")
	---------------------------------
		선택자1이 가리키는 태그의 자식 중에 선택자2 가 가리키는 태그를 관리하는 JQuery 객체 메위주 리턴하기
		중간의 공백은 후손을 의미한다.

	---------------------------------
	$("[태그속성명='xxx']")
	---------------------------------
		태그속성명='속성값'을 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
		<주의> [  와 ] 가 있어야한다.
		---------------------------------
		<예> $("name='mem_id']")
		---------------------------------
			name='mem_id' 가진 태그의 후손 중에 체크된 태그를 관리하는 JQuery 객체 메위주 리턴하기
		---------------------------------
		<예> $("[type='radio']")
		---------------------------------
			type='radio' 가진 태그, 즉 radio 입력양식 태그를 관리하는 JQuery 객체 메위주 리턴하기
	
	---------------------------------
	$("[태그속성명!='xxx']")
	---------------------------------
		태그속성명='속성값'을 가지지 않은 태그를 관리하는 JQuery 객체 메위주 리턴하기
	
	---------------------------------
	$("[태그속성명^='xxx']")
	---------------------------------
		태그속성명='속성값'을 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
		---------------------------------
		<예> $("[name^='mem_']")
		---------------------------------
			name='mem_~' 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
			name 속성값이 mem_ 문자로 시작하는 태그를 관리하는 JQuery 객체 메위주 리턴하기
	
	---------------------------------
	$("[태그속성명$='xxx']")
	---------------------------------
		태그속성명='~xxx' 을 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
		---------------------------------
		<예> $("[name$='name']")
		---------------------------------
			name='~name' 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
	
	---------------------------------
	$("[태그속성명*='xxx']")
	---------------------------------
		태그 속성값으로 'xxx'를 포함한 태그를 관리하는 JQuery 객체 리턴하기 앞 뒤로
	
	---------------------------------
	$("선택자:first")
	---------------------------------
		선택자가 가리키는 태그 중 첫번째 태그를 관리하는 JQuery 객체 리턴하기
		---------------------------------
		<예> $(".gender:first")
		---------------------------------
			class='gender' 가진 태그 중에 첫번째 태그를 관리하는 JQuery 객체 메위주 리턴하기
	
	---------------------------------
	$("선택자:last")
	---------------------------------
		선택자가 가리키는 태그 중 마지막 태그를 관리하는 JQuery 객체 리턴하기
		---------------------------------
		<예> $(".gender:last")
		---------------------------------
			class='gender' 가진 태그 중에 마지막 태그를 관리하는 JQuery 객체 메위주 리턴하기
	
	---------------------------------
	$("선택자:odd")
	---------------------------------
		선택자가 가리키는 태그 중에 인덱스 번호가 홀수인 태그를 관리하는 JQuery 객체 리턴하기
		---------------------------------
		<예> $(".hobby:odd")
		---------------------------------
			------------------------------------------------------------------
			<input type="checkbox" name="hobby" class="hobby" value="운동">운동
			<input type="checkbox" name="hobby" class="hobby" value="여행">여행
			<input type="checkbox" name="hobby" class="hobby" value="독서">독서
			<input type="checkbox" name="hobby" class="hobby" value="기타">기타
			------------------------------------------------------------------
			class='hobby' 가진 태그 중에 인덱스 번호가 홀수인 태그를 관리하는 JQuery 객체 메위주 리턴하기
			즉 여행과 기타 이다. 0, 1, 2, 3 이니까
	
	---------------------------------
	$("선택자:even")
	---------------------------------
		선택자가 가리키는 태그 중에 인덱스 번호가 짝수인 태그를 관리하는 JQuery 객체 리턴하기
		---------------------------------
		<예> $(".hobby:even")
		---------------------------------
			------------------------------------------------------------------
			<input type="checkbox" name="hobby" class="hobby" value="운동">운동
			<input type="checkbox" name="hobby" class="hobby" value="여행">여행
			<input type="checkbox" name="hobby" class="hobby" value="독서">독서
			<input type="checkbox" name="hobby" class="hobby" value="기타">기타
			------------------------------------------------------------------
			class='hobby' 가진 태그 중에 인덱스 번호가 짝수인 태그를 관리하는 JQuery 객체 메위주 리턴하기
			즉 운동과 독서 이다. 0, 1, 2, 3 이니까
	
	---------------------------------
	$("선택자:first-child")
	---------------------------------
		부모 태그가 있는 선택자가 가리키는 태그 중 각 태그의 부모입장에서 [첫번째] 자식에 해당하는 태그를 관리하는 JQuery 객체 리턴하기
		---------------------------------
		<예>
		---------------------------------
		<table class="student">
			<tr>
				<td>사오정</td>
				<td>대리</td>
				<td>남자</td>
			</tr>
			<tr>
				<td>저팔계</td>
				<td>과장</td>
				<td>여자</td>
			</tr>
		</table>
		---------------------------------
		$( ".student td:first-child" )
		---------------------------------
			class=student 를 가진 태그의 후손 중에 td를 골라내라
			그리고 그 td 중에 각 td 의 부모 입장에서 첫째 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
			결국 <td>사오정</td> 와 <td>저팔계</td> 태그를 관리하는 JQuery 객체 리턴된다..
		---------------------------------
		$( ".student td:last-child" )
		---------------------------------
			class=student 를 가진 태그의 후손 중에 td를 골라내라
			그리고 그 td 중에 각 td 의 부모 입장에서 마지막 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
			결국 <td>남자</td> 와 <td>여자</td> 태그를 관리하는 JQuery 객체 리턴된다..
		---------------------------------
		$( ".student td:nth-child(2)" )
		---------------------------------
			class=student 를 가진 태그의 후손 중에 td를 골라내라
			그리고 그 td 중에 각 td 의 부모 입장에서 2번째 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
			결국 <td>대리</td> 와 <td>과장</td> 태그를 관리하는 JQuery 객체 리턴된다..
		---------------------------------
		$( ".student td:nth-child(odd)" )
		---------------------------------
			class=student 를 가진 태그의 후손 중에 td를 골라내라
			그리고 그 td 중에 각 td 의 부모 입장에서 홀수 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
			결국 <td>사오정</td> <td>저팔계</td> <td>남자</td> 와 <td>여자</td> 태그를 관리하는 JQuery 객체 리턴된다..
		---------------------------------
		$( ".student td:nth-child(even)" )
		---------------------------------
			class=student 를 가진 태그의 후손 중에 td를 골라내라
			그리고 그 td 중에 각 td 의 부모 입장에서 짝수 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
			결국 <td>대리</td>  와 <td>과장</td> 태그를 관리하는 JQuery 객체 리턴된다..
		---------------------------------
		$( ".student td:gt(2)" )
		--------------------------------- 
			class=student 를 가진 태그의 후손 중에 td를 골라내라
			순서번호가 2번째 놈 이후 해당하는 td 를 관리하는 JQuery 객체 리턴.
			결국 <td>남자</td>와 <td>저팔계</td>와 <td>과장</td>와 <td>여자</td>  태그를 관리하는 JQuery 객체 리턴된다..
		---------------------------------
		$( ".student td:lt(2)" )
		--------------------------------- 
			class=student 를 가진 태그의 후손 중에 td를 골라내라
			순서번호가 2번째 놈 이전 해당하는 td 를 관리하는 JQuery 객체 리턴.
			결국 <td>사오정</td>  태그를 관리하는 JQuery 객체 리턴된다..
	
	---------------------------------
	$( "선택자1:has(선택자2)" )
	---------------------------------
		선택자1 이 가리키는 태그 중에 후손으로 선택자2를 가진 선택자1을 관리하는 JQuery 객체 리턴하기
		
		<div class="movie">
			<span class="action">삼국지</span>
		</div>
		<div class="movie">
			<span class="sf">인터스텔라</span>
		</div>
		<div class="movie">
			<span class="marvel">블랙위도우</span>
		</div>
		---------------------------------
		<예> $( ".movie:has(.marvel)" )
		---------------------------------
			class=movie를 가진 태그중에 후손으로 class=marvel을 가진 태그를 골라
			관리하는 JQuery 객체 리턴하기
			결국은 class=movie를 가진 태그중 3번째 div 태그를 관리하는 JQuery 객체 리턴
	
	---------------------------------
	$( "선택자1:contains('문자열')" )
	---------------------------------
		선택자가 가리키는 태그 중에 '문자열' 내포하고 있는 태그를 관리하는 JQuery 객체 리턴
		---------------------------------
		<예> $( ".movie:contains('인터스텔라')" )
		---------------------------------
			class=movie를 가진 태그중에 '문자열'을 내포하고 있는 태그를 골라 관리하는 JQuery 객체 리턴하기
			결국은 class=movie를 가진 태그중 2번째 div 태그를 관리하는 JQuery 객체 리턴
	
	---------------------------------
	$( "선택자1:not(선택자2)" )
	---------------------------------
		선택자1 이 가리키는 태그 중에 선택자2 가 가리키는 태그가 아닌 태그를 관리하는 JQuery 객체 리턴
		------------------------------------------------------------------
		<input type="checkbox" name="hobby" class="hobby" value="운동">운동
		<input type="checkbox" name="hobby" class="hobby" value="여행">여행
		<input type="checkbox" name="hobby" class="hobby" value="독서">독서
		<input type="checkbox" name="hobby" class="hobby" value="기타">기타
		------------------------------------------------------------------
		$( ".hobby:not(:checked)" )	
		------------------------------------------------------------------
			class=hobby 를 가진 태그중에 체크되어 있지 않은 태그를 골라 관리하는 JQuery 객체 리턴
		------------------------------------------------------------------
		$( ".hobby:checked" )
		------------------------------------------------------------------
			class=hobby 를 가진 태그중에 체크되어 있는 태그를 골라 관리하는 JQuery 객체 리턴
		------------------------------------------------------------------
		$( "input:not([type='button'])" )
		------------------------------------------------------------------
			input 태그중에 type='button'을 가진 태그를 뺀 나머지 태그를 관리하는 JQuery 객체 리턴
	
	---------------------------------
	$( ":text" )
	---------------------------------
		type="text" 를 가진 태그들을 관리하는 JQuery 객체 리턴
		$( "[type='text']" ) 와 동일하다.
	
	---------------------------------
	$( ":password" )
	---------------------------------
		type="password" 를 가진 태그들을 관리하는 JQuery 객체 리턴
		$( "[type='password']" ) 와 동일하다.

	---------------------------------
	$( ":checkbox" )
	---------------------------------
		type="checkbox" 를 가진 태그들을 관리하는 JQuery 객체 리턴
		$( "[type='checkbox']" ) 와 동일하다.

	---------------------------------
	$( ":radio" )
	---------------------------------
		type="radio" 를 가진 태그들을 관리하는 JQuery 객체 리턴
		$( "[type='radio']" ) 와 동일하다.
	
	---------------------------------
	$( ":file" )
	---------------------------------
		type="file" 를 가진 태그들을 관리하는 JQuery 객체 리턴
		$( "[type='file']" ) 와 동일하다.
	
	---------------------------------
	$( ":button" )
	---------------------------------
		type="button" 를 가진 태그들을 관리하는 JQuery 객체 리턴
		$( "[type='button']" ) 와 동일하다.

	---------------------------------
	$( ":submit" )
	---------------------------------
		type="submit" 를 가진 태그들을 관리하는 JQuery 객체 리턴
		$( "[type='submit']" ) 와 동일하다.

	---------------------------------
	$( ":reset" )
	---------------------------------
		type="reset" 를 가진 태그들을 관리하는 JQuery 객체 리턴
		$( "[type='reset']" ) 와 동일하다.

	---------------------------------
	$( ":checked" )
	---------------------------------
		체크된 태그들을 관리하는 JQuery 객체 리턴
		<참고> 체크가 가능한 

	---------------------------------
	$( ":focus" )
	---------------------------------
		초점이 맞추어져 있는 태그들을 관리하는 JQuery 객체 리턴
	
	---------------------------------
	$( ":disabled" )
	---------------------------------
		비활성화된 태그들을 관리하는 JQuery 객체 리턴

	---------------------------------
	$( ":enabled" )
	---------------------------------
		활성화된 태그들을 관리하는 JQuery 객체 리턴

	---------------------------------
	$( ":visible" )
	---------------------------------
		웹 화면에 보이는 태그들을 관리하는 JQuery 객체 리턴

	---------------------------------
	$( ":hidden" )
	---------------------------------
		웹 화면에 안 보이는 태그들을 관리하는 JQuery 객체 리턴

	

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<12> JQuery 객체에서 메소드의 종류는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	$(선택자1).add(선택자2)
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 [선택자]가 가리키는 태그도 포함하여 관리하는 JQuery 객체 반환.
		즉 [선택자1]이 가리키는 태그와  [선택자2]가 가리키는 태그를 관리하는 JQuery 객체 반환.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		<input type="text" name="mem_name" class="mem_name">
		<input type="text" name="mem_id" class="mem_id">
		------------------------------------------------------------------
			var obj = $(".mem_name").add( ".mem_id" )
			------------------------------------------------------------------
				obj에는 class=mem_name이 가리키는 태그와  class=mem_id가 가리키는 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				위 코드는 아래 처럼도 가능하다
				------------------------------------------------------------------
				var obj = $(".mem_name,.mem_id" )
				------------------------------------------------------------------

	---------------------------------
	children("선택자")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 자식중 [선택자]가 가리키는 관리하는 JQuery 객체 반환.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		<div class="member">
			<input type="text" name="mem_name" class="mem_name">
			<div class="family">
				<input type="text" name="chile_name" class="child_name">
			</div>
		</div>
		------------------------------------------------------------------
			var obj = $(".member").children( ".mem_name" )
			------------------------------------------------------------------
				obj에는 class=member 가 가리키는 태그의 자식중 class=mem_name 가리키는 태그를 관리하는
				JQuery 객체의 메위주가 저장된다.
				------------------------------------------------------------------
				var obj = $(".mem_name>.mem_id" )
				------------------------------------------------------------------
	
	---------------------------------
	parent( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 부모 태그를 관리하는 JQuery 객체 리턴
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		<div class="member">
			<input type="text" name="mem_name" class="mem_name">
			<div class="family">
				<input type="text" name="child_name" class="child_name">
			</div>
		</div>
		------------------------------------------------------------------
			var obj = $(".mem_name").parent( )
			------------------------------------------------------------------
				obj에는 class=mem_name이 가리키는 태그의 부모 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				즉 <div class="member"> 태그를 관리하는 JQuery 객체의 메위주가 저장된다.

	---------------------------------
	parents( "선택자2" )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 조상 태그중에 제일 가까운 선택자2가 가리키는 태그를 관리하는 JQuery 객체 리턴
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		<div class="aaa">
			<div class="xxx">
				<input type="text" name="mem_name" class="mem_name">
				<span>
					<input type="text" name="child_name" class="child_name">
			</div>
		</div>
		------------------------------------------------------------------
			var obj = $(".child_name").parents("div")
			------------------------------------------------------------------
				obj에는 class=child_name 이 가리키는 태그의 조상 태그 중 제일 가까운 div 태그를 관리하는
				JQuery 객체의 메위주가 저장된다.
				결국 <div class="xxx"> 태그를 관리하는 JQuery 객체의 메위주가 저장된다.

	---------------------------------
	filter( "선택자2" )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 중에 선택자2 가 가리키는 태그를 관리하는 JQuery 객체 리턴

	---------------------------------
	find( "선택자2" )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 후손 중에 선택자2 가 가리키는 태그를 관리하는 JQuery 객체 리턴

	---------------------------------
	first( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 중에 첫번째 태그를 관리하는 JQuery 객체 리턴
	
	---------------------------------
	last( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 중에 마지막 태그를 관리하는 JQuery 객체 리턴

	---------------------------------
	next( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 다음에 나오는 태그를 관리하는 JQuery 객체 리턴
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<input type="text" name="mem_id" class="mem_id">
			<input type="text" name="mem_name" class="mem_name">
			------------------------------------------------------------------
			var obj = $(."mem_id").next();
			------------------------------------------------------------------
				obj에는 class=mem_id 가 가리키는 태그의 다음 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				결국 <input type="text" name="mem_name" class="mem_name"> 태그를 관리하는 JQuery 객체의 메위주가 저장된다.

	---------------------------------
	nextAll( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 다음에 나오는 모든 형제 태그를 관리하는 JQuery 객체 반환.
		<주의> 형제란 같은 부모 밑에 있는 자식들을 말한다.
		<비유> 내 밑에 있는 모든 동생
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div>
				<div>사오정</div>
				<div class=xxx>저팔계</div>
				<div>손오공</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
			------------------------------------------------------------------
			var obj = $(".xxx").nextAll();
			------------------------------------------------------------------
				obj에는 class=xxx 가 가리키는 태그의 다음에 나오는 모든 형제 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				결국 <div>손오공</div>와 <div>삼장법사</div> 태그를 관리하는  JQuery 객체의 메위주가 저장된다.

	---------------------------------
	prev( )		previous의 약어
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 이전에 나오는 형제 태그를 관리하는 JQuery 객체 리턴
		<비유> 내 위에 형
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div>
				<div>사오정</div>
				<div class=xxx>저팔계</div>
				<div>손오공</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
			------------------------------------------------------------------
			var obj = $(".xxx").prev();
			------------------------------------------------------------------
				obj에는 class=xxx 가 가리키는 태그의 이전에 나오는 형제 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				결국 <div>사오정</div> 태그를 관리하는  JQuery 객체의 메위주가 저장된다.

	---------------------------------
	prevAll( )		previous의 약어
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 이전에 나오는 형제 태그를 관리하는 JQuery 객체 리턴
		<비유> 내 위에 모든 형
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div>
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
			------------------------------------------------------------------
			var obj = $(".xxx").prevAll();
			------------------------------------------------------------------
				obj에는 class=xxx 가 가리키는 태그의 이전에 나오는 모든 형제 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				결국 <div>사오정</div> <div>손오공</div> 태그를 관리하는  JQuery 객체의 메위주가 저장된다.

	---------------------------------
	eq(i)
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 중에 인덱스번호 i번째 인 태그를 관리하는 JQuery 객체 리턴
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class="movie">
				<div>이도공간</div>
				<div>엑소시스트</div>
				<div>여고괴담</div>
				<div>컨저링</div>
			</div>
		------------------------------------------------------------------
		var obj = $(".movie div").eq(2);
		------------------------------------------------------------------
			obj에는 class=movie 가 가리키는 태그의 후손 중 div 태그 중 인덱스번호 2번인 태그를
			관리하는 JQuery 객체의 메위주가 저장된다.
			결국 <div>여고괴담</div> 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
			------------------------------------------------------------------
			<참고> var obj = $(".movie div").eq(2); 아래 코드와 동일하다
			------------------------------------------------------------------
				var obj = $(".movie").find("div").eq(2);

	---------------------------------
	siblings( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 모든 형제 태그를 관리하는 JQuery 객체 리턴
		<비유> 나를 제외한 모든 형제
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div>
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
		------------------------------------------------------------------
		var obj = $(".xxx").siblings( );
		------------------------------------------------------------------
			obj에는 class=xxx 가 가리키는 태그의 이전에 나오는 모든 형제 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
			결국 <div>사오정</div> <div>손오공</div> <div>삼장법사</div> 태그를 관리하는  JQuery 객체의 메위주가 저장된다.

	---------------------------------
	not("선택자")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 중에 선택자가 가리키는 태그가 아닌 태그를 관리하는 JQuery 객체 리턴
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class="cartoon">
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
		------------------------------------------------------------------
		var obj = $(".cartoon div").not(".xxx");
		------------------------------------------------------------------
			obj에는 class=cartoon 가 가리키는 태그의 후손 중에 calss=xxx를 가지고 있지 않은 태그를
			관리하는 JQuery 객체의 메위주가 저장된다.
			결국 <div>사오정</div> <div>손오공</div> <div>삼장법사</div> 태그를 관리하는  JQuery 객체의 메위주가 저장된다.
		------------------------------------------------------------------
		<참고> var obj = $(".cartoon div").not(".xxx"); 아래 코드와 동일하다
		------------------------------------------------------------------
			var obj = $(".cartoon div:not(.xxx)");

	---------------------------------
	text( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그가 끌어안고 있는 웹 브라우저 출력 문자를 리턴. 
		JQuery 객체가 관리하는 태그가 끌어안고 있는 또 다른 태그는 리턴되지 않는다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class=xxx>저팔계</div>
			---------------------------------
			var str = $(".xxx").text();
			---------------------------------
				str 에는 class=xxx 가 가리키는 태그가 끌어안고 있는 문자가 저장되어 있다.
				str 에는 저팔계 가 저장되어 있다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class=xxx><div>저팔계</div></div>
			---------------------------------
			var str = $(".xxx").text();
			---------------------------------
				str 에는 class=xxx 가 가리키는 태그가 끌어안고 있는 문자가 저장되어 있다.
				str 에는 저팔계 가 저장되어 있다.
				---------------------------------
				<주의> str에는 <div>저팔계</div> 가 저장되어 있지 않다.

	---------------------------------
	text("문자열")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 내부에 "문자열"을 덮어쓴다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class=xxx>저팔계</div>
			---------------------------------
			$(".xxx").text("오세황");
			---------------------------------
				class=xxx가 가리키는 태그 내부에 오세황 이라는 문자를 덮어씌운다.
				결과적으로 <div class=xxx>저팔계</div> 가 <div class=xxx>오세황</div>로 바뀌는 꼴이다.
				그러므로 화면에 출력되는 저팔계 가 오세황으로 바뀌어 보인다.

	---------------------------------
	html( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그가 끌어안고 있는 모든 코딩을 문자열로 리턴한다.
		코딩에는 문자열 또는 html 태그도 포함된다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class=xxx><div>저팔계</div></div>
			---------------------------------
			var str = $(".xxx").html( );
			---------------------------------
				str 에는 class=xxx가 가리키는 태그가 끌어안고 있는 모든 코딩을 문자로 저장되어 있다.
				결국 str에는 "<div>저팔계</div>" 가 문자열로 저장되어 있다.

	---------------------------------
	html("html태그 포함 문자열")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 내부에 "문자열" 을 덮어쓴다.
		문자열 안에는 html 태그도 있을 수 있다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class=xxx><div>저팔계</div></div>
			---------------------------------
			$(".xxx").html("<span>사오정</span>");
			---------------------------------
				class=xxx가 가리키는 태그안에 <span>사오정</span>을 덮어씌우기.
				결국 <div class=xxx><div>저팔계</div></div> 가 <div class=xxx><span>사오정</span></div> 로 바뀐다.

	---------------------------------
	val( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그를 웹 브라우저가 읽어들이면 DOM 객체를 생성하게 되는데
		이때 DOM 객체의 value 라는 속성변수 안의 값을 문자열로 리턴한다.
		주로 value 라는 속성변수를 가진 태그는 <input ~> 또는 <select ~> 또는 <textarea ~> 이다
		------------------------------------------------------------------
		<form name = "memberRegForm">
			<input type="text" name="uid">
		</form>
		------------------------------------------------------------------
			위 html 을 웹브라우저가 읽어들이면 
			<input type="text" name="uid"> 태그는 Text 객체로 생성한다.
			그리고 이 Text 객체에 대응하는 입력양식이 웹브라우저 화면에 출력된다.
			웹브라우저 상에 이 입력양식에   bravo  라고 입력한다면 
			Text 객체의 속성변수 value 에는 bravo 가 저장된다.
			이 상태에서 
			var str = $(".uid").val(); 코드가 실행된다면 Text객체의 value 속성변수 안의 값을 리턴하여 str 에 저장하게 된다.

	---------------------------------
	val("문자열")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그를 웹 브라우저가 읽어들이면 DOM 객체를 생성하게 되는데
		이 때 DOM 객체의 value 라는 속성변수 안에 문자열을 삽입한다.
		------------------------------------------------------------------
		<form name = "memberRegForm">
			<input type="text" name="uid">
		</form>
		------------------------------------------------------------------
			위 html 을 웹브라우저가 읽어들이면 
			<input type="text" name="uid"> 태그는 Text 객체로 생성한다.
			그리고 이 Text 객체에 대응하는 입력양식이 웹브라우저 화면에 출력된다.
			이 상태에서 
			$(".uid").val("bravo"); 코드가 실행된다면 Text 객체의  value 속성변수 안의 값을 bravo 로 세팅하게 된다.
			그러므로 웹화면상에서도 입력양식에 bravo 가 입력되어 보인다.

	---------------------------------
	append("html코드")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 내부에 막내 자식으로 html 코드를 삽입한다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class="movie">
				<div>컨저링</div>
				<div>쏘우</div>
			</div>
			---------------------------------
			$(".movie").append("<div>랑종</div>");
			---------------------------------
				class=movie 가 가리키는 태그 안에 막내 자식으로 <div>랑종</div>를 삽입하기.
				결국 아래처럼 태그가 삽입된다.
					<div class="movie">
						<div>컨저링</div>
						<div>쏘우</div>
						<div>랑종</div>
					</div>
	
	---------------------------------
	prepend("html코드")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 내부에 첫째 자식으로 html 코드를 삽입한다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class="movie">
				<div>컨저링</div>
				<div>쏘우</div>
			</div>
			---------------------------------
			$(".movie").prepend("<div>랑종</div>");
			---------------------------------
				class=movie 가 가리키는 태그 안에 첫째 자식으로 <div>랑종</div>를 삽입하기.
				결국 아래처럼 태그가 삽입된다.
					<div class="movie">
						<div>랑종</div>
						<div>컨저링</div>
						<div>쏘우</div>
					</div>
		
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class="movie">
				<div>
					<div>컨저링</div>
					<div>쏘우</div>
				</div>
				<div>
					<div>분노의 질주</div>
					<div>데드풀</div>
				</div>
			</div>
		------------------------------------------------------------------
		<문> 위에서 <div>데드풀</div> 태그 동생으로 <div>존윅3</div>을 삽입하려면?
		------------------------------------------------------------------
		정답
		$(".movie div").eq(0).siblings().append( " <div>존윅3</div>" )
		$(".movie div:last").parent().append("<div>존윅3</div>")  
		$(".movie :last").parent().append("<div>존윅3</div>")  
		$(".movie>div").eq(1).append("<div>존윅</div>")
		$(".movie div").eq(3).append("<div>존윅</div>")
		$(".movie").children().eq(1).append("<div>존윅3</div>");
		$(".movie div:contains('데드풀')").parent().eq(1).append("<div>존윅3</div>");
		$(".movie div:contains('데드풀')").eq(0).append("<div>존윅3</div>");
		$(".movie div:eq(0)").next().append("<div>존윅3</div>")
		$(".movie div").eq(5).parent().append( "<div>존윅3</div>" ); 
		$(".movie div").eq(5).after("<div>존윅3</div>");


		오답
		$("movie div").eq(1).append("<div>존윅3</div>")
		$("movie div:eq(1)").append("<div>존윅3</div>")
		$("movie:eq(1)").append("<div>존윅3</div>")


		$("movie div:last").append("<div>존윅3</div>")
		$("movie :last").append("<div>존윅3</div>")
		------------------------------------------------------------------
		
		------------------------------------------------------------------
			<div class="movie">
				<div>
					<div>컨저링</div>
					<div>쏘우</div>
				</div>
				<div>
					<div>분노의 질주</div>
					<div>데드풀<div>존윅3</div></div>
				</div>
			</div>


		$("movie div:contains('데드풀')").append("<div>존윅3</div>")
		------------------------------------------------------------------
		
		------------------------------------------------------------------
			<div class="movie">
				<div>
					<div>컨저링</div>
					<div>쏘우</div>
				</div>
				<div>
					<div>분노의 질주</div>
					<div>데드풀</div><div>존윅3</div>
					<div>존윅3</div>
				</div>
			</div>

		$("movie div:contains('데드풀')").parent().append("<div>존윅3</div>")
		------------------------------------------------------------------
		
		------------------------------------------------------------------
			<div class="movie">
				<div>
					<div>컨저링</div>
					<div>쏘우</div>
				</div>
				<div>
					<div>분노의 질주</div>
					<div>데드풀</div>
					<div>존윅3</div>
				</div>
				<div>존윅3</div>
			</div>

	---------------------------------
	after("html코드")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 밑 동생으로 html 코드를 삽입한다.
		<주의> next()와 헷갈리지 말자.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class="cartoon">
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			---------------------------------
			$(".xxx").after("<div>짱구</div>");
			---------------------------------
				class=xxx 가 가리키는 태그 다음으로 즉 밑 동생으로 <div>짱구</div>를 삽입하기.
				결국 아래처럼 태그가 삽입된다.
					<div class="cartoon">
						<div>사오정</div>
						<div>손오공</div>
						<div class=xxx>저팔계</div>
						<div>짱구</div>
						<div>삼장법사</div>
					</div>
	---------------------------------
	before("html코드")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 위 형으로 html 코드를 삽입한다.
		<주의> prev()와 헷갈리지 말자.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class="cartoon">
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			---------------------------------
			$(".xxx").after("<div>짱구</div>");
			---------------------------------
				class=xxx 가 가리키는 태그 다음으로 즉 위 형으로 <div>짱구</div>를 삽입하기.
				결국 아래처럼 태그가 삽입된다.
					<div class="cartoon">
						<div>사오정</div>
						<div>손오공</div>
						<div>짱구</div>
						<div class=xxx>저팔계</div>
						<div>삼장법사</div>
					</div>
		
	---------------------------------
	remove( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그를 삭제한다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class="cartoon">
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			---------------------------------
			$(".cartoon").remove();
			---------------------------------
				class=cartoon 가진 태그를 삭제한다. 그러므로 후손도 삭제된다.
	---------------------------------
	empty( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 후손을 삭제한다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div class="cartoon">
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			---------------------------------
			$(".cartoon").empty();
			---------------------------------
				class=cartoon 가진 태그의 후손을 삭제한다. class=cartoon을 가진 놈은 남아있다.
	
	---------------------------------
	addClass("클래스명")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 class="클래스명"을 삽입하라.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<div>사오정</div>
			---------------------------------
			$("div").addCLass("cartoon");
			---------------------------------
			<div>사오정</div> 태그 안에 class="cartoon"을 삽입하라.
			결국 <div>사오정</div>가 <div class="cartoon">사오정</div>으로 바뀌는 꼴이다.
			class 값이 삽입되면 좋은점
				CSS의 도움을 받을 수 있다.
				class 값이 생기므로 JQuery 객체가 접근하기 쉽다.

	---------------------------------
	removeClass("클래스명")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 class="클래스명"이란 속성명과 속성값을 삭제하라.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			 <div class="cartoon">사오정</div>
			---------------------------------
			$("div").removeClass("cartoon");
			---------------------------------
			<div>사오정</div> 태그 안에 class="cartoon"을 삭제하라.
			결국 <div class="cartoon">사오정</div>가 <div>사오정</div>으로 바뀌는 꼴이다.
	
	---------------------------------
	toggleClass("클래스명")		<참고> toggle => 켰다 껐다 하다.
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 class="클래스명"이 있다면 제거하고 없다면 class="클래스명" 삽입하라.
		
	---------------------------------
	attr('태그속성명')
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 태그속성명에 해당하는 속성값을 리턴한다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<input type="text" name="uid" class="uid">
			---------------------------------
			var str = $(".uid").attr("name");
			---------------------------------
				class=uid를 가진 태그의 name 속성값을 리턴해서 str 변수에 저장하라

	---------------------------------
	attr("태그속성명","태그속성값")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 태그속성명에 태그속성값을 삽입한다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<input type="text" name="uid" class="uid">
			---------------------------------
			$(".uid").attr("name" , "user_id");
			---------------------------------
				class=uid를 가진 태그의 name 속성값을 "user_id"로 수정하라

	---------------------------------
	attr( {"태그속성명":"태그속성값","태그속성명":"태그속성값",~} )
	---------------------------------
		현재 JQuery 객체가 관리하는 여러개의 태그의 태그속성명에 태그속성값을 삽입한다.

	---------------------------------
	removeAttr("태그속성명")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 태그속성명과 태그속성값을 삭제한다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			<input type="text" name="uid" class="uid" size=100>
			---------------------------------
			$(".uid").removeAttr("size");
			---------------------------------
				class=uid 를 가진 태그의 size 속성명과 속성값을 삭제한다.
				<input type="text" name="uid" class="uid"> 가 된다.

	---------------------------------
	prop( "DOM객체의속성변수명" )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들여 DOM 객체로 생성할 때 이 DOM 객체의 속성변수의 값을 리턴한다.
		//------------------------------------------------------------------
		<참고>주로 checkbox 입력양식 또는 radio  입력양식에 체크여부를 얻을 때 사용한다.
		//------------------------------------------------------------------
			//------------------------------------------------------------------
			<input type="checkbok" name="skill" value="JSP" class="skill">JSP
			<input type="checkbok" name="skill" value="ASP" class="skill">ASP
			<input type="checkbok" name="skill" value="PHP" class="skill">PHP
			//------------------------------------------------------------------
			<문제>ASP 의 체크여부를 얻을려면?
			//------------------------------------------------------------------
				var flag = $(".skill").filter("[value=ASP]").prop( "checked" )
	
	---------------------------------
	prop( "DOM객체의속성변수명", "데이터" )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들여 DOM 객체로 생성할 때 
		이 DOM 객체의 속성변수에 데이터를 저장한다.
		//------------------------------------------------------------------
		<예>checkbox 입력양식 또는 radio  입력양식에 체크를 해주거나 체크를 뺄때 많이 사용한다.
		//------------------------------------------------------------------
			//------------------------------------------------------------------
			<input type="checkbok" name="skill" value="JSP" class="skill">JSP
			<input type="checkbok" name="skill" value="ASP" class="skill">ASP
			<input type="checkbok" name="skill" value="PHP" class="skill">PHP
			//------------------------------------------------------------------
			<문제>코딩으로  JSP 를 체크하려면?
			//------------------------------------------------------------------
				$(".skill").filter("[value=JSP]").prop( "checked", true );     **********

	---------------------------------
	each( function(index){실행구문;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 들에 차례대로 접근해서 에  실행구문을 반복 실행한다.
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
			<input type="text" name="mem_id" class="mem_id">
			<input type="text" name="mem_name" class="mem_name">
			<select name="addr" class="addr">
				<option value="">
				<option value="서울">서울
				<option value="경기">경기
				<option value="인천">인천
				<option value="기타">기타
			</select>
		-----------------------------------------------------
			$(".mem_id,.mem_name,.each(
				function(i) {
					//---------------------------------
					// JQuery 객체가 관리하는 i번째 태그의 value 값을 얻어 변수 value에 저장하기
					//---------------------------------
					var value = $(this).val();
					//---------------------------------
					// JQuery 객체가 관리하는 i번째 태그의 name 값을 얻어 변수 name에 저장하기
					//---------------------------------
					var name = $(this).attr("name");
					//---------------------------------
					// 만약에 value 값이 비어있거나 공백이면 경고하기
					//---------------------------------
					if(value.split(" ").join("")=="")
						alert(name+" 는 데이터가 비었습니다. 입력 또는 선택해주세요")
					}
				}
			);
		-----------------------------------------------------
			class=mem_id, class=mem_name, class=addr 을 가진 태그를 관리하는 JQuery 객체를 생성하고
			each 메소드를 호출하여 function(i){실행구문} 익명함수의 실행구문을 실행한다.

	---------------------------------
	hover( function(){실행구문1;} , function(){실행구문2;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그들에 마우스를 대면 실행구문1을 실행하고
		마우스를 빼면 실행구문2를 실행.

	---------------------------------
	index( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그가 형제들 중에 몇번째 인덱스 번호에 해당하는 지를 리턴한다.
	
	---------------------------------
	index( 선택자2 )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그들 중 선택자2 가 가리키는 태그의 서열 위치 인덱스 번호 리턴한다.
	
	---------------------------------
	이벤트명( function() {실행구문;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 아래와 같은 이벤트가 발생하면 실행구문을 실행한다.
		---------------------------------
		<예> change( function() {실행구문;} )
		---------------------------------
			checkbox 또는 radio 라면 체크가 들어가거나 빠질때
			select 입력 양식이라면 바꿔 선택할 때
			키보드로 문자를 입력하는 입력양식이라면 기존에 문자가 다른 문자로 변경이 된 후 커서를 뺄 때
		---------------------------------
		<예> click( function() {실행구문;} )
		---------------------------------
			클릭이벤트가 발생하면 실행구분을 실행시킴. 마우스 왼쪽버튼

	---------------------------------
	css ( "css속성명","css속성값" )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 css 속성명에 css 속성값을 설정하기
		---------------------------------
		<참고> CSS (=Cascading Style Sheets)
		---------------------------------
			HTML 문서의 전반적인 [스타일]을 미리 저장해 둔 스타일 시트이다.
			문서 전체의 일관성을 유지할 수 있고, 세세한 스타일 지정의 필요를 줄어들게 하였다.
			웹에서 스타일이란 모양새, 색상, 컨텐츠 배치 등을 말한다.
			기존의 HTML은 웹 문서를 다양하게 설계하고 수시로 변경하는데 많은 제약이 따르는데,
			이를 보완하기 위해 만들어진 것이 스타일 시트이고 스타일 시트의 표준안이 바로 CSS이다.
			간단히 스타일 시트라고도 부른다.
			CSS 를 시용하면 보다 풍부한 디자인으로 웹을 설계할 수 있고,
			글자의 크기, 글자체, 줄간격, 배경 색상, 컨텐츠 배치 등을 자유롭게 선택하거나 변경할 수 있으며
			유지, 보수도 간편하게 할 수 있다.
			디자이너 영역이다.
			---------------------------------
			CSS의 설정 형식
			---------------------------------
			선택자 {
				CSS속성명:CSS속성값
				~
			}
			---------------------------------

		---------------------------------
		<예> HTML 문서내에 아래와 같은 <style> 가 있을 경우
		---------------------------------
			<style>
				.xxx {
					text-decoration:none;
					color:#CC0000;
					font-style:italic;
					font-weight:bold;
				}
			</style>
		---------------------------------
			class="xxx" 를 가진 태그는
				언더바 넣지마.
				글자색은 #CC0000 로 해줘.
				글자체는 italic 로 해줘.
				글자 두께는 두껍게 해줘.

	---------------------------------
	css ( {"CSS속성명":"CSS속성값","CSS속성명":"CSS속성값",~,"CSS속성명":"CSS속성값"} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 n개의 css속성명에 n개의 css속성값을 설정하기
		즉 css 메소드 한번 호출로 여러개의 CSS 설정을 할 수 있다.

	---------------------------------
	hide( 속도, function(){실행구문;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 숨기게 한 후에 익명함수를 호출한다.
		<주의> 가로세로 크기가 같은 비율로 작아지며 사라진다.
		<주의> 매개변수로 들어오는 데이터가 둘다 생략될 수 있다.
		<주의> 매개변수로 들어오는 데이터가 하나만 생략된다면 익명함수만 생략 가능하다.
		<주의> 속도는 n초*1000이다.
		<주의> 속도로 다음과 같은 문자로 써도 된다.
			"slow", "normal", "fast" (0.6초, 0.4초, 0.2초) 의 문자 입력 가능.

		웹화면에서 사라지게한다. 안보일 뿐 존재는 한다.

	---------------------------------
	show( )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그를 웹 화면에서 보이게한다.
		hide(~)의 반대이다.
		매개변수 설명은 hide와 동일하다.

	---------------------------------
	fadeOut( 속도, function(){실행구문;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 투명해지면서 안보이게 한 후에 익명함수를 호출한다.

	---------------------------------
	fadeIn( 속도, function(){실행구문;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 보이게 한 후에 익명함수를 호출한다.
		fadeOut 메소드의 반대이다.

	---------------------------------
	slideUp( 속도, function(){실행구문;} )
	---------------------------------
		현재 Jquery 객체가 관리하는 태그의 출력물을 설정한 속도로 슬라이딩 효과로 사라지게 한 후 익명함수를 호출한다.
		<주의> 세로 크기가 위로 줄어들며 사라진다.
		<주의> 매개변수로 들어오는 데이터가 둘다 생략될 수 있다.
		<주의> 매개변수로 들어오는 데이터가 하나만 생략된다면 익명함수만 생략 가능하다.

	---------------------------------
	slideDown( 속도, function(){실행구문;} )
	---------------------------------
		slideUp 의 반대 메소드이다.

	---------------------------------
	animate( css설정, 속도, function(){실행구문;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 출력물을 설정속도로 [css설정]을 하는 애니메이션을 일으킨 후 익명함수를 실행한다.

	---------------------------------
	이벤트명( function() {실행구문;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 아래와 같은 이벤트가 발생하면 실행구문을 실행한다.
		---------------------------------
		<예> change( function() {실행구문;} )
		---------------------------------
			현재 JQuery 객체가 관리하는 태그에 아래와 같은 change 이벤트가 발생하면 실행구문을 실행한다.
			checkbox 또는 radio 라면 체크가 들어가거나 빠질때
			select 입력 양식이라면 바꿔 선택할 때
			키보드로 문자를 입력하는 입력양식이라면 기존에 문자가 다른 문자로 변경이 된 후 커서를 뺄 때
		---------------------------------
		<예> click( function() {실행구문;} )
		---------------------------------
			클릭이벤트가 발생하면 실행구분을 실행시킴. 마우스 왼쪽버튼

	---------------------------------
	이벤트명( )
	trigger( "이벤트명" )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 이벤트명에 해당하는 이벤트를 코딩으로 이르킨다.
		---------------------------------
		<예> <input type = button class="save_btn" value="저장" onClick="checkForm();">
		---------------------------------
			위 버튼 입력양식의 실행 결과물에 마우스 왼쪽버튼을 클릭하면 checkForm() 함수를 호출한다는 태그이다.
			그런데 아래 코드가 실행되면 버튼을 마우스 왼쪽 버튼으로 클릭한 것과 동일한 효과를 낸다.

			$(".save_btn").click();
			$(".save_btn").trigger("click");

	---------------------------------
	bind( "이벤트명", function(){실행구문;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 "이벤트명"에 해당하는 이벤트가 발생하면 실행구문을 실행하도록 설정한다.
		---------------------------------
		<예> bind( "click", function(){실행구문;} )
		---------------------------------
			현재 JQuery 객체가 관리하는 태그에 클릭이벤트(=마우스왼쪽버튼누름)가 발생하면 실행구문을 실행한다.
	
	---------------------------------
	bind( "이벤트명1 이벤트명2 ~", function(){실행구문;} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 "이벤트명"에 해당하는 이벤트가 여러개 발생하면 실행구문을 실행하도록 설정한다.
		---------------------------------
		<예> bind( "keyup click", function(){실행구문;} )
		---------------------------------
			현재 JQuery 객체가 관리하는 태그에 클릭이벤트 또는 키업 이벤트가 발생하면 실행구문을 실행한다.
	
	---------------------------------
	bind( "이벤트명1 ", function(){실행구문;}
	     ,"이벤트명2 ", function(){실행구문;}
	     ,"이벤트명3 ", function(){실행구문;}
	     ~
	)
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 "이벤트명"에 해당하는 이벤트가 여러개 발생하면 실행구문을 실행하도록 설정한다.
		---------------------------------
		<예> bind( "keyup click", function(){실행구문;} )
		---------------------------------
			현재 JQuery 객체가 관리하는 태그에 각각의 "이벤트명"에 해당하는 이벤트 발생하면 각각의 실행구문을 실행한다.
	
	---------------------------------
	unbind( "이벤트명" )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 bind(~)를 쓴 메소드로 지정했던 이벤트를 지운다.
		즉 bind(~)를 쓴 메소드로 이벤트가 발생하면 실행할 코드를 unbind 메소드를 호출함으로써 실행할 코드를 무력화 시킨다.
	
	---------------------------------
	one( "이벤트명", function(){실행구문;}  )
	---------------------------------
		bind(~) 와 동일한 기능을 가진다.
		---------------------------------
		<주의> bind(~) 와 one(~)의 차이점
		---------------------------------
			버튼 입력양식을 클릭하여 bind 메소드로 설정한 익명함수가 호출될 경우
			이 버튼을 연달아 클릭하면 연달아 익명함수가 호출된다.
			------------------------------------------------------------------
			버튼 입력양식을 클릭하여 one 메소드로 설정한 익명함수가 호출될 경우
			이 버튼을 연달아 클릭하면 처음 클릭할 때만 익명함수가 호출된다.
			------------------------------------------------------------------
			네트워크가 느릴 때 게시판 글 저장 시 2회 이상 클릭하여
			bind(~) 가 2회 이상 실행되면 여러번 DB에 저장되므로 이럴 경우에
			one(~)을 사용하면 중복 저장을 막을 수 있다.
			------------------------------------------------------------------
	
	---------------------------------
	toggle( function(){실행구문1}, function(){실행구문2} )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그들에 클릭이벤트가 홀수번째 발생하면 실행구문1을 실행하고
		클릭이벤트가 짝수번째 발생하면 실행구문2를 실행.

	---------------------------------
	toggleClass( "클래스명" ) <참고> toggle => 켰다 껐다[왔다 갔다] 하다
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 class="클래스명" 이 있다면 제거하고 없다면
		class="클래스명" 삽입하라.

	---------------------------------
	error( function(){실행구문1}  )
	---------------------------------
		현재 JQuery 객체가 관리하는 이미지 관련 태그에 src 속성값의 이미지가 없을경우 실행구문을 실행
		이 실행구문은 주로 다른 이미지로 대체하던가 아니면 경고를 띄우는 실행구문이다.
		---------------------------------
		<예> <img src="존재하지않는 이미지명">
		---------------------------------

	---------------------------------
	focus()
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 포커스를 들인다.

	---------------------------------
	blur()
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에서 포커스를 뺀다.

	---------------------------------
	size()
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 개수를 리턴한다.
		length 라는 속성변수에도 태그의 개수가 들어 있다.
		---------------------------------
		<주의> 현재 JQuery 객체가 관리하는 태그가 없는 상태라면 0을 리턴한다.
		<주의> 선택자 가리키는 태그가 없어도 JQuery 객체는 무조건 생성된다.
			그러므로 조건을 걸고 메소드를 호출할 필요가 없다.
			즉 객체 생성이 됐으면 메소드를 호출하라 라는 형식이 필요없다.
	
	---------------------------------
	is( 선택자1 )
	---------------------------------
		현재 JQuery 객체가 관리하는 태그와 선택자1이 가리키는 태그가 같은경우
		true를 리턴한다.

	---------------------------------
	hasClass("클래스명")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그에 class = "클래스명" 을 가지고 있으면 true 리턴

	---------------------------------
	disable()
	---------------------------------
		현재 JQuery 객체가 관리하는 태그를 비활성화 시킨다.
		주로 [입력양식]의 태그를 무력화 시킬 때 사용한다.
		심지어 서버쪽으로 name 값과 value 값이 전송되지도 않는다.
		---------------------------------
		<참고> 비활성화의 의미는 보이기는 하나 기능을 발휘하지 못하는 상태를 말한다.
		<예> <input type="text" name="uid"> 라는 입력양식이 비활성화 되면 보이기는하나 커서가 못들어간다.

	---------------------------------
	serialize() *  프로젝트에서 비동기 방식으로 서버와 통신할 때 사용
	---------------------------------
		현재 JQuery 객체가 관리하는 태그의 후손 중에
		입력양식 태그들의 name 값과 value 값을 모아서 아래와 같은 문자열 패턴으로 리턴
		JQuery 객체가 관리하는 태그는 십중팔구 form 태그이다.
		비동기 방식으로 웹서버와 통신할 때 유저가 입력/선택한 데이터를 보낼때 사용한다.
		
		------------------------------------------------------------------
		"name 값1 = value 값1 문자열의 인코딩 & name값2=value값2 문자열의 인코딩 & ~"
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		<form name = "memRegForm">
			아이디 : <input type = "text" name = "uid"> <br>
			암  호 : <input type = "password" name = "pwd"> <br>
			이  름 : <input type = "text" name = ":uname">
		</form>
		------------------------------------------------------------------
		위 html 소스의 실행 결과로 웹화면에 [문자열 입력상자]와 [암호 입력상자]가 보일것이다.
		아이디는 abc123이 입력되고 암호는 1234가 입력되었을 때
		자스 코드 $("[name='memRegForm']").serialize()가 실행되면

		"uid=abc123&pwd=1234&uname=%EA%B6%8C%EC%9B%85%EC%88%9C" 문자열이 리턴된다.
		------------------------------------------------------------------

		---------------------------------
		<참고> encoding( 인코딩 )
		---------------------------------
			컴퓨터가 통신이나 저장 못적으로 데이터를 부호화하는 것을 말한다.

		---------------------------------
		<참고> decoding( 디코딩 )
		---------------------------------
			인코딩된 것을 사람이 인지할 수 있는 문자로 바꾸는 것을 말한다.

		---------------------------------
		<참고> 비동기 방식
		---------------------------------
			웹화면의 이동없이  즉 웹페이지 이동 없이 웹서버와 통신하는 것을 말한다.
			<예> 네이버에서 키워드 입력하면 관련 검색어 뜨기
			<예> 네이버에서 지도 밀기
			<예> 회원가입시 아이디의 중복체크

		---------------------------------
		<참고> AJAX
		---------------------------------
			웹서버와 비동기 방식으로 통신한 결과를 현재 화면에 반영하는데 사용되는 기술을 총칭하는 말
			AJAX 기술은 XMLHttpRequest 객체, DOM, 자바스크립트, CSS 기술을 말한다.
		
	---------------------------------
	$.trim("문자열")
	---------------------------------
		문자열에서 맨앞 또는 맨뒤 공백을 제거한 문자열 리턴한다.
		$ 는 JQuery 라이브러리에 들어있는 변수이다.
		이 변수안에는 JQuery 객체가 저장되어 있다.
		이 객체는 태그를 관리하지는 않는다.
		------------------------------------------------------------------
		<주의> $('선택자') 는 달러 함수이고 선택자가 가리키는 태그를
			관리하는 JQuery 객체를 생성하고 객체의 메모리 위치 주소값을 리턴한다.
		------------------------------------------------------------------

	---------------------------------
	$.map( Array 객체메위주, function(value,index){~; return 값;} )
	---------------------------------
		Array 객체의 배열변수에 차례대로 접근해서 function(index){~ return 값;}을
		실행하여 return값; 에 의해 리턴된 값을 새로운 Array객체에 저장해 Array 객체의 메위주를 리턴
		익명함수의 매개변수 value, index 에는 i 번째 배열변수값, 배열변수 인덱스 번호가 들어온다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		var salarys = [9000, 7000, 5000]

		var real_salarys = $.map(salarys, function(value,index) {
				return value*0.88;
			}
		);
		------------------------------------------------------------------
		위 real_salarys 에는 Array 객체가 저장되어 있고 배열변수에는 아래처럼 저장되어 있다.
		real_salarys[0] 에 9000 * 0.88 (=7920) 가 저장됨
		real_salarys[1] 에 7000 * 0.88 (=6160) 가 저장됨
		real_salarys[2] 에 5000 * 0.88 (=4400) 가 저장됨
		------------------------------------------------------------------

	---------------------------------
	$.grep( Array 객체메위주, function(value,index){~; return boolean 값;} )
	---------------------------------
		Array 객체의 배열변수에 차례대로 접근해서 function(value){ ~ return boolean값;}을
		실행하여 리턴된 값이 true 일 경우의 배열값만 모아 새로운 ARray 객체의 메위주를 리턴
		익명함수의 매개변수 value, index 에는 i 번째 배열변수값, 배열변수 인덱스 번호가 들어온다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		var nums = [1,4,7];
		var odd_nums = $.grep( nums, function(value,index) {
				return value%2==1;
			}
		);
		------------------------------------------------------------------
		위 odd_nums 에는 Array 객체가 저장되어 있고 배열변수에는 아래처럼 저장되어 있다.
		odd_nums[0] 에 1 이 저장됨
		odd_nums[1] 에 7 이 저장됨
		------------------------------------------------------------------

	---------------------------------
	$.merge( Array 객체메위주1, Array 객체메위주2 )
	---------------------------------
		2개의 Array 객체안의 배열변수를 복사해서 붙여 새로운 Array 객체에 담아 객체의 메위주를 리턴\
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		var kors = [51, 71, 91];
		var engs = [55, 72, 92];
		var tots = $.merge( kors, engs );
		------------------------------------------------------------------
		위 tots 에는 Array 객체가 저장되어 있고 배열변수에는 아래처럼 저장되어 있다.
		tots[0] 에 51 이 저장됨
		tots[1] 에 71 이 저장됨
		tots[2] 에 91 이 저장됨
		tots[3] 에 52 이 저장됨
		tots[4] 에 72 이 저장됨
		tots[5] 에 92 이 저장됨
		------------------------------------------------------------------

	---------------------------------
	$.unique( Array 객체메위주 )
	---------------------------------
		Array 객체 안의 중복 데이터를 제거한다.
		단 이웃하고 있는, 붙어있는 중복데이터만 지운다
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		var stu_no = [1, 2, 2, 3, 4, 2];
		$.unique( stu_no );
		------------------------------------------------------------------
		위 tots 에는 Array 객체가 저장되어 있고 배열변수에는 아래처럼 저장되어 있다.
		stu_no[0] 에 1 이 저장됨
		stu_no[1] 에 2 이 저장됨
		stu_no[2] 에 3 이 저장됨
		stu_no[3] 에 4 이 저장됨
		stu_no[4] 에 2 이 저장됨
		------------------------------------------------------------------
		중복된 놈 모두 제거하기
		------------------------------------------------------------------
		var stu_no = [1, 2, 2, 3, 4, 2];
		stu_no.sort();
		$.unique( stu_no );
		------------------------------------------------------------------
		<문제> Array 객체안에 중복된 데이터를 제거하는 프로그램을 작성하면?
			단 JQuery 객체의 unique 메소드 사용않고.
		------------------------------------------------------------------
			var xxxs = [1, 1, 2, 2, 3, 4, 1, 3, 2]
			for ( var i=0; i<xxxs.length-1; i++ ) {
				for ( var j=i+1 ; j<xxxs.length ; j++ ) {
					if ( xxxs[i]==xxxs[j] ) {
						xxxs.splice(i,1);
						i--;
					}
				}
			}
		------------------------------------------------------------------
		<문제>  기존 Array 객체에서 중복없이 배열변수안의 값을 복사해서
			새로운 Array 객체에 저장하기
		------------------------------------------------------------------
			var xxxs = [1, 1, 2, 2, 3, 4, 1, 3, 2]
			var new_xxxs = [ ];
			for ( var i=0; i<xxxs.length-1; i++ ) {
				var cnt = 0;
				for ( var j=0 ; j<new_xxxs.length ; j++ ) {
					if ( xxxs[i]==new_xxxs[j] ) {
						cnt++;
					}
				}
				if ( cnt == 0 ) { new_xxxs.push ( xxxs[i] ) ; }
			}

	---------------------------------
	$.each( Array 객체메위주, function(index,value) {실행구문} )
	---------------------------------
		Array 객체의 배열변수에 차례대로 접근해서 실행구문을 실행한다.
		------------------------------------------------------------------
		<주의> $(선택자).each( function(index){실행구문} ) 과 혼동하지 말것.
		------------------------------------------------------------------

	---------------------------------
	$.each( {~:~,~:~,~:~}, function(key,value) {실행구문} )
	---------------------------------
		{~:~,~:~,~:~} 객체, 즉 JSON 또는 일회성 사용자 정의 객체의 속성변수에
		차례대로 접근해서 function(key, value){~}를 실행한다.
		function(key, value){~} 에서 key는 속성변수명, value에는 속성값이 전달된다.
	
	---------------------------------
	$.ajax( {	url : "서버URL주소" 
			, type : "get" 또는 "post" 
			 , data : "name값 = value값 & ~ " 또는 {파라미터명:값,~} )
			 , dataType : "서버가 응답한 페이지 종류"
			 , success : function ( 서버의 응답물 저장 매개변수 ) {
				통신 성공 시 실행할 코드
			}
			 , error : function() {
				통신 실패 시 실행할 코드
			}
		}
	)
	---------------------------------
		------------------------------------------------------------------
		웹 서버와 비동기 통신하는 메소드이다. 리턴값은 없다. 매개변수로 일회성 사용자 정의 객체가 전달된다.
		이 일회성 사용자 정의 객체 안의 속성변수에 위와 같이 여러 정보가 설정된다.
		------------------------------------------------------------------
		[서버URL주소]로 [get 또는 post] 방식으로 "name값=value값&~"  를 가지고  
		서버에 접속한 후 [서버의 응답]을 받으면 sucess에 저장된 익명함수를 호출한다.
		이때 익명함수의 매개변수로 전달되는 데이터는  서버가 전해준 DB 연동 결과물을 내포한 HTML 소스 이다.
		만약 [서버의 응답]을 받지 못하면, 즉 서버와 통신에 실패하면 속성변수 error 에 저장된 익명함수를 호출한다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
			$.ajax (	{
						url : "http://www.naver.com"
						,type : "post"
						,data : $("[name=memRegForm]").serialize()
						,dataType : "html"
						,success : function ( responseHTML ) {
							매개변수 responseHTML 안의 HTML 소스 문자열에 DB 연동 결과물을 뽑아
							현재 화면에 반영하는 등의 소스가 나온다.
						}
						,error : function() {
							alert("서버와 통신 실패! 관리자에게 문의 바람!")
						}
					}
				);

	---------------------------------
	$(document).on( "이벤트명"
			,"선택자"
			,function() { 실행코드 }
	);
	---------------------------------
		[선택자]가 가리키는 기존 또는 추가 예정인 태그에 대한 이벤트를 미리 정의해 놓는다.
		
	---------------------------------
	replaceWith("HTML소스")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그를 지정한 HTML소스로 대체한다.
		즉 JQuery 객체가 관리하는 태그 없애고 HTML소스를 삽입한다.

		---------------------------------
		<참고> html("HTML소스") 메소드의 기능
		---------------------------------
			---------------------------------
			<div class=xxx>
				임은지
			</div>
			---------------------------------
				위 코드가 있는 상태에서
				$(".xxx").html("<div>강명진</div>")
				가 실행되면 아래처럼된다.
			---------------------------------
			<div class=xxx>
				<div>강명진</div>
			</div>
			---------------------------------

	---------------------------------
	wrap(선택자2)
	---------------------------------
		선택자2가 가리키는 태그를 복사해서 현재 JQuery 객체가 관리하는 태그를 감싼다.
		---------------------------------
		<예>
		---------------------------------
		<div class=action>
			나쁜 녀석들
		</div>
		<div class=movie>
		</div>
		---------------------------------
			위 코드가 있는 상태에서
			$(".action").wrap(".movie")
			가 실행되면 아래처럼된다.
		---------------------------------
		<div class=movie>
			<div class=action>
				나쁜 녀석들
			</div>
		</div>
		<div class=movie>
		</div>
		---------------------------------

	---------------------------------
	load("*.html" 또는 ".txt")
	---------------------------------
		현재 JQuery 객체가 관리하는 태그 내부에 "*.html" 또는 "*.txt" 안의 내용을 덮어쓴다.
		---------------------------------
		<예>
		---------------------------------
		$("#movie").load("movie_info.txt");


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<13> JQuery 객체에서 속성변수의 종류는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	---------------------------------
	length
	---------------------------------
	------------------------------------------------------------------
	현재 JQuery 객체가 관리하는 태그의 개수가 저장되어 있다.
	------------------------------------------------------------------
	<참고> 메소드 size() 의 리턴값도 현재 JQuery 객체가 관리하는 태그의 개수이다.  
	------------------------------------------------------------------


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<14> JQuery 객체의 메소드 중 새로운 JQuery 객체의 메위주를 리턴하는 메소드를 모두 써라?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	$.map(    Array객체메위주, function(value, index){ ~; return 값;}    )

	$.grep(    Array객체메위주, function(value, index){ ~; return boolean값;}    )

	$.merge( Array객체메위주1, Array객체메위주2 )


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<15> JQuery 객체의 메소드 중 문자열을 리턴하는 메소드를 모두 써라 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	text()

	html()

	val()

	serialize(  ) 

	$.trim( "문자열" )


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<16> JQuery 객체의 메소드 중 정수를 리턴하는 메소드를 모두 써라?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	index( ) 
	
	index( 선택자2 ) 
	
	size( )


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<17> JQuery 객체의 메소드 중 true 또는 false 를 리턴하는 메소드를 모두 써라?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	is( 선택자1 )     

	hasClass( "클래스명" )   

	prop( "checked" )


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<18> JQuery 객체의 메소드 중 삭제의 기능, 즉 무언가를 없애는 기능을 가진 메소드를 모두 써라?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	remove( )

	empty( )

	removeClass( "클래스명" )  ★★★

	removeAttr( "태그속성명" ) 


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<19> JQuery 객체의 메소드 중 삽입 기능을 가진 메소드를 모두 써라?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	val("문자열")

	append( "html코드" ) ★★★★★

	prepend( "html코드" )

	after( "html코드" )

	before( "html코드" )

	addClass( "클래스명" )  ★★★

	toggleClass( "클래스명" )

	attr( "태그속성명", "태그속성값" )  ★★★★★

	attr( {"태그속성명":"태그속성값", "태그속성명":"태그속성값", ~} )  ★★★★★

	replaceWith( "HTML소스" )



































































































































































































































































































