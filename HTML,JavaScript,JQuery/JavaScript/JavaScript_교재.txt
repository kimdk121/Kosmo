■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<1> JavaScript 란 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	
	● HTML 언어에 부가되어 웹페이지를 좀 더 동적이고 다양하게 제작할 수 있는 기법을 제공하는 스크립트 언어의 일종이다.
	
	● 현재 대부분의 웹 브라우저에서 자바스크립트 코딩을 읽어 기능을 구현하는 [JAVA SCRIPT 엔진] 이 탑재되어 있다.
		▶ <참고> V8 => 구글의 크롬 브라우저와 안드로이드 브라우저에 탑재된 자바스크립트 엔진 이름이다.
	------------------------------
	● <참고> 스크립트 언어의 특징
	------------------------------
		▶ 혼자 실행되지 못하고 다른 언어에 포함되어 실행된다.
		▶ 스크립트 언어 종류 => JSP, ASP, PHP 등

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<2> JavaScript의 기능 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	● 입력 양식에 입력/선택된 데이터에 대한 검증을 한다. (=유호성 체크)

	● 태그의 속성값을 입력/수정/삭제 하거나 태그 자체의 입력/삭제 작업을 한다. 태그 컨트롤을 할 수 있다.
	   <참고> 태그 컨트롤은 자스보다는 JQuery 를 사용하는게 좋다.
	● AJAX를 통하여 웹 서버와의 데이터 통신을 한다.
		------------------------------------------------------------
		▶ AJAX => 비동기 방식으로 웹서버와 통신한 후 통신 결과물을 현 화면에 반영하는데 사용되는 기술들을 총칭한다.
			   [XMLHttpRequest 객체/DOM/자바스크립트/CSS] 기술들을 총칭한다.
		------------------------------------------------------------
		▶ 비동기 방식 => 페이지 이동 없이 웹 서버와 통신하는 방식을 말한다
				  <예> 네이버에서 키워드 입력하면 관련 검색어가 하단에 붙는 것.
				  <예> 네이버지도에서 지도를 밀면 새로운 지도가 나오는 것
		------------------------------------------------------------
		▶ 동기 방식 => 페이지가 이동하면서 웹서버와 통신하는 방식을 말한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<3> JavaScript의 장점 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	● Server에서 Client 쪽으로 전달되어 실행이 되므로 Server에 부담을 주지 않는다.

	● 변수, 연산자, 조건문, 반복문, 함수, 객체 등을 사용하여 프로그래밍의 수준에서 처리할 수 있게 한다.

	● AJAX 기술을 사용하여 간접 DB 연동이 가능하다.

	● 문법이 자바나 C 보다 간단하여 학습이 쉽다. <예> 모든 변수의 형식 검사를 하지 않음 등.

	● [보안성], [소스 중요성]이 없는 역할은 Javascript가 담당하고, 반대인 경우는 서버쪽 프로그래밍 언어가 담당한다.

	● 모바일 분야에서도 활용된다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<4> JavaScript의 단점 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	● HTML 소스코드 안에 포함되어 있기 때문에 소스가 노출된다. 즉 클라이언트가 JAVA SCRIPT 소스를 볼 수 있다.

	● JAVA, C 언어 같은 강력한 기능의 프로그램을 만들 수 없다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<5> JavaScript을 부르는 다른 이름들 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	JavaScript		 -> Mozilla Firefox,Google Chrome,Apple Safari, Adobe Acrobat
	Internet Explorer	 -> JScript
	Opera			 -> ECMAScript
	.NET			 -> JScript.NET
	Adobe Flash & Adobe Flex -> ActionScript

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<6> JavaScript는 HTML 안에서 어디에 삽입되는가 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	script 태그 안에 삽입된다.
	------------------------------
	<script>
		자바스크립트 코드;
	<script>
	------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<7> 2개 이상의 HTML 안에서 동일한 자바스크립트 코드를 사용할 경우 자바스크립트 코드의 유지 보수가 힘들다
    즉 자바스크립트 코드가 변경 되면 모든 HTML을 열어서 자바스크립트 코드를 수정해야 한다
    해결책은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	자바스크립트 코드를 xxx.js 파일에 저장하고 각 HTML에서 아래 처럼 수입하면 된다.
	------------------------------
	<script src = "xxx.js"></script>
	------------------------------
		xxx.js 파일안의 모든 자바스크립트 코드를 script 안에 삽입한다


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<8> 자바스크립트는 프로그래밍 언어이다. 자바스크립트에서 자료형(=데이터의 종류 = data type)의 종류는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------
	(1) 숫자형
	------------------------------
		▶ 정수, 실수 데이터를 말한다.

	------------------------------
	(2) 문자형
	------------------------------
		▶ 문자 데이터를 말한다.
		▶ "로 감싼다. <참고> ' 로 감싸도 되지만 되도록 "로 감싼다.
		▶ "" 또는 ''는 길이가 없는 문자 데이터 이다.

	------------------------------
	(3) boolean 형
	------------------------------
		▶ true 또는 false 데이터를 말한다. 진실이냐 거짓이냐를 표현한다.

	------------------------------
	(4) 함수형
	------------------------------
		▶ function(매개변수) {실행구문;}의 형태 데이터 말한다.
		▶ function(매개변수) {실행구문;}의 형태를 익명함수라고 부른다.
		▶ <예> var doubleNum = function(num) { return num*num;};

	------------------------------
	(5) 객체형
	------------------------------
		▶ 객체가 차지하는 메모리 공간의 위치 주소값을 말한다.
		▶ 객체가 차지하는 메모리 공간의 위치 주소값을 알면 객체가 소유한 속성변수나
		   메소드를 호출할 수 있다.
		   객체 생성의 목적은 메소드나 속성변수 호출이다.

	------------------------------
	(6) undefined 형
	------------------------------
		▶ 알 수 없는 데이터를 말한다. 즉 프로그램에서 사용할 수 없는 데이터를 말한다.
		▶ 위 5가지 자료형 이외의 자료형을 말한다.
		▶ "나도 몰라 데이터"

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<9> 자바스크립트에서 변수 선언은 어떻게 하는가 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------
	변수 개념 => 데이터가 저장되는 [메모리의 기억장소]에 붙인 이름을 말한다.
		     <비유> 음식을 담는 그릇과 동일한 개념이다.
	------------------------------------------------------------
	변수 사용 이유 => 데이터를 변수에 저장함으로써 재사용이 가능하다.
			  데이터를 변수에 저장하지 않으면 데이터를 재사용할 수 없다.
	------------------------------------------------------------
	변수 선언 형식 => var 변수명 = 데이터;
	------------------------------------------------------------
	변수명 제작 규칙
	------------------------------------------------------------
		▶변수 이름은 [영문], [숫자],  _ , $ 로 만 구성된다. 단, 영문 중 예약어 (var, if 등)은 불가능하다.
		▶<주의>변수명의 중간에 공백이 있으면 안 된다. <참고>영문 대신 한글,일어,한자 등 도 가능하나 영문을 사용한다.
		▶변수명의 첫 글자로 숫자가 올 수는 없다.
		▶변수명은 영문 대, 소문자를 구별한다.
		▶관용적 변수명 제작 규칙
			▶영문, 숫자, _ 로 구성한다.
			▶변수명의 첫 글자는 영문으로 시작한다.
			▶3자 이상으로 제작한다.
			▶변수명을 보고 저장되는 데이터의 종류를 알 수 있도록 의미 있게 준다. (=가독성 있게 준다)
		▶변수명 사용 불가능 예 
		    =>273alpha, has space
		    =>break, else, instanceof, true, case, false, new, try, catch, finally, null. typeof, continue, for, return, var, default, function, switch 등

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<10> 자바스크립트에서 변수의 종류는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------
	전역변수
	------------------------------
		▶ 하나의 HTML 파일 안의 모든 자바스크립트에서 공유 가능한 변수다
		▶ 주로 함수 밖에서 var을 붙이거나 var 없이 선언된 변수다.
	------------------------------
	지역변수
	------------------------------
		▶ 함수 안에서 var 로 선언되어 함수 안에서만 사용되는 변수다.
		▶ <주의> 함수 안에서 var없이 선언된 변수는 함수 밖에서도 호출 가능한 전역변수가 된다.
		▶ <예> function getTot(){var base=80;~}
	------------------------------
	매개변수
	------------------------------
		▶ 함수 호출 시 전달되는 데이터를 저장하는 변수다.
		▶ 함수 안에서만 사용가능한 지역변수이다.
		------------------------------------------------------------
		▶ <예> function 함수명(매개변수){실행구문;}
		------------------------------------------------------------
			function getTot(kor){~}
		------------------------------------------------------------
		▶ <주의> 매개변수 앞에는 절대 var을 붙이지 않는다. 에러발생

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<11> 자바스크립트에서 함수(=function) 는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	● [실행구문영역]에 이름을 붙여 선언한 후 필요 시점에 이름을 호출하여
	   [실행구문]을 실행하는 일종의 [단위프로그램] 이다.
	
	● 반복 사용하는 실행구문을 함수로 만들어놓으면 보관이 용이하고,
	   언제든지 쉽게 호출하여 사용할 수 있다.

	● <참고> 함수보다 더 조직적인 [단위 프로그램]은 [객체]이다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<12> 함수(=function) 의 종류는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------
	정적함수(선언적 함수)
	------------------------------
		▶ [함수명]을 붙여 선언하는 함수
		▶ 형태
			------------------------------------------------------------
			function 함수명 (매개변수) {

				실행구문;

				[return [반환값];]

			}
			------------------------------------------------------------
				대괄호는 생략이 가능하다는 의미이다.
				매개변수는 0개 이상 나올 수 있음. 2개 이상이라면 ,로 나열함.
				매개변수 왼쪽에 var 있으면 절대 안된다.
			------------------------------------------------------------
				●함수명은 변수명 제작 규칙과 동일하다. <주의>함수명 호출 시 함수명 철자와 대소문자가 일치해야한다.
				●[매개변수]는 0개 이상 나올 수 있다. 2개 이상일 땐 , 로 나열한다.
				●[매개변수]가 있을 경우 함수 호출 시 매개변수 개수와 자료형에 맞게 데이터를 전달하여 함수를 호출한다.
				●함수 호출 시 return 반환값; 이 나오면 함수를 중단하고 함수를 호출한 곳으로 [반환값]을 리턴한다. 
				●함수 호출 시 return; 이 나오면 함수를 중단만 한다.
			------------------------------------------------------------
	------------------------------
	익명 함수
	------------------------------
		▶ [함수명] 없이 선언하는 함수로, 주로 변수에 저장한다. 즉 데이터의 한 종류 이다.
		▶ 형태
			------------------------------------------------------------
			function (매개변수) {

				실행구문;

				[return [반환값];]

			}
			------------------------------------------------------------
				대괄호는 생략이 가능하다는 의미이다.
				매개변수는 0개 이상 나올 수 있음. 2개 이상이라면 ,로 나열함.
				매개변수 왼쪽에 var 있으면 절대 안된다.
			------------------------------------------------------------

	------------------------------
	내장 함수
	------------------------------
		▶ 자주 사용되는 기능의 가진 미리 만들어져 제공하는 함수.
		▶ <예> alert("아")
	------------------------------
	사용자 정의 함수
	------------------------------
		▶ 개발자가 만들어 사용하는 함수. 사용자 정의=개발자가 만든
	------------------------------
	내부 함수
	------------------------------
		▶ 함수 내부에 선언된 또 다른 함수. <주의> 내장함수와 혼동하지 말자.
	------------------------------
	콜백 함수(callback function)
	------------------------------
		▶ 나중에 필요시 호출해서 사용하라고 전달해 주는 함수를 말한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<13> 내장 함수의 종류는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------
	alert("문자열")
	------------------------------
		▶ 확인 버튼이 있는 [경고상자]를 보여준다.
	------------------------------
	confirm("문자열")
	------------------------------
		▶ 확인 버튼과 취소 버튼이 있는 [경고상자]를 보여준다.
		   [확인] 버튼 누르면 true 리턴, [취소] 버튼 누르면 false 리턴
	------------------------------
	prompt("문자열")
	------------------------------
		▶ [문자열입력상자]와 확인 버튼, 취소 버튼이 있는 상자를 보여주고 [확인] 버튼 누르면 입력문자열 리턴
	------------------------------
	parseInt(숫자문자,10)
	------------------------------
		▶ 10진수로 표현된 [숫자문자]를 [정수]로 리턴
		▶ <참고> [숫자문자]가 실수인 경우 소수 첫째자리부터 모두 버림.
	------------------------------
	Number(데이터)
	------------------------------
		▶ 데이터가 [숫자] 또는 [숫자문자] 면 숫자 리턴, 아니면 NaN 리턴.
		▶ <주의> 함수 이름이 대문자이다.
	------------------------------
	isNaN(데이터)
	------------------------------
		▶ 데이터가 [숫자] 또는 [숫자문자] false 리턴, [순수문자]면 true 리턴.
		▶ <참고> NaN => Not A Number
	------------------------------
	setInterval("자바스크립트 코딩",n초x1000) ***
	setInterval(function(){자바스크립트 코딩;},n초x1000) ***
	------------------------------
		▶ n초 마다 자바스크립트 코딩을 반복 실행한다. <주의> 자바스크립트코딩에서 "를 빼면 안된다.
	------------------------------
	setTimeout("자바스크립트 코딩", n초x1000) ***
	setTimeout(function(){자바스크립트 코딩;}, n초x1000) ***
	------------------------------
		▶ n초 후에 자바스크립트 코딩을 실행한다. 시한폭탄과 유사. <주의> 자바스크립트코딩에서 "를 빼면 안된다.
	------------------------------
	typeof(데이터)
	------------------------------
		▶ 데이터의 자료형을 문자열로 리턴.
		▶ <예> typeof(3)		=> "number" 리턴
		▶ <예> typeof("햄버거")	=> "string" 리턴
		▶ <예> typeof(function(){~})	=> "function" 리턴
		▶ <예> typeof(new Date())	=> "object" 리턴
		▶ <예> var xxx; typeof(xxx)	=> "undefined" 리턴
	------------------------------
	eval("문자열")
	------------------------------
		▶ 문자열을 자바스크립트 실행코드로 바꾸어 실행한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<14> 객체(Object) 는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	
	● [메모리] 공간에 존재하는 [단위 프로그램]으로 [메소드=method] 와 [속성변수(=property)]로 구성되어 있다.
		------------------------------
		속성변수(=property)
		------------------------------
			▶ 메소드 안에서 사용할 데이터를 저장하고 있다.
		------------------------------
		메소드(=method)
		------------------------------
			▶ 실행구문이 저장되어 있다.
			▶ 메소드명 호출 시 지정한 실행구문이 실행되며 경우에 따라 호출 후 리턴 값이 있을 수 있다.
			▶ 메소드는 결국 함수와 동일하다. 즉 함수가 객체 안에서는 메소드로 불리운다.
		------------------------------
	● [객체]의 [속성변수]를 호출하여 저장된 데이터를 얻거나 데이터를 저장할 수 있고,
		[메소드] 를 호출함으로써 특정 실행구문을 반복 실행할 수 있다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<15> 자바스크립트에서 사용 가능한 객체 종류는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------
	DOM(=Document Object Model) 객체
	------------------------------
		▶ W3C 라는 단체가 [여러 브라우저 제작사] 들과 협력하여 제작한 객체이다.
		▶ 대부분의 브라우저에서 공용으로 사용가능한 객체이다.
		▶ DOM 객체의 기능	//메소드는 기능, 리턴값, 매개변수로 넘기는 데이터 필수 확인
			HTML [태그]의 각종 정보를 소유하고, [태그]에 대응하는 [컨텐츠]를 [웹브라우저 화면]에 출력한다.
		------------------------------------------------------------
		<참고> W3C => 웹을 위한 표준을 연구/개발하고 장려하는 단체이다.
		------------------------------------------------------------
		▶ DOM 객체에 대한 설명
		------------------------------------------------------------
			xxx.html 파일안에 <input type="text" name="uid"> 라는 태그 있다면
			웹 브라우저 이 태그를 읽어들이면서 다음과 같은 진행을 가진다.
		------------------------------------------------------------
			(1) 웹 브라우저가 <input type="text" name="uid">를 읽어 들인다.
			(2) Text 객체 생성된다. Text 객체의 속성변수에는 name, type, value 등등이 있다.
			    name 속성변수에는 문자 "uid" 가 저장되어있고
			    type 속성변수에는 문자 "text" 가 저장되어있다
			(3) Text 객체에 대응하는 입력양식이 웹 브라우저에 출력된다.
			(4) 웹 브라우저에서 입력양식에 데이터를 입력하면 Text 객체의 value에 입력한 데이터가 저장된다.
			    즉 웹 브라우저의 입력양식과 Text 객체의 value 는 sync 가 된다.
			    만약 자스코딩으로 text 객체에 접근해서 value 속성변수에 데이터를 삽입하면
			    웹 브라우저의 입력양식에도 그대로 보인다.
			------------------------------------------------------------
			text 객체가 DOM 객체 중에 하나이다.

	------------------------------
	BOM 객체
	------------------------------
		▶ 브라우저 제작사 별로 자체 제작한 객체를 말한다.
		------------------------------------------------------------
		▶ 주로 페이지 이동, 모니터 정보 관리, 새 웹 브라우저 화면 띄우기, 방문한 URL 주소 관리,
		   웹 브라우저 종류/버전 관리, 이벤트 관리 등의 기능을 가진다.
		------------------------------------------------------------
		▶ <예> BOM 객체 중에 Location 객체의 replace 라는 메소드를 호출하여 페이지 이동하기
			------------------------------
			location.replace("URL주소")
			------------------------------
				location 변수안에 Location 객체의 메위주가 들어 있다.
				location 변수는 웹 브라우저가 만들어서 제공하는 변수이다.
		------------------------------------------------------------
		▶ <주의> 브라우저 제작사 별로 만든 [객체] 이므로
			  한번 작성된 BOM 객체 메소드나 속성변수 호출 코딩은
			  브라우저 종류별이나 버전별로 동일한 결과를 생성하지 못하거나 오류가 발생하기도 한다.

	------------------------------
	자바스크립트 내장 객체
	------------------------------
		▶ 자바스크립트 차원에서 미리 만들어 저장된 객체를 말한다.
		▶ 각종 데이터를 생산/관리한다.
		------------------------------------------------------------------------------------------
		▶ <예> 지금 이 순간의 년도를 얻어서 thisYear 라는 변수에 저장하고 싶다면
			아래 처럼 DATA 객체를 생성하고 getFullYear 메소드를 호출하면 된다.
		------------------------------------------------------------------------------------------
			var today = new Date(); //날짜를 관리하는 Date 객체 생성하고 객체의 메위주를 today 변수에 저장하기
			var thisYear = today.getFullYear();
		------------------------------------------------------------------------------------------
		▶ <예> 다량의 데이터 저장하고 관리하고 싶다면 아래 처럼 Array 객체를 생성하면 된다.
		------------------------------------------------------------------------------------------
			var students = new Array();
			students.push("한승태");
			students.push("이성우");
			students.push("김영진");

	------------------------------
	자바스크립트 사용자 정의 객체
	------------------------------
		▶ 자바스크립트 문법에 맞추어 개발자가 직접 만들어 저장한 [생성자 함수]로부터 만들어지는 객체를 말한다.
		------------------------------------------------------------
		▶ [생성자 함수]는 일반 함수와는 다르게 객체의 전신으로써 속성변수와 메소드가 선언되어 있다.
		   저자에 따라 [생성자 함수]를 클래스라고 부르기도 한다.
		------------------------------------------------------------
		▶ 자바스크립트 사용자 정의 객체는 주로 웹 관련 솔루션회사에서 만들어 사용한다.

	------------------------------
	JQuery 객체
	------------------------------
		▶ 특정 단체에서 만들어 무료로 제작되어 배포되는 사용자 정의 객체 중의 하나이다.
		------------------------------------------------------------
		▶ 장점
			▶ 대부분의 브라우저에서 동일한 실행결과를 가진다. (=크로스 브라우징 =cross browsing)
			▶ 개발자, 디자이너, 퍼블리셔를 모두 만족하는 강력한 기능을 가지고 있다.
			   즉 짧은 코딩으로 원하는 일을 쉽게 처리한다.
		------------------------------------------------------------
		▶ 단점
			▶ 정해진 코딩 패턴이 없다. 즉 개발자 마다 다양한 코딩을 하게 되므로
			   유지 보수가 힘들다. 그래서 요즘 현업에서는 JQuery 객체 대신에 react를 많이 사용하고 있다.
			   <참고> react 다음에 Vue 가 사용될 것 같다.
			▶ <참고> react 
				  자바스크립트로 화면 UI를 만들 수 있는 독단적인 플랫폼이다.
				  nodeJS를 기반으로 작동된다.
				  퍼즐 맞추듯이 미리 만든 조각들을 모아 화면을 구성하므로 코딩이 재사용성이 좋고
				  일정한 코딩 패턴으로 유지보수성이 좋고
				  웹브라우저 부하를 적게 준다.
		------------------------------------------------------------
		▶ 기능
			▶ 개발자 원하는 강력한 기능을 지원한다.
				▷DOM 객체를 쉽게 컨트롤 할 수 있어 컨텐츠의 추가/수정/삭제가 쉽다.
				▷비동기 방식으로 서버와 통신을 지원한다.
				▷에니메이션 관련 작업을 지원한다.
				▷[이벤트] 설정 및 처리를 지원한다. 등등
		------------------------------------------------------------
		▶ 사용방법
			웹 브라우저에 기본적으로 내장되지 않았으므로 수입해야한다.
			즉 온라인 상에서 무료로 제공되는 [jquery-xxx.js] 파일을 다운로드한 후
			HTML 파일 안에서 아래 처럼 수입해야한다.
			------------------------------
			<script src = "jquery-xxx.js"></script>
			------------------------------
		------------------------------------------------------------
		▶ JQuery 객체를 생성하고 JQuery 객체의 메모리 위치 주소값을 얻는 방법
			------------------------------
			var 변수명 = $("태그를 지칭하는 선택자");
			------------------------------
			변수명,JQuery 객체메소드
			------------------------------
			변수명.JQuery 객체속성변수


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<16> 자바스크립트 내장 객체의 종류와 메소드/속성변수 정의 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------
	Array 객체
	------------------------------
		▶ 같은 유형 또는 다른 유형의 다수 데이터를 [순차적] 으로 저장하여 관리하는 내장객체이다.
		------------------------------------------------------------
		▶ 저장되는 데이터는 [배열변수] 라는 곳에 저장된다.
		------------------------------------------------------------
		▶ Array 객체 생성하고 데이터를 저장하는 방법
		------------------------------------------------------------
			------------------------------
			<방법 1>
			------------------------------
				var (객체참조)변수명 = new Array(데이터1, ~, 데이터 n); //잘 안쓴다.
			------------------------------
			<방법 2>
			------------------------------
				var 변수명 = new Array();
				변수명.push(데이터1);
				~
				변수명.push(데이터n);
			------------------------------
			<방법 3>
			------------------------------
				var 변수명 = new Array();
				변수명[0]=데이터1;
				~
				변수명[n]=데이터n;  
			------------------------------
			<방법 4>
			------------------------------
				var 변수명 = [데이터1, ~, 데이터 n];
			------------------------------
			<방법 5>
			------------------------------
				var 변수명 = [];
				변수명.push(데이터1);
				~
				변수명.push(데이터n);

		▶ Array 객체의 메소드 종류
			------------------------------
			push (데이터)		=> Array 객체 안에 마지막에 배열변수 만들고 그 배열 변수에 데이터 저장하기
			------------------------------
			join ("연결문자")	=> Array 객체가 소유한 모든 저장 데이터를 연결문자로 연결하여 문자열로 리턴
			------------------------------
				var xxx = [1,2,3]; var yyy = xxx.join(" ");
			------------------------------
			reverse ( )		=> 배열변수 안의 데이터의 순서를 거꾸로 뒤집음
			------------------------------
			pop ( )			=> 마지막 배열변수안의 데이터를 리턴하고 마지막 배열변수를 제거함. 오려내기.
			------------------------------
			concat (다른 Array객체) => 현 Array 객체와 다른 Array 객체의 배열변수를 복사해서 새로운 Array 객체 안에
						   저장하고 새로운 Array 객체를 리턴함.
						   2021.07.07_01_Array 객체 생상도.png 그림참조
			------------------------------
			sort ( )		=> 저장된 데이터를 문자열 취급해 오름차순 정렬. 문자가 저장될 경우 사용하는 메소드.
						   ------------------------------------------------------------
						   var kors = [3,20,10]; kors.sort( ); // 정렬순서는 10 20 3 이다.
						   ------------------------------------------------------------
						   var name = ["김소희","성이현","변희원"]; kors.sort();
												// "김소희" "변희원" "성이현"
						   ------------------------------------------------------------
			------------------------------------------------------------------------------------------
			sort ( function(left,right){return left-right;} )
			------------------------------------------------------------------------------------------
						▶ 저장된 숫자 데이터를 오름차순 정렬 
						▶ <예> var kors = [3,20,10]; kors.sort(function(left,right){return left-right;});
										// 정렬순서는 3 10 20 이다.
			------------------------------------------------------------------------------------------
			sort ( function(left,right){return right-left;} )
			------------------------------------------------------------------------------------------
						▶ 저장된 숫자 데이터를 내림차순 정렬
						▶ <예> var kors = [3,20,10]; kors.sort(function(left,right){return left-right;});
										// 정렬순서는 20 10 3 이다.
			------------------------------
			slice ( 시작인덱스번호, 끝인덱스번호 )
			------------------------------
				▶ [시작인덱스번호] 부터 [끝인덱스번호 이전]까지 [복사]해서 [새로운 Array 객체]로 리턴
			------------------------------
			splice ( 시작인덱스번호, 개수 )
			------------------------------
				▶ [시작 인덱스번호] 부터 [개수] 만큼 오려내서 [새로운 Array 객체]로 리턴.

		▶ Array 객체의 속성변수
			------------------------------------------------------------------------------------------
			length		=> 배열변수의 개수 저장되어 있음
			------------------------------------------------------------------------------------------
			
	------------------------------
	Date 객체
	------------------------------
		▶ 년, 월, 일, 요일, 시, 분, 초 를 관리하는 객체이다.
		------------------------------------------------------------
		▶ 객체 생성, 메소드 호출, 속성변수 호출 방법
		------------------------------------------------------------
			------------------------------------------------------------
			객체 생성 => var 변수명 = new Date(년, 월-1, 일, 시, 분, 초);
			------------------------------------------------------------
			메소드 호출 => 객참변수.메소드(~)
			------------------------------------------------------------
			<주의> 년, 월-1, 일, 시, 분, 초 를 세팅하지 않으면 현재 시스템 날짜가 세팅된다.
			<주의> 년, 월-1, 일 만 세팅하면 시, 분, 초 는 0, 0, 0이 세팅된다. 
			<주의> Date 객체는 월을 0 ~ 11 까지의 숫자로 관리하므로 항상 세팅시 월은 -1 한다.
		------------------------------------------------------------
		▶ Date 객체의 메소드
		------------------------------------------------------------
			getFullYear( )	=> Date 객체에 세팅된 연도를 리턴.
			getMonth( )	=> Date 객체에 세팅된 월(0~11)를 리턴.
			getDate( )	=> Date 객체에 세팅된 일(1~31)을 리턴.
			getDay( )	=> Date 객체에 세팅된 요일(0(일) ~ 6(토))를 리턴.
			getHours( )	=> Date 객체에 세팅된 시간(0~23)을 리턴.
			getMinutes( )	=> Date 객체에 세팅된 분(0~59)을 리턴.
			getSeconds( )	=> Date 객체에 세팅된 초(0~59)를 리턴.
			getTime( )      => [1970년1월1일] ~ [Date 객체의 기억날짜] 까지의 차이를 초*1000 으로 리턴.
					   주 용도는 두 날짜의 차이를 구할 때 사용하는 메소드이다.
					   ------------------------------------------------------------
					   1999.1.11 부터 2021.7.7일 까지의 차이를 초로 구하면?
					   ------------------------------------------------------------
					   var date1 = new Date(1999,0,11);
					   var date2 = new Date(2021,6,7);
					   var interval = (date2.getTime() - date1.getTime())/1000;
			------------------------------------------------------------
			setFullYear(년도) => Date 객체에 연도를 세팅한다
			setMonth(월-1 )   => Date 객체에 월을 세팅한다
			setDate(일 )      => Date 객체에 일을 세팅한다
			setHours(시 )     => Date 객체에 시를 세팅한다
			setMinutes(분 )   => Date 객체에 분을 세팅한다
			setSeconds(초 )   => Date 객체에 초를 세팅한다
		------------------------------------------------------------
		▶ Date 객체의 예제
		------------------------------------------------------------
			------------------------------------------------------------
			현재 지금 날짜의 년월일을 구해 변수 year, month, date 에 저장하기
			------------------------------------------------------------
				var today = new Date();
				var year = today.getFullYear();
				var month = today.getMonth()+1;
				var date = today.getDate();
			------------------------------------------------------------
			현재 지금 날짜에서 올해 크리스마스 날까지 며칠 남았는지 구해서 변수 interval 저장하기
			------------------------------------------------------------
				var today = new Date();
				var christmas_day = new Date(today.getFullyear(),11,25);
				var interval = (christmas_day.getTime()-today.getTime())/(60*60*24*1000);
			------------------------------------------------------------
			2031년 2월 달의 마지막 일을 구해 변수 xxx에 저장하기
			------------------------------------------------------------
				var xxx_day = new Date(2031, 2, 0);
				var xxx = xxx_day.getDate();
			------------------------------------------------------------
			오세황씨가 오늘 이상형을 만났다. 그래서 사귀기로했다. 1000일 후 기념일을 챙기고 싶었다.
			오늘부터 1000일 후의 년월일을 구해 변수 year, month, date에 저장하기
			------------------------------------------------------------
				var xxx_day = new Date();
				xxx_day.setDate(xxx_day.getDate() + 1000);
				var year = xxx_day.getFullYear();
				var month = xxx_day.getMonth()+1;
				var date = xxx_day.getDate();
			------------------------------------------------------------
			현재 지금 날짜에서 요일을 얻어서 변수 week 저장하기. 단 요일은 한글로 저장하기
			------------------------------------------------------------
				var today = new Date();
				var week = today.getDay();
				if( week==0 ) { 
					week = "일요일";
				}
				else if( week==1 ) { 
					week = "월요일";
				}
				else if( week==2 ) { 
					week = "화요일";
				}
				else if( week==3 ) { 
					week = "수요일";
				}
				else if( week==4 ) { 
					week = "목요일";
				}
				else if( week==5 ) { 
					week = "금요일";
				}
				else if( week==6 ) { 
					week = "토요일";
				}
			------------------------------------------------------------

			------------------------------------------------------------
				String uname = "성이현";
				if (uname=="성이현") {
					system.out.print( "증말 예뻐요....");
				} // 출력
			------------------------------------------------------------
				String uname = new String("성이현");
				if (uname=="성이현") {
					System.out.print( "증말 예뻐요....");
				} // 출력안됨	== 말고 equals로 해야함
			------------------------------------------------------------
				var uname = "성이현";
				if (uname=="성이현") {
					alert( "증말 예뻐요....");
				}

	------------------------------
	String 객체
	------------------------------
		------------------------------------------------------------
		▶ [문자열]을 관리하는 객체이다.
		------------------------------------------------------------
		▶ String 객체 생성, 메소드/속성변수 호출방법
		------------------------------------------------------------
			▶ String 객체 생성			=> var 변수명 = "문자열"; 또는 var 변수명 = new String("문자열");
			▶ String 객체 메소드/속성변수 호출	=> 변수명, 메소드(~) 변수명.속성변수
		------------------------------------------------------------
		▶ String 객체의 메소드
		------------------------------------------------------------
			------------------------------
			▶ charAt( 인덱스번호 )
			------------------------------
				-> 인덱스 번호에 위치하는 문자 한개를 복사해서 리턴. 인덱스번호는 0부터 시작한다.
				-> var uname="성이현"; var firstName = uname.charAt(0);
			------------------------------
			▶concat( "새로운문자열" )
			------------------------------
				-> String 객체가 소유한 문자열 복사해 [더할문자열]을 연결하여 문자열로 리턴.
			------------------------------
			▶ indexOf ("찾는문자", 검색시작인덱스번호)
			------------------------------
				-> String 객체가 소유한 문자열에서 "찾는문자"가 위치한 곳의 인덱스 번호를 리턴.
				   단 검색 시작점은 검색시작인덱스번호 부터 검색한다.
				   만약 리턴값이 -1 이면 찾는 문자가 없다라는 뜻이다.
				----------------------------------------
				var uname="박세리"; 에서 uname 저장된 이름에 성이 박 이면 xxx 변수에 "박씨가문" 저장하기
				----------------------------------------
				var uname="박세리";
				if( uname.indexOf("박")==0 ){
					var xxx = "박씨가문";
				}
				----------------------------------------
				var fruit = "수박 참외 파인애플 복숭아"; 에서 fruit 저장된 복숭아 가 있으면 xxx 변수에 "있음" 저장하기
				----------------------------------------
				var fruit = "수박 참외 파인애플 복숭아";
				if( fruit.indexOf("복숭아")>=0 ){
					var xxx = "있음";
				}
			------------------------------
			▶ lastIndexOf("찾는문자",검색시작인덱스번호)
			------------------------------
				-> String 객체가 소유한 문자열에서 "찾는문자"가 위치한 곳의 인덱스 번호를 리턴.
				   단 검색 시작점은 검색시작인덱스번호 부터 검색한다.
				   단 검색 방향은 오른쪽에서 왼쪽으로 검색한다. 즉 뒤에서 부터 검색한다.
			------------------------------
			▶ replace("찾는문자","대체문자") *****
			------------------------------
				-> String 객체가 소유한 문자열 복사해 [찾는문자]를 [대체문자]로 대체하여 리턴.
				   단 처음 나오는 것만 바꿈.
			------------------------------
			▶ substr(인덱스번호, 개수) *****
			------------------------------
				-> 인덱스번호부터 지정개수만큼 문자열을 복사해 리턴.
			------------------------------
			▶ substring( 시작인덱스번호,   끝인덱스번호 ) *****
			------------------------------	
				->시작인덱스번호 붙어 끝인덱스번호 이전 까지 문자열을 복사해 리턴.
			------------------------------	
			▶ split("분리문자") ***
			------------------------------
				-> String 객체가 소유한 문자열 복사해 분리문자로 문자열을 분리해서 
				   Array 객체에 저장하여 Array 객체를 리턴.
			------------------------------
			▶ toLowerCase()
			------------------------------
				-> String 객체가 소유한 문자열 복사해 소문자로 바꾸어 리턴.
			------------------------------
			▶ toUpperCase()
			------------------------------
				-> String 객체가 소유한 문자열 복사해 대문자로 바꾸어 리턴.
			------------------------------
			▶ trim() *****
			------------------------------
				-> String 객체가 소유한 문자열 복사해 문자열의 앞뒤 [공백]을 제거한 문자열을 리턴.
				-> <주의>Explorer 는 Explorer9 부터 지원함.
			------------------------------
			▶ match("찾는문자")
			------------------------------
				-> String 객체가 소유한 문자열 내에 [찾는문자]가 있으면 [찾는문자]를 복사해서 리턴. 없으면 null 리턴.
			------------------------------
			▶ length()

			------------------------------
				-> String 객체가 소유한 문자열의 길이를 리턴.

			------------------------------------------------------------
			<문> 임의의 아이디 "abc123" 가 있다.
			     첫 글자가 영문이어야 하고, 숫자와 영문소문자로 구성되어야 하고
			     길이가 5개 이상이면 "적합" 이라는 문자를 xxxx 변수 저장하기.
			     위 조건을 만족하지 못하면 "부적합 이라는 문자를 xxxx변수 저장하기.
			------------------------------------------------------------
				var uid = "abc123";
				var alphabet = "abcdefghijklmnopqrstuvwxyz"
				var num = "0123456789";
				var cnt = 0;
				var result = "적합";
				// 아이디 첫 글자가 영문 소문자가 아니면 cnt 변수 1 업그레이드하기
				if(alphabet.indexOf(uid.charAt(0))<0) {
					cnt++;
				}
				//아이디 길이가 5 미만이면 cnt 변수 1 업그레이드 하기
				if(uid.length()<5) {
					cnt++;
				}
				// 아이디가 숫자와 영문 소문자로 구성되어 있지 않으면 cnt 변수 1 업그레이드 하기
				for(var i=0 ; i<uid.length ; i++) {
					var str = uid.charAt(i);
					if(alphabet.indexOf(str)<0 && num.indexOf(str)<0) {
						cnt++;
					}
				}
				// 아이디가 조건에 안맞으면 xxx변수에 "부적합" 저장하기
				if(cnt>0){
					xxx = "부적합";
				}

	------------------------------
	Math 객체
	------------------------------
		▶ 수학적 계산을 하는데 도움이 되는 메소드를 제공하는 객체이다.
		▶ 객체 생성, 메소드 호출, 속성변수 호출방법
			------------------------------
			객체 생성	=> 객체 생성 코드 없음
			------------------------------
			메소드 호출	=> Math.메소드(~)
			------------------------------
			
		------------------------------------------------------------
		▶ Math 객체의 메소드
		------------------------------------------------------------
			ceil(v)			=> v 값의 소수 첫째 자리를 올림해서 정수로 리턴
			floor(v)		=> v 값의 소수 첫째 자리를 버림해서 정수로 리턴
			round(v)		=> v 값의 소수 첫째 자리를 반올림해서 정수로 리턴
			max(숫자1,~,숫자n)	=> 숫자 1 부터 숫자 n 까지 중 최대값을 리턴
			min(숫자1,~,숫자n)	=> 숫자 1 부터 숫자 n 까지 중 최소값을 리턴
			random()		=> 0 이상 1 미만의 무작위 실수를 리턴
			abs(x)			=> x 값의 절대값을 리턴. 양의 수로 바꿔라.
			pow(x,y)		=> x의 y승을 리턴. pow(3,2)
			log(x)			=> 로그 함수를 계산해서 리턴
			sin(x)			=> sin 값을 리턴
			cos(x)			=> cos 값을 리턴
			tan(x)			=> tan 값을 리턴
		
		------------------------------------------------------------
		▶ Math 객체의 속성변수
		------------------------------------------------------------
			PI	=> 원주율을 리턴
			E	=> 오일러 상수값을 리턴

	------------------------------
	RegExp 객체
	------------------------------	
		▶ 문자열의 패턴을 관리하는 객체이다. <참고> RegExp는 Regular Expression(정규 표현식)의 약어이다.
		▶ 객체 생성 방법
			------------------------------
			var 변수명 = new RegExp(패턴식);
			------------------------------
			var 변수명 = 패턴식;
			------------------------------
				▶ <주의> 자스에서는 패턴식에 " 또는 ' 로 감싸지 않는다. 자바랑 반대

		▶ 메소드 호출, 속성변수 호출 방법
			------------------------------
			객참변수.속성변수
			------------------------------
			객참변수.메소드(~)
			------------------------------
		▶ RegExp 객체의 메소드
			------------------------------
			test("문자열") => 문자열이 패턴식을 만족하면 true 리턴, 아니면 false 리턴
			------------------------------

		▶ 예
			------------------------------
			// 변수 uid에 아이디 "abc123" 저장
			var uid = "abc123";
			------------------------------
			// RegExp 객체 생성해서 변수 regExp에 저장하기
			// RegExp 객체가 관리하는 패턴식은 아래와 같다.
			// 첫글자는 영어소문자, 두번째 부터는 영소문 또는 숫자 또는 _로 하고
			// 4자에서 9자 사이로 반복하기. 그리고 이런 패턴으로 끝나기
			------------------------------
			var regExp = new RepExp( /^[a-z][a-z0-9_]{4,9}$/);
			------------------------------
			// RegExp 객체의 test 메소드를 호출하여
			// uid 변수 안의 데이터가 패턴식을 만족하면 true 아니면 false를 리턴하여
			// flag 변수에 저장하기
			------------------------------
			var flag = regExp.test(uid);
			------------------------------
		▶ 패턴식 예
			------------------------------
			핸드폰 번호 패턴식 => /^(010|011|016|017|018|019)-[0-9]{3,4}-[0-9]{4}$/
			------------------------------
			한글 이름 2~20자 => /^[가-힣]{2,20}$/
			------------------------------
			"abc" 문자의 존재 => /abc/
			------------------------------
			공백 존재 => /[ ]+/
			------------------------------
			e-mail 형식 => /^([0-9a-zA-Z_-]+)@([0-9a-zA-Z_-]+)(\.[0-9a-zA-Z_-]+){1,2}$/
			------------------------------
			공백 존재 => /[ ]+/
			------------------------------
			임의 문자 3개로 만 구성 => /^...$/
			------------------------------
			abc로 시작하고 xyz로 끝남 => /^(abc).*(xyz)$/
			------------------------------
			-를 포함 또는 생략한 핸드폰번호 => /^01([0|1|6|7|8|9])-?[0-9]{3,4}-?[0-9]{4}$/
		
		▶ 패턴식 키워드
			------------------------------
			^		=> ^ 의 오른쪽 문자가 시작임을 의미
			------------------------------
			$		=> $ 의 왼쪽 문자가 마지막임을 의미
			------------------------------
			[문자열]	=> 문자열 중에 문자 하나
			------------------------------
			[^문자열]	=> 문자열이 모두 아닌 문자 하나. [^abc] a도 아니고 b도 아니고 c도 아닌 문자하나
			------------------------------
			\w		=> [a-zA-Z0-9_] 와 동일. 영소문자 또는 영대문자 또는 숫자 또는 언더바 중에 하나
			------------------------------
			\d		=> [0-9] 와 동일. 숫자 하나
			------------------------------
			\s		=> [ ] 와 동일 공백 하나
			------------------------------

			------------------------------
			\W		=> \w 가 아닌 것. 공백이 아닌 문자 하나. [^a-zA-Z0-9_] 와 동일.
			------------------------------
			\D		=> \d 가 아닌 것. 숫자가 아닌 문자 하나.
			------------------------------
			\S		=> \s 가 아닌 것. 공백이 아닌 문자 하나.
			------------------------------

			\/		=> / 문자 의미
			------------------------------
			.		=> 임의 문자 하나.
			------------------------------
			[.]		=> 점(.) 문자 의미
			------------------------------
			{n}		=> 왼쪽 데이터가 n개만 나옴. [a-z]{3} -> 영 소문자 3개
			------------------------------
			{n,}		=> 왼쪽 데이터가 n 개 이상 나옴
			------------------------------
			{n,m}		=> 왼쪽 데이터가 n ~ m 개 나옴
			------------------------------
			*		=> 왼쪽 데이터가 0개 이상 나옴 [a-z]* -> 영 소문자 0개 이상
			------------------------------
			+		=> 왼쪽 데이터가 1개 이상 나옴 [a-z]+ -> 영 소문자 1개 이상
			------------------------------
			?		=> 왼쪽 데이터가 0~1개 나옴 [a-z]? -> 영 소문자 0~1개 사이
			------------------------------
			|		=> | 죄우 문자열 중 하나 리턴
			------------------------------
			
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<17> 예외 (=exception) 이란 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	● 자스에서 [예외] 란 웹 브라우저가 [감지] 할 수 있는 오류를 말한다.
	
	● 예외가 발생하면 예외를 관리하는 객체가 생성된다.
	   예외를 관리하는 객체의 메소드나 속성변수를 호출하면 예외의 정보를 알 수 있다.

	● <주의> 감지할 수 없는 예외는 예외가 아니다. <예> 전원 꺼짐

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<18> 예외가 발생하면 대부분 프로그램이 중단되는데 중단 시키지 않고 프로그램을 진행할 수는 없는가 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	예외가 발생할 경우 try{}catch(e){~}finally{} 구문을 
	사용하여 프로그램의 갑작스런 중단을 막고 
	원하는 방향으로 프로그램을 진행할 수 있다.
	이런 처리를 [예외처리 (=Exception Handling)] 라고 한다.

	---------------------------------
	try~catch~finally 구문
	---------------------------------
		try{
			예외 발생할 가능성이 있는 코드
		}
		catch(e){
			예외가 발생했을 때 실행할 코드		
		}
		finally{
			예외가 발생하든 안하든 무조건 실행할 코드		
		}
		---------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<19> 예외 처리하면 개발자는 무슨 이득이 있을까 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	프로그램의 갑작스런 중단을 막고 
	원하는 방향으로 프로그램을 진행할 수 있다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<20> BOM(=Browser Object Model) 객체의 종류와 메소드/속성변수 정의 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	● 브라우저 제작사 별로 자체 제작된 객체를 말한다.
	---------------------------------
	● 객체 생성, 속성/메소드 호출 형식
	---------------------------------
		객체 생성 코드		=> 없음. 이미 객체는 생성되어 있고
		메소드 호출 코드	=> 미리제공되는 변수.메소드명(~)
		속성변수 호출 코드	=> 미리제공되는 변수.속성변수
		---------------------------------
		<예> location.replace("xxx.html")
	
	---------------------------------
	● Window 객체
	---------------------------------
		현재 웹화면을 관리하는 객체이다.
		메소드 호출 코드	=> window.메소드(~)
		속성변수 호출 코드	=> window.속성변수
		---------------------------------
		▶ Window 객체 메소드
		---------------------------------
			open("url주소","창이름","창옵션")
				▶ 새로운 웹화면을 생성하고 이 웹화면을 관리하는 window 객체를 리턴
				▶ <참고>보안 문제로 사용빈도가 줄어들고 있다.
			close( )
				▶ 웹화면을 닫음
			focus( )
				▶ 웹화면에 초점을 맞춤
			blur( )
				▶ 웹화면에서 초점을 제거
			moveTo( x좌표, y좌표)
				▶ 웹 화면을 지정한 절대적 위치로 이동.
				   x좌표는 웹 화면 왼쪽에서 떨어진 거리.
				   y좌표는 웹 화면 위쪽에서 떨어진 거리
			resizeTo(너비,높이)
				▶ 웹화면을 지정한 절대적 크기로 변경
			기타등등
		---------------------------------
		▶ Window 객체 메소드
		---------------------------------
			innerHeight
				▶ 실제로 문서가 출력될 부분의 높이를 저장.
			innerWidth
				▶ 실제로 문서가 출력될 부분이 넓이를 저장.
			status
				▶ 화면의 상태 지시자에 표시될 내용을 지정.
			defaultStatus
				▶ status 속성으로 지정되지 않은 상태에서
				   화면의 상태 지시자에 표시될 내용을 지정
			onload
				▶ body 태그 안의 내용물을 다 읽어들인 후
				   실행할 익명함수를 저장한다.
				---------------------------------
				<예> window.onload = function(){alert("어쩌구 저쩌구");}
				---------------------------------
					웹 브라우저가 body 태그 안의 내용물을 다 읽어들인 후
					alert("어쩌구 저쩌구"); 를 실행한다.

	---------------------------------
	● Location 객체
	---------------------------------
		------------------------------------------------------------------
		현재 열려진 웹 화면의 [URL주소] 와 그에 관련된 각종 정보를 관리한다.
		------------------------------------------------------------------
		메소드 호출 코드	=> location.메소드(~)
		속성변수 호출 코드	=> location.속성변수
		---------------------------------
		▶ Location 객체 속성변수
		---------------------------------
			port		=> 웹 브라우저가 사용하는 port 번호가 저장되어 있다.
			protocol	=> 웹 브라우저가 사용하는 protocol이 저장되어 있다.
						<참고> protocol(프로토콜) => 통신규약. 통신방법
							인터넷 할 때 사용하는 프로토콜이 HTTP 프로토콜이다
			href		=> 웹페이지의 URL 주소를 알려주거나 지정한  URL 주소의 페이지를 열어준다.
					-----------------------------------
					location.replace("xxx.html");    => 현재 화면에 xxx.html 를 열어라
					-----------------------------------
					location.href = "xxx.html";     => 현재 화면에 xxx.html 를 열어라
					-----------------------------------
					var url = location.href;        => 현재 웹화면의 URL 주소의 문자열을 얻어서 변수 url 에 저장하라
					-----------------------------------
			hostname	=> URL 주소의 호스트 이름이나 IP 주소를 알려준다.
			host		=> URL 주소의 호스트 이름과 포트를 알려준다.
		---------------------------------
		▶ Location 객체 메소드
		---------------------------------
			replace( "url주소" )	=> url 주소로 페이지를 이동
			reload( )		=> 현재 웹 화면에 있는 페이지를 다시 읽어 들인다.

	---------------------------------
	● History 객체
	---------------------------------
		------------------------------------------------------------------
		웹 브라우저의 히스토리 리스트(방문한 적이 있는 URL 주소)를 관리한다.
		------------------------------------------------------------------
		메소드 호출 코드	=> history.메소드(~)
		속성변수 호출 코드	=> history.속성변수
		---------------------------------
		▶ History 객체 메소드
		---------------------------------
			go( 이동개수 )	=> 히스토리 리스트가 기억하고 있는 주소로 이동.
					   양의 정수일 경우 앞으로 이동.
					   음의 정수일 경우 뒤로 이동.
					   주로 go(-1)을 제일 많이 사용한다. 즉 이전 화면으로 이동.
			foward()	=> 현재 페이지를 그 다음 페이지로 이동. go(1)과 동일.
			back()		=> 현재 페이지를 이전 페이지로 이동. go(-1)와 동일.
		---------------------------------
		▶ History 객체 속성변수
		---------------------------------
			length		=> 히스토리 리스트에 포함된 URL 주소의 개수.
	
	---------------------------------
	● Event 객체
	---------------------------------
		------------------------------------------------------------------
		웹 화면에서 발생하는 모든 움직임(≒이벤트)을 관리하는 객체이다.
		Event 객체의 속성변수 안에는 각종 이벤트 관련 정보가 저장되어 있다.
		------------------------------------------------------------------
		메소드 호출 코드    => event.메소드(~)
		속성변수 호출 코드  => event.속성변수
		
		---------------------------------
		▶ Event 객체의 속성변수
		---------------------------------
			button		=> 클릭한 마우스 버튼의 고유 번호가 저장됨.
					   (1번-왼쪽버튼, 2번-오른쪽버튼, 3번-가운데버튼)
			keyCode	**	=> 누른 키보드의 고유 번호가 저장됨.
					   <예> 엔터키 치면 keyCode 에 13이 저장된다.
			clientX	*	=> 웹 브라우저 화면의 X좌표가 저장됨. 단 스크롤은 무시. 좌측 상단 맨위를 0,0으로 봄
			clientY	*	=> 웹 브라우저 화면의 Y좌표가 저장됨. 단 스크롤은 무시. 좌측 상단 맨위를 0,0으로 봄
			screenX		=> 각자 모니터 화면 전체을 기준으로 이벤트가 발생할 X 좌표가 저장됨
			screenY		=> 각자 모니터 화면 전체을 기준으로 이벤트가 발생할 Y 좌표가 저장됨
			altKey		=> ALT 키의 누름 상태 여부가 true, false 값으로 저장됨
			ctrlKey		=> CTRL 키의 누름 상태 여부가 true, false 값으로 저장됨
			shiftkey	=> SHIFT 키의 누름 상태 여부가 true, false 값으로 저장됨
			type		=> 이벤트의 종류가 저장됨

	---------------------------------
	● Screen 객체
	---------------------------------
		------------------------------------------------------------------
		현재 모니터의 해상도, 색상, 화면의 크기 등에 관한 정보를 제공한다.
		------------------------------------------------------------------
		속성변수 호출 코드 => screen.속성변수

		---------------------------------
		▶ Screen 객체의 속성변수
		---------------------------------
			------------------------------------------------------------------
			height		=> 모니터 전체의 높이를 픽셀 단위로 알려줌
			width		=> 모니터 전체의 너비를 픽셀 단위로 알려줌
			------------------------------------------------------------------
			availHeight	=> 웹페이지가 나타날 실제 화면의 높이를 알려줌
			availWidth	=> 웹페이지가 나타날 실제 화면의 너비를 알려줌
			pixelDepth	=> 한 픽셀당 비트수를 알려줌 (explorer 에선 안됨)
			colorDepth	=> 사용 가능한 색상수를 알려 준다.

	---------------------------------
	● Navigator 객체
	---------------------------------
		------------------------------------------------------------------
		웹 페이지를 실행하고 있는 [브라우저에 대한 각종 정보]*** 를 알려준다.
		------------------------------------------------------------------
		속성변수 호출 코드 => navigator.속성변수
		
		---------------------------------
		▶ Navigator 객체의 속성변수
		---------------------------------
			appCodeName*	=> 웹브라우저의 코드명 저장
			appName*	=> 웹브라우저의 이름 저장
			appVersion*	=> 웹브라우저의 버전 저장
			platform	=> 웹사용중인 운영체제의 시스템 환경 정보 저장
			userAgent	=> 웹브라우저의 전체적인 정보 저장

	---------------------------------
	● Document 객체
	---------------------------------
		------------------------------------------------------------------
		HTML 문서의 정보(제목, 변경날짜, 시간 등)을 관리한다.
		------------------------------------------------------------------
		메소드 호출 코드    => Document.메소드(~)
		속성변수 호출 코드  => Document.속성변수
		---------------------------------
		Document 객체의 속성변수
		---------------------------------
			title		=> title 태그가 안고 있는 문자를 저장하고 있다.
			location	=> 현재 페이지의 URL 주소를 문자열 형태로 저장하고 있다.
			lastModified	=> 문서의 마지막 수정 날짜를 저장하고 있다.
		---------------------------------
		Document 객체의 메소드
		---------------------------------
			write("HTML소스") => html 소스를 리턴한다.
			
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<21> DOM(=Document Object Model) 객체의 종류와 메소드/속성변수 정의 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	● W3C 라는 단체가 여러 웹 브라우저 제작사 들과 협력하여 제작된 객체이다.
	------------------------------------------------------------------
	● DOM 객체는 주로 HTML 에서 [태그]를 관리하는 객체이다.
	------------------------------------------------------------------
	● [웹 브라우저] 가 HTML 파일 안의 태그들을 읽어 [객체] 를 생성하고,
	   이 [객체] 에 대응하는 [컨텐츠] 를 [웹 브라우저 화면] 으로 출력한다.
	------------------------------------------------------------------
	● 개발자 관점에서는 DB와 연동되는 입력양식 관련 태그들이 중요하므로
	   입력양식 관련 태그들의 DOM 객체를 중점적으로 다룬다.
	------------------------------------------------------------------
	
	---------------------------------
	● Document 객체
	---------------------------------
		---------------------------------
		[Form 태그] 관리하는 객체이다.
		---------------------------------
		입력양식 관련 태그들의 DOM 객체를 중점적으로 다룬다.
		---------------------------------
	---------------------------------
	● Form 객체
	---------------------------------
		------------------------------------------------------------------
		[Form 태그] 관리하는 객체이다.
		------------------------------------------------------------------
		객체 생성 코딩 => 없음. 미리 객체가 생성되어 제공된다.
		------------------------------------------------------------------
		메소드 호출 코딩 => document.form태그 name값. 메소드(~)
		------------------------------------------------------------------
		속성변수 호출 코딩 => document.form태그 name값. 속성변수
		------------------------------------------------------------------
		---------------------------------
		Form 객체 속성변수 
		---------------------------------
			action	=> form 태그 안의 입력양식에 입력(선택)된 데이터를 보낼 [웹 서버 쪽 URL 주소]를 저장한다.
			method	=> 웹 서버로 데이터를 보내는 방법
					▷ get  => 입력(선택) 데이터가 URL 뒤에 붙어 전송.
					▷ post => 입력(선택) 데이터가 안보이게 전송
			enctype	=> 웹 파일을 서버로 전송할 경우에
				   enctype 속성변수 안에 enctype = "multipart/form-data"가 저장되어 있으면 된다.
			target	=> 웹 서버에서 접속한 후 웹 서버가 전송해주는 응답을 받을 창이 어디인지 알려줌
		---------------------------------
		Form 객체 메소드 
		---------------------------------
			submit( ) => form 태그 안의 입력 양식에 입력(선택)된 모든 내용을 웹 서버에 보낸다.
				     서버쪽 URL 주소는 action 속성변수 안의 값을 사용한다.
			reset( )  => form 태그 안의 입력 양식에 입력(선택)된 모든 내용을 초기값으로 변경한다.
				     즉 데이터 비우거나 체크를 풀어버린다.

	---------------------------------
	● Text 객체
	---------------------------------
		------------------------------------------------------------------
		<input type = "text" name="xxx" ~> 태그를 관리하는 객체이다.
		위 태그가 실행되어 웹 브라우저에 출력될 때 [문자입력상자] 라고 부른다.
		------------------------------------------------------------------
		속성변수 호출 => document.form태그name값.xxx.속성변수
		------------------------------------------------------------------
		메소드 호출 => document.form태그name값.xxx.메소드(~)
		------------------------------------------------------------------

		---------------------------------
		Form 객체 속성변수 
		---------------------------------
			value        => [문자입력상자]에 입력된 데이터가 저장되어 있다.
			defaultValue => [문자입력상자]가 처음 나타날 때 표시된 내용을 설정한다.
					<주의>value 속성값이 변경되더라도 defaultValue 속성값은 영향을 받지 않는다.

		---------------------------------
		Form 객체 메소드 
		---------------------------------
			focus( )     => [문자입력상자] 안에 커서를 들여 놓는다
			blur( )      => [문자입력상자] 안에 커서를 뺀다.
			select( )    => [문자입력상자] 안을 드래그 하여 입력 내용을 선택하도록 한다.

	---------------------------------
	● Password 객체
	---------------------------------
		------------------------------------------------------------------
		<input type = "password" name="xxx" ~> 태그를 관리하는 객체이다.
		위 태그가 실행되어 웹 브라우저에 출력될 때 [암호문자입력상자] 라고 부른다.
		------------------------------------------------------------------
		속성변수 호출 => document.form태그name값.xxx.속성변수
		------------------------------------------------------------------
		메소드 호출 => document.form태그name값.xxx.메소드(~)
		------------------------------------------------------------------
		
		---------------------------------
		Password 객체 속성변수 
		---------------------------------
			Text 객체의 속성변수와 동일.
		
		---------------------------------
		Password 객체 메소드 
		---------------------------------
			Text 객체의 메소드와 동일.

	---------------------------------
	● Textarea 객체
	---------------------------------
		------------------------------------------------------------------
		<textarea name="xxx" ~> ~ </textarea> 태그를 관리하는 객체이다.
		위 태그가 실행되어 웹 브라우저에 출력될 때 [다중문자입력상자] 라고 부른다.
		------------------------------------------------------------------
		속성변수 호출 => document.form태그name값.xxx.속성변수
		------------------------------------------------------------------
		메소드 호출 => document.form태그name값.xxx.메소드(~)
		------------------------------------------------------------------
		
		---------------------------------
		Textarea 객체 속성변수 
		---------------------------------
			Text 객체의 속성변수와 동일.
		
		---------------------------------
		Textarea 객체 메소드 
		---------------------------------
			Text 객체의 메소드와 동일.

	---------------------------------
	● Hidden 객체
	---------------------------------
		------------------------------------------------------------------
		<input type="hidden" name="xxx" ~> 태그를 관리하는 객체이다.
		위 태그가 실행되어 웹브라우저에 출력되지는 않는다. 그냥 별칭을 [숨겨진입력상자]라고 부른다.
		주로 자바스크립트에서 제작된 데이터를 담거나 DB 검색물 출력 시 PK값을 저장할 경우 사용된다.
		<주의> 보이지 않으므로 사용자가 키보드로 입력할 수 없는 입력 양식이다.
		------------------------------------------------------------------
		속성변수 호출 =>  document.form태그name값.xxx.속성변수
		------------------------------------------------------------------
		메소드 호출   =>  document.form태그name값.xxx.메소드(~)
		------------------------------------------------------------------
		
		---------------------------------
		Hidden 객체 속성변수
		---------------------------------
			Text 객체의 속성변수와 동일.
		
		---------------------------------
		Hidden 객체 메소드 
		---------------------------------
			Text 객체의 메소드와 동일.

	---------------------------------
	● FileUpload 객체
	---------------------------------
		------------------------------------------------------------------
		<input type="File" name="xxx" ~> 태그를 관리하는 객체이다.
		위 태그가 실행되어 웹브라우저에 출력될 때 [파일입력상자]라고 부른다.
		------------------------------------------------------------------
		속성변수 호출 =>  document.form태그name값.xxx.속성변수
		------------------------------------------------------------------
		메소드 호출   =>  document.form태그name값.xxx.메소드(~)
		------------------------------------------------------------------
		
		---------------------------------
		FileUpload 객체 속성변수
		---------------------------------
			Text 객체의 속성변수와 동일.
			<주의> value 라는 속성변수에는 선택한 파일의 이름이 저장된다.
		---------------------------------
		FileUpload 객체 메소드 
		---------------------------------
			Text 객체의 메소드와 동일.

	---------------------------------
	● Radio 객체
	---------------------------------
		------------------------------------------------------------------
		<input type="Radio" name="xxx" ~> 태그를 관리하는 객체이다.
		위 태그가 실행되어 웹브라우저에 출력될 때 [라디오 버튼]라고 부른다.
		------------------------------------------------------------------
		name 값이 같은 라디오 버튼의 개수가 2개 이상일 경우 속성변수 호출
		=> document.form태그name값.xxx[i].속성변수
		------------------------------------------------------------------
		name 값이 같은 라디오 버튼의 개수가 2개 이상일 경우 메소드 호출
		=> document.form태그name값.xxx[i].메소드(~)
		------------------------------------------------------------------
		name 값이 같은 라디오 버튼의 개수가 1개일 경우 속성변수 호출
		=> document.form태그name값.xxx.속성변수
		------------------------------------------------------------------
		name 값이 같은 라디오 버튼의 개수가 1개일 경우 메소드 호출
		=> document.form태그name값.xxx.메소드(~)
		------------------------------------------------------------------

		---------------------------------
		Radio 객체 속성변수
		---------------------------------
			------------------------------------------------------------------
			value	=> 체크된 라디오 버튼 태그의 value 속성값이 저장되어 있다
			checked	=> 체크 여부 정보가 저장되어 있다. 체크가 되어 있으면 true가 저장되고 체크가 안되어 있으면 false가 저장된다.
				   <주의> 체크가 된 놈의 value 값이 서버로 전송된다.
					  체크가 안된 놈의 value 값은 서버로 전송되지 않는다.
			------------------------------------------------------------------

		---------------------------------
		Radio 객체 메소드 
		---------------------------------
			------------------------------------------------------------------
			click()	=> radio 단추를 체크를 넣어주거나 혹은 빼준다.
			------------------------------------------------------------------
				   document.xForm.gender[1].click()  코드가 실행되면 
					<input type="radio" name="gender" ~> 태그에 의해 출력되는 2번째 라디오 버튼에 체크 넣기.
					나머지 라디오 버튼은 체크 풀린다.

	---------------------------------
	● Checkbox 객체
	---------------------------------
		------------------------------------------------------------------
		<input type="checkbox" name="xxx" ~> 태그를 관리하는 객체이다.
		위 태그가 실행되어 웹브라우저에 출력될 때 [체크박스 버튼]라고 부른다.
		------------------------------------------------------------------
		------------------------------------------------------------------
		name 값이 같은 체크박스 버튼의 개수가 2개 이상일 경우 속성변수 호출
		=>  document.form태그name값.xxx[i].속성변수
		------------------------------------------------------------------
		name 값이 같은 체크박스 버튼의 개수가 2개 이상일 경우 속성변수 호출
		=>  document.form태그name값.xxx[i].메소드(~)
		------------------------------------------------------------------
		------------------------------------------------------------------
		name 값이 같은 체크박스 버튼의 개수가 1개일 경우 속성변수 호출
		=>  document.form태그name값.xxx.속성변수
		------------------------------------------------------------------
		name 값이 같은 체크박스 버튼의 개수가 1개일 경우 속성변수 호출
		=>  document.form태그name값.xxx.메소드(~)
		------------------------------------------------------------------

		---------------------------------
		Checkbox 객체 속성변수 
		---------------------------------
			------------------------------------------------------------------
			value    => 체크된 체크박스 버튼 태그의 value 속성값이 저장되어 있다
			checked  => 체크 여부 정보가 저장되어 있다. 체크가 되어 있으면 true 가 저장되고 체크가 안되어 있으면 false 가 저장된다.
				    <주의>체크가 된 놈의 value 값이 서버로 전송된다.
				    체크가 안된 놈의 value 값은 서버로 전송되지 않는다.
			------------------------------------------------------------------
		---------------------------------
		Checkbox 객체 메소드 
		---------------------------------
			------------------------------------------------------------------
			click( ) => checkbox 단추의 체크를 넣어주거나 혹은 빼준다.
			------------------------------------------------------------------
					document.xForm.gender[1].click()  코드가 실행되면 
					<input type="checkbox" name="skill" ~> 태그에 의해 출력되는
					2번째 체크박스 버튼에 체크가 없으면 넣어주고, 체크가 있으면 체크 풀기.

	---------------------------------
	● Select 객체
	---------------------------------
		------------------------------------------------------------------
		<select name="xxx" ~> 태그를 관리하는 객체이다.
		위 태그가 실행되어 웹브라우저에 출력될 때 [목록 상자]라고 부른다.
		------------------------------------------------------------------
		------------------------------------------------------------------
		속성변수 호출 =>  document.form태그name값.xxx.속성변수
		------------------------------------------------------------------
		메소드 호출   =>  document.form태그name값.xxx.메소드(~)
		------------------------------------------------------------------
		
		---------------------------------
		Select 객체 속성변수 
		---------------------------------
			------------------------------------------------------------------
			value	 => 선택한 목록의 value 값이 저장되어 있다.
			size	 => 목록상자의 펼쳐진 개수가 저장되어 있다.
			multiple => 다중 선택 가능  여부가 저장되어 있다. true가 있으면 ctrl 누르고 다중선택이 가능하다.
			options	 => Option 객체들을 저장한 Array 객체의 메위주가 저장되어 있다.
			------------------------------------------------------------------
		
		---------------------------------
		Select 객체 메소드 
		---------------------------------
			------------------------------------------------------------------
			focus  => 포커스를 들여 놓는다
			blur() => 포커스를 뺀다
			------------------------------------------------------------------

	---------------------------------
	● Option 객체
	---------------------------------
		------------------------------------------------------------------
		option 태그를 관리하는 객체이다. option 태그는 <select ~> </select>태그 안에 삽입되는 태그이다.
		------------------------------------------------------------------
		속성변수 호출 => document.form태그 name값.select태그 name값.options[인덱스번호].속성변수
		------------------------------------------------------------------
		---------------------------------
		Option 객체 속성변수
		---------------------------------
			------------------------------------------------------------------
			text  => <option value="값">문자열</option>  에서 문자열이 저장되어 있다
			value => <option value="값">문자열</option>  에서 "값"이 저장되어 있다
			------------------------------------------------------------------

	---------------------------------
	● 기타 객체
	---------------------------------
		
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<22> JQuery 객체 생성 방법과 메소드/속성변수 정의 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	● JQuery 객체란 ?
	---------------------------------
		------------------------------------------------------------------
		특정 단체에서 만들어 무료로 제작되어 배포되는 [사용자 정의 객체] 중의 하나이다.
		------------------------------------------------------------------
	---------------------------------
	● JQuery 장점
	---------------------------------
		------------------------------------------------------------------
		대부분의 브라우저에서 동일한 실행 결과를 가진다. (=크로스 브라우징)
		개발자, 디자이너, 퍼블리셔를 모두 만족하는 강력한 기능을 가지고 있다.
		즉 짧은 코딩으로 원하는 일을 쉽게 처리한다.
		------------------------------------------------------------------
	---------------------------------
	● JQuery 객체가 할 수 있는 일
	---------------------------------
		DOM 객체의 메소드나 속성변수를 기존 자스 코딩보다 쉬운 방법으로 호출할 수 있다.
			---------------------------------
			<form name="xForm" ~>
				<input type = text name = "uid">
			</form>
			---------------------------------
				var uid = document.xform.uid.value; 
				// 코딩 상 DOM 객체의 메소드나 속성변수를 호출하여 value 값 얻기
				
				var uid = $("[name=uid]").val(); 
				// 코딩 상 DOM 객체의 메소드나 속성변수를 호출하지 않고 value 값 얻기
				
		쉬운 방법으로 비동기 방식으로 웹서버와 통신을 지원하는 JQuery 객체의 메소드가 존재한다.
		
		쉬운 방법으로 애니메이션 관련 작업을 지원한다.

		쉬운 방법으로 [이벤트 설정] 및 [이벤트 처리]를 지원하는 JQuery 객체의 메소드가 존재한다.

	---------------------------------
	● JQuery 객체의 메위주 얻는 방법
	---------------------------------
		------------------------------------------------------------------
		JQuery(~) 또는 $(~) 라는 함수를 호출하면 리턴되는 데이터가 JQuery 객체의 메위주이다.
		<참고> 선택자는 태그를 가르키는 방법론
		------------------------------------------------------------------
		------------------------------------------------------------------
		<예> var obj = $("[name=uid]"); // 변수 obj 선언하고 $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj에 저장
						// 이때 JQuery 객체는 name=uid를 가진 태그를 관리한다.
						// "[name=uid]" 가 바로 선택자이다.		
		------------------------------------------------------------------
		------------------------------------------------------------------
		<예> var obj = $(".pwd");	// 변수 obj 선언하고 $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj에 저장
						// 이때 JQuery 객체는 class=pwd 를 가진 태그를 관리한다.
						// ".pwd" 가 바로 선택자이다.		
		------------------------------------------------------------------
		------------------------------------------------------------------
		<예> var obj = $("#addr");	// 변수 obj 선언하고 $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj에 저장
						// 이때 JQuery 객체는 id=addr를 가진 태그를 관리한다.
						// "#addr" 가 바로 선택자이다.		
		------------------------------------------------------------------
		------------------------------------------------------------------
		<예> var obj = $(".family.relation");	// 변수 obj 선언하고 $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj에 저장
							// 이때 JQuery 객체는 class=family를 가진 태그 후손 즉 내부에
							// class=relation을 관리한다.
							// "#addr" 가 바로 선택자이다.		
		------------------------------------------------------------------
		------------------------------------------------------------------
		<예> var obj = $("div");	// 변수 obj 선언하고 $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj에 저장
						// 이때 JQuery 객체는 div 태그를 관리한다.
						// "div" 가 바로 선택자이다.		
		------------------------------------------------------------------
		------------------------------------------------------------------
		<예> var obj = $(".xxx div");	// 변수 obj 선언하고 $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj에 저장
						// 이때 JQuery 객체는 class=xxx를 가진 태그의 후손 중 div 태그를 관리한다.
						// ".xxx div" 가 바로 선택자이다.		
		------------------------------------------------------------------
		------------------------------------------------------------------
		<예> var obj = $(".xxx div");	// 변수 obj 선언하고 $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj에 저장
						// 이때 JQuery 객체는 class=xxx를 가진 태그의 후손 중 div 태그를 관리한다.
						// ".xxx div" 가 바로 선택자이다.		
		------------------------------------------------------------------
	
	---------------------------------
	● JQuery 객체의 메소드 호출하기 위한 절차
	---------------------------------
		<1> JQuery-x.x.x.min.js 다운 받는다. x는 임의의 버전 번호이다.
		<2> HTML의 head 태그에 아래와 같이 수입하는 코드를 작성한다.
			------------------------------------------------------------------
			<script src="JQuery-x.x.x.min.js" type="text/javascript"></script>
			------------------------------------------------------------------
		<3> 위 수입하는 코드 이후에서 $("선택자")를 호출하여 JQuery 객체의 메위주를 얻어 변수에 저장한다.
		<4> 변수.메소드(~) 로 JQuery 객체의 메소드를 호출한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<23> 자바스크립트 사용자 정의 객체의 정의 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	● 자바스크립트 사용자 정의 객체
	---------------------------------
		▶ 개발자가 직접 만든 [생성자 함수]로부터 만들어지는 객체를 말한다.
		▶ [생성자 함수]란 일반 함수와 달리 객체 생성 목적으로 만들어진 함수이다.
		   <참조> 저자마다 [생성자 함수]를 [클래스]라고 부르는 저자도 있다.

	---------------------------------
	● 생성자 함수 형식
	---------------------------------
		---------------------------------
		function 생성자함수명( [매변1] ) {
			this.속성변수명 = 데이터1;
			this.메소드명 = function( [매변2] ) {
				실행코드;
				[return [데이터2];]
			}
		};
		---------------------------------
			속성변수는 0개 이상 선언 가능하다.
			메소드는 0개 이상 선언 가능하다.
			실무적으로 속성변수 또는 메소드가 1개 이상 선언이 되어야한다.
			매개변수는 0개 이상 선언이 가능하고 2개 이상이면 매개변수명,매개변수명,~ 로 선언한다.
		------------------------------------------------------------------
		<예>
		------------------------------------------------------------------
		function Sungjuk(s_no, s_name, kor, eng, mat){
			// ---------------------------------
			// 속성변수 선언
			// ---------------------------------
			this.s_no = s_no;
			this.s_name = s_name;
			this.kor = kor;
			this.eng = eng;
			this.mat = mat;

			// ---------------------------------
			// 메소드 선언
			// ---------------------------------
			this.getS_no = function( ) {
			    return this.s_no;
			}
			this.getS_name = function( ) {
			    return this.s_name;
			}
			this.getKor = function( ) {
			    return this.kor;
			}
			this.getEng = function( ) {
			    return this.eng;
			}
			this.getMat = function( ) {
			    return this.mat;
			}
			this.getTot = function( ) {
			    return this.kor + this.eng + this.mat;
			}
			this.getAvg = function( ) {
			    return this.getTot()/3;
			}
		}
		------------------------------------------------------------------
		var sungjuk = new Sungjuk(1, "사오정", 91, 81, 71);      // 생성자 함수 객체화.
		alert( sungjuk.getTot() );       // 총점 계산 메소드 경고창 출력.
		alert( sungjuk.getAvg() );       // 평균 계산 메소드 경고창 출력.  
		------------------------------------------------------------------
	---------------------------------
	● 생성자 함수를 객체화 하는 코딩 형식
	---------------------------------
		---------------------------------
		var 변수명 = new 생성자함수명( [데이터1] );
		---------------------------------
			<1> 변수를 선언한다.
			<2> new에 의해 지정한 생성자함수를 메모리 공간으로 올려 객체화한다.
			<3> 메모리에 올려진 생성자 함수를 생성자함수 ([데이터1]) 형식으로 호출한다.
				이때 매개변수가 있다면 데이터1 이 매개변수로 저장된다.
			<4> [객체의 메모리 위치 주소값]을 리턴하여 [변수]에 저장한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<24> 자바스크립트 [일회성 사용자 정의 객체]에 대해 설명한다면? 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	
	● [생성자함수] 없이 만들어지는 객체를 말한다.
	
	● 일회만 사용할 목적으로 만들어지는 객체이기도 하다.  

	---------------------------------
	[일회성 사용자 정의 객체] 생성 코딩 형식
	---------------------------------
	---------------------------------
	var 변수 = {
		속성변수명 : 데이터,
		메소드명 : function([매변2]){
			실행코드;
			[return [데이터];]
		}
	}
	---------------------------------
		속성변수는 0개 이상 선언가능
		메소드는 0개 이상 선언가능.
		실무적으로 본다면, 속성변수나 메소드는 1개이상 선언해야 한다.  
		실무적으로 [일회성 사용자 정의 객체] 안에 메소드는 잘 나오지 않는다. 속성변수만 사용하려고 씀. 
		주로 여러 데이터  한속에 모아 보관하고 사용할 목적으로 사용한다.  
	---------------------------------
	var sungjuk = {
			//---------------------------------
			// 속성변수 선언
			//---------------------------------
			s_no:1
			,s_name:"사오정
			,kor:91
			,eng:81
			,mat:71
			//---------------------------------
			// 메소드 선언
			//---------------------------------
			,getS_no:function( ) {
				return this.s_no;
			}
			,getS_name:function( ) {
				return this.s_name;
			}
			,getKor:function( ) {
				return this.kor;
			}
			,getEng:function( ) {
				return this.eng;
			}
			,getMat:function( ) {
				return this.mat;
			}
			,getTot:function( ) {
				return this.kor + this.eng + this.mat;
			}
			,getAvg:function( ) {
				return this.getTot()/3;
			}
		}


		---------------------------------
		var kor = 91;
		var eng = 81;
		var mat = 71;
		var che = 61;
		var phy = 51;
		alert(kor)
		---------------------------------
		var jumsu = [91,81,71,61,51];
		alert(jumsu[0])
		---------------------------------
		var jumsu = {kor:91,eng:81,mat:71,che:61,phy:51};
		alert( jumsu.kor )
		---------------------------------


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<25> [JSON]의 정의 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	● 동종 또는 이기종 S/W끼리 쉽게 데이터를 전달하기 위해 만든 [개방형 표준 데이터 표기법]을 말한다.
	● 일회성 사용자 정의 객체 표현법과 동일하다.
	● JSON = Javascript Object Notation = 자바스크립트 객체 표기법
		<참고> JavaScript 에서 일회성 사용자 정의 객체 표현법과 동일하여 만들어진 이름이다.
	---------------------------------
	● JSON 특징
	---------------------------------
		각종 프로그래밍 언어나 플랫폼(=platform)에 종속되지 않는 독립형 데이터 포맷이다.
		---------------------------------
		<참고> 플랫폼 = 특정 서비스를 하기 위한 기반. 보통 플랫폼은 무료이고 플랫폼이란 기반 위의 서비스는 유료.
		---------------------------------
	---------------------------------
	● JSON 장점
	---------------------------------
		다양한  프로그래밍 언어에서 동종 또는 이기종 S/W 끼리 쉽게 데이터를 전달할 수 있다.
		스프링 같은 프레임워크 사용시 웹 브라우저에서 [비동기 방식]으로 서버와 데이터를 주고받을 때 JSON 사용하기도 한다.
		---------------------------------
		<참고> 비동기 방식
		---------------------------------
			▶ 클라이언트의 웹 브라우저에서 화면이동(=페이지 이동) 없이 AJAX 기술로 웹 서버와 통신하는 방식을 말한다.
			▶ <예> 아이디 입력 후 버튼을 눌러 페이지 전환 없이 서버와 통신하여 아이디 중복여부를 수신 받는 경우
			▶ <예> 네이버에서 검색 키워드 입력 시 페이지 전환 없이 서버와 통신하여 관련 검색어가 밑에 뜨는 경우
			▶ <예> 네이버 지도에서 지도를 밀면 새로운 지도가 나오는 경우
		---------------------------------
		<참고> 동기 방식
		---------------------------------
			▶ 클라이언트의 웹 브라우저에서 화면이동(=페이지 이동)을 하면서 웹서버와 통신하는 방식을 말한다.
			▶ 전통적인 웹 서버와의 통신 방법이다.
	---------------------------------
	● JSON 형식과 JSON 안의 키값에 대응하는 데이터 호출방법
	---------------------------------
		---------------------------------
		JSON 형식
		---------------------------------
		{
			"키값" : 데이터

			,"키값" : 데이터

			, ~

			, "키값" : 데이터
		}
		---------------------------------
			<참고> "문자열1", "문자열2", ~ , "문자열n" 키값이라고도 부른다.
			<주의> 데이터는 주로 문자열 또는 숫자이다. 즉 모든 프로그래밍 언어가 공유하는 데이터이다.
		---------------------------------
		JSON 안의 키값에 대응하는 데이터 호출 형식
		---------------------------------
			변수명 ["키값"]

		---------------------------------
		<예>
		---------------------------------
		var wallAirCondition = {
			"제품번호" : 1
			,"제품이름" : "창문형에어컨(PWA-3300WP)"
			,"제조사" : "파세코"
			,"재고물량" : 300
		}
		---------------------------------
		alert(windowAirCondition["제품이름"])


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<26> <body onLoad = "openMesage()"> 이 코드의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	웹 브라우저가 body 태그 안의 태그들을 모두 읽어 들인 후에
	자바스크립트의 openMessage 라는 함수를 호출해라
	------------------------------------------------------------------
	------------------------------------------------------------------
	<참고> <태그명 on 이벤트 = "자스코드"> 이 코드의 의미는 ?
	------------------------------------------------------------------
		이 태그에 on 다음에 나오는 이벤트를 일으키면 자스코드를 실행하라


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<27> 자스에서 var arr = []; 이 코드의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	arr 변수 선언하기
	Array 객체 생성한 후 Array 객체의 메위주를 arr 변수에 저장하기.
	이 때 Array 객체 안에는 배열변수 0개이다. 즉 배열변수가 없다. 추후에 저장을 목적으로
	다량의 데이터를 저장할 목적으로 Array 객체를 생성해 놓은 것이다.
	------------------------------------------------------------------
		위 코드는 아래와 같은 코드이다.
		var arr = new Array();

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<28> 자스에서 var arr = [1,3,5]; 이 코드의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	<1> arr 변수 선언하기
	<2> Array 객체 생성한 후 Array 객체의 메위주를 arr 변수에 저장하기.
	    이 때 Array 객체 안에는 배열변수 3개가 있다.
	    3개의 배열변수 안에는 1, 3, 5가 저장되어 있다.
	------------------------------------------------------------------
	각 배열변수를 호출하는 방법은 arr[0] arr[1] arr[2] 이다
	대괄호 안에 인덱스 번호를 쓸 수 있으므로
	반복문으로 돌리면서 이 인덱스 번호를 바꾸어 접근할 수 있다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<29> 자스에서 var xxx = getDdd(3); 이 코드의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	<1> xxx 변수 선언하기
	------------------------------------------------------------------
	<2> getDdd 라는 이름의 함수를 getDdd(3) 식으로 호출하기.
	    getDdd 함수 호출하면서 3이란 데이터를 넘겨준 것이다.
	------------------------------------------------------------------
	<3> getDdd 라는 이름의 함수를 호출하여 리턴받은 데이터를 xxx 변수에 저장하기
	    그 함수는 function getDdd(매개변수명) { ~; return 데이터;} 의 형식을 가지고 있을 것이다.
	------------------------------------------------------------------
	<주의> 함수를 호출한 지점이 = 오른쪽이다. = 오른쪽은 데이터가 나와야 하는 곳이므로
	       이 함수는 호출하면 반드시 데이터를 리턴해야 할 것이다.
	<참고> 관용적으로 get 으로 시작하는 함수는 리턴값이 있다.
	<참고> 관용적으로 set 으로 시작하는 함수는 리턴값이 없다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<30> 자스에서 var xxx = new Date(); 이 코드의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	<1> xxx 변수 선언하기
	---------------------------------
	<2> Date 객체 생성한 후 Date 객체의 메위주를 xxx 변수에 저장하기.
	    이 때 Date 객체는 현재 년월일시분초를 관리한다.
	    현재란 지금 이 시점의 년월일시분초를 말한다. 즉 흘러가는 년월일시분초를 말한다.
	---------------------------------
	객체 생성 후 아마 xxx.메소드() 형식으로 Date 객체의 메소드를 호출할 것이다.
	객체 생성의 목적은 메소드 호출이다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<31> 자스에서 var xxx = new Date(1999, 11, 25); 이 코드의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	<1> xxx 변수 선언하기
	---------------------------------
	<2> Date 객체 생성한 후 Date 객체의 메위주를 xxx 변수에 저장하기.
	    이 때 Date 객체는 1999년 12월 25일 0시0분0초를 관리하고 있다.
	    고정된 날짜인 1999년 12월 25일 0시0분0초를 관리하고 있다.
	---------------------------------
	<주의> Date 객체는 월을 사람이 생각하는 월에서 -1 한 월을 세팅한다.
	       Date 객체는 월을 0~11 까지의 숫자로 관리하고 있기 때문.
	---------------------------------
	<요령> 월 세팅 헷갈리므로 아래 처럼하면 덜 헷갈린다.
	       var xxx = new Date(1999, 12-1, 25);

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<32> 자스에서 var xxx = new Date(1999, 13, 25); 이 코드의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	위 코드를 아래처럼 변경하면
		var xxx = new Date(1999, 11+2, 25); 이다.
	11은 12월을 의미한다.
	2000년 2월 25일을 관리한다.
	시분초가 없으면 0시 0분 0초가 세팅된 것과 동일하다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<33> 자스에서 var xxx = function(a){~}; 이 코드의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	<1> xxx 변수 선언하기
	---------------------------------
	<2> 익명 함수 function(a){~} 를 xxx 변수에 저장하기.
	---------------------------------

	자스는 익명함수, 즉 이름없는 함수도 데이터 취급을 하므로 변수로 저장이 가능하다.

	익명함수도 함수 호출이 목적이다.

	익명함수를 변수에 저장하므로 이동하기 쉽고 필요시 익명함수를 호출할 수 있다.

	변수에 저장된 익명함수 호출 방법은 아래와 같다.
		---------------------------------
		변수명 ( [데이터] )
		---------------------------------
	---------------------------------
	<3> xxx 변수안의 익명 함수 호출방법은 아래와 같다.
	---------------------------------
		xxx(데이터)

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<34> HTML 파일 안에 <script src = "common_func.js"></script> 이 코드의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	common_func.js 파일안의 자바스크립트 소스를 복사해서 현 script 태그 사이에 삽입하라
	------------------------------------------------------------------
	그러므로 <script src = "common_func.js"></script> 를 가지고 있는 HTML 파일안에
	common_func.js 파일 안의 자바스크립트 소스가 있는 것과 동일하다.
	------------------------------------------------------------------
	src="common_func.js" 의 의미는 현재 이 HTML 파일의 저장 폴더와 동일한 폴더에
	common_func.js 파일도 존재한다는 의미이다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<35> 호출할 함수는 함수 호출 코드 위에만 나와야하는가 ?
     즉 함수를 선언한 후에만 호출이 가능한가?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	아니다.
	------------------------------------------------------------------
	함수 호출 코딩이 먼저 나오고 함수 선언이 나중에 나와도 된다.
	------------------------------------------------------------------
	웹 브라우저는 HTML 파일 안의 HTML 소스 또는 자스 소스를 읽어들일 때 아래와 규칙을 사용한다.
	------------------------------------------------------------------
		<1> 먼저 정적함수 즉, function 함수명(~){~} 이렇게 생긴 함수를 먼저 골라 읽어 들인다.
		------------------------------------------------------------------
		<2> 맨 위에서 부터 차례대로 소스를 읽어들여 실행한다. 정적함수를 제외하고
	------------------------------------------------------------------
	그렇지만 정적함수 즉 이름있는 함수는 관용적으로 맨 위 head 태그 안에 선언하는게 좋다.
	------------------------------------------------------------------
	<참고> 정적함수 선언은 function 함수명(~){~} 을 말한다.


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<36> 아래 자스코딩을 분석하면 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	if(isEmpty(pwd)) {
		alert ("암호가 비어있음. 입력바람");
		return;
	}

	------------------------------------------------------------------

	if ( true 또는 false 를 리턴하는 [비교연산식] 또는 [논리연산식] 또는 [함수호출]) {
		실행구문;
	}

	------------------------------------------------------------------
	위 문제에서 함수호출 코딩인 isEmpty(pwd) 가 나왔으므로 isEmpty 함수의 리턴값은
	true 또는 false 라고 볼 수 있다.
	------------------------------------------------------------------
	<주의> 데이터가 나올 자리에 함수 호출 코딩이 나오면 함수 호출 후 반드시 리턴값이 있다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<37> 아래 자스코딩을 분석하면 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	document.write( "<table border=1 style='border-collapse:collapse' cellpadding=5>");
	------------------------------------------------------------------
	document.write("문자열") => Document 객체의 write 메소드를 호출한 것이다.
				    변수 document 안에는 Document 객체가 이미 저장되어 있다.
				    괄호 안의 문자열을 HTML 태그 소스 또는 HTML 문자열로 HTML 파일에 출력하란 말이다.
				    즉 <script>document.write("문자열")</script> 이 코드가 나오는 자리에
				    문자열이 들어간다고 보면된다.













































---------------------------------
JSP의 6대 기술
---------------------------------
Directive
EL
Custom Tag
표준 액션 태그(X)
JSP Script(X)
Implicit Object(X) HttpServletRequest HttpServletResponse HttpSession
---------------------------------











