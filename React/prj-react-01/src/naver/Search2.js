// ----------------------------------------------------------------
// 프로젝트명 /node_modules/react 안에 default 가 붙어 수출하는 놈을 수입해서
// 현재 파일 안에서 React 란 이름으로 사용한다.
// 프로젝트명 /node_modules/react 안에 default 가 안붙어 수출하는 놈 useState 함수를 수입해서
// 현재 파일 안에서 useState 란 이름으로 사용할 것이다.
// ----------------------------------------------------------------
// <참고> 아래 수입 코드는 클래스 컴포넌트가 선언되는 js 파일안에서는 필수로 수입되는 것들이다.
import React, {useRef, useState } from "react";

// ----------------------------------------------------------------
// 리액트의 단위 프로그램중 하나인 [함수 컴포넌트] 선언하기
// ----------------------------------------------------------------
function Search2() {

    // ----------------------------------------------------------------
    // 속성변수 keywordRef 선언하고
    // React 객체의 createRef() 메소드를 호출하여 리턴된 데이터를 저장하기
    // 이후부터 ref={keywordRef} 가진 태그는
    // keywordRef.current.focus(); 코딩이 실행되면
    // 포커스가 그 태그안으로 들어간다.
    // ----------------------------------------------------------------
    const keywordRef = useRef(null);
    // ----------------------------------------------------------------
    // 지역변수 developerList 선언하고 Array 객체 저장
    // 개발자의 목록이 저장되어 있다.
    // 실제로는 DB 에서 가져와야한다.
    // ----------------------------------------------------------------
    const developerList = [
        {dev_no:1,dev_name:'사오정', addr:'서울시', phone:'010-1234-1234'}
        ,{dev_no:2,dev_name:'저팔계', addr:'경기도', phone:'010-2345-2345'}
        ,{dev_no:3,dev_name:'손오공', addr:'경상도', phone:'010-3456-3456'}
        ,{dev_no:4,dev_name:'삼장법사', addr:'전라도', phone:'010-4567-4567'}
        ,{dev_no:5,dev_name:'홍길동', addr:'강원도', phone:'010-5678-5678'}
        ,{dev_no:6,dev_name:'임꺽정', addr:'충청도', phone:'010-6789-6789'}
        ,{dev_no:7,dev_name:'고길동', addr:'서울시', phone:'010-7890-7890'}
    ]
    // ----------------------------------------------------------------
    // 지역변수 developers, setDevelopers 선언하고
    // 지역변수 developers 에는 [~] 즉 Array 객체 저장하고
    // 지역변수 setDevelopers 에는 지역변수 developers 안을 갱신하는 익명함수 저장하기
    // 이후부터 setDevelopers(~) 이 호출되면 함수 컴포넌트 안의 코딩이 재 실행된다.
    // 재 실행 시 useState 함수 호출이 있는 코딩줄은 재 실행에서 제외된다.
    // 이제부터 developers 는 마치 클래스 컴포넌트의 state 속성변수와 동일한 성격을 가지게된다.
    // ----------------------------------------------------------------
    const [developers, setDevelopers] = useState(developerList);
    // ----------------------------------------------------------------
    // 지역변수 inputText, setInputText 선언하고
    // 지역변수 inputText 에는 [~] 즉 Array 객체 저장하고
    // 지역변수 setInputText 에는 지역변수 inputText 안을 갱신하는 익명함수 저장하기
    // 이후부터 setInputText(~) 가 호출되면 함수컴포넌트 안의 코딩이 재 실행된다.
    // 재 실행 시 useState 함수 호출이 있는 코딩줄은 재 실행에서 제외된다.
    // 이제부터 developers 는 마치 클래스 컴포넌트의 state 속성변수와 동일한 성격을 가지게된다.
    // ----------------------------------------------------------------
    const [inputText, setInputText] = useState('');
    // ----------------------------------------------------------------
    // 화살표함수가 저장된 지역변수 textChange 선언
    // 아래 매개변수 e에는 Event 객체가 들어온다.
    // 즉 아래 화살표함수는 입력 양식에 이벤트가 발생했을 때 실행할 구문을 내포하고 있다.
    // ----------------------------------------------------------------
    const textChange = (e) => {
        setInputText(e.target.value);
    }
    // ----------------------------------------------------------------
    // 화살표함수가 저장된 지역변수 search 선언
    // 검색 버튼 누르면 실행할 구문을 내포하고 있다.
    // ----------------------------------------------------------------
    const search = () => {
        // ----------------------------------------------------------------
        // 지역변수 tmp_inputText 선언하고
        // inputText 안의 문자 복사한 후 앞뒤 공백 제거하고
        // tmp_inputText 에 저장하기
        // ----------------------------------------------------------------
        const tmp_inputText = inputText.trim();
        // ----------------------------------------------------------------
        // 지역변수 InputText 안에 tmp_inputText 저장하기
        // ----------------------------------------------------------------
        setInputText(tmp_inputText);
        // ----------------------------------------------------------------
        // 지역변수 new_developerList 선언하고
        // Array 객체의 filter 메소드를 호출하여
        // developerList 에 저장된 사용자정의 객체를 1개씩 복사해서 꺼내서
        // 화살표 함수를 호출하면서 매개변수로 전달시킨다.
        // 화살표 함수의 리턴값이 true 면 매개변수로 들어온 사용자정의 객체를 누적시킨다.
        // 즉 입력한 키워드가 부분적을 ㅗ들어있는 사용자정의 객체만 누적 시킨다.
        // ----------------------------------------------------------------
        const new_developerList = developerList.filter(
            developer =>
                developer.dev_name.indexOf(tmp_inputText)>=0
                ||developer.addr.indexOf(tmp_inputText)>=0
                ||developer.phone.indexOf(tmp_inputText)>=0
        );
        // ----------------------------------------------------------------
        // new_developerList 안에 Array 객체 developers 지역변수안에 넣기
        // 즉 키워드가 들어 있는 사용자정의 객체들이 새롭게 developers 지역변수 안에 들어간 꼴이다.
        // ----------------------------------------------------------------
        setDevelopers(new_developerList);
        // ----------------------------------------------------------------
        // ref={keywordRef} 를 가진 태그에 커서 들여 놓기
        // ----------------------------------------------------------------
        keywordRef.current.focus();
    };
    // ----------------------------------------------------------------
    // 화살표함수가 저장된 지역번수 searchAll 선언
    // 모두 검색 버튼 누르면 실행할 구문을 내포하고 있다.
    // ----------------------------------------------------------------
    const searchAll = () => {
        // ----------------------------------------------------------------
        // 지역변수 inputText 안에 "" 저장하기
        // 키보드 입력란 지우기
        // ----------------------------------------------------------------
        setInputText("");
        // ----------------------------------------------------------------
        // developerList 안에 Array 객체를 developers 지역변수 안에 넣기
        // 즉 원래 모든 데이터가 복구되는 셈이다.
        // ----------------------------------------------------------------
        setDevelopers(developerList);
        // ----------------------------------------------------------------
        // ref={keywordRef} 를 가진 태그에 커서 들여 놓기
        // ----------------------------------------------------------------
        keywordRef.current.focus();
    }

    const searchResultTag = developers.map(
        developer =>
            <tr>
                <td>{developer.dev_no}</td>
                <td>{developer.dev_name}</td>
                <td>{developer.addr}</td>
                <td>{developer.phone}</td>
            </tr>
    )






    // ----------------------------------------------------------------
    // JSX 문법을 가진 return 구문 선언
    // 리턴되는 JSX 문법이 결국 웹화면에 출력된다.
    // ----------------------------------------------------------------    
    return(

        <>
            <center>
                <br/>
                키워드 : <input type='text' value={inputText} onChange={textChange}/>&nbsp;
                <button onClick={search}> 검색 </button> &nbsp;&nbsp;&nbsp;
                <button onClick={searchAll}> 모두검색 </button> 
                <br/>
                <br/>
                <table style={{borderCollapse:"collapse"}} border="1" cellPadding="2">
                검색개수 : {developers.length}
                    <tr>
                        <th>번호</th>
                        <th>직원명</th>
                        <th>거주지</th>
                        <th>전화번호</th>
                    </tr>
                    {searchResultTag}
                </table>
                {developers.length==0?'검색결과없음':null}
            </center>
        </>
    )

}

export default Search2;