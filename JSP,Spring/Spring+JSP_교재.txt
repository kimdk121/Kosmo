
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<1> 웹 브라우저(=WEB Browser) 란 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	● 인터넷 망에서 URL 주소에 존재하는 [웹 서버]로 [요청 메세지]를 전송하고,
	   [응답 메세지]를 받아 그 안에 존재하는 [HTML 소스]를 실행하여
	   결과를 화면에 출력하는 클라이언트 쪽 SW를 말한다.
	류
	<예> Explorer, Chrome, Safari, Opera, Firefox, Edge
	------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<2> 웹 서버(=WEB Server) 란 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	------------------------------------------------------------------
	● [웹 브라우저]로 접속하는 다수의 클라이언트의 [요청 메세지]를 받고,
	   다수의 클라이언트에게 동시에 [응답 메세지]로 응답하는 SW를 말한다.
	------------------------------------------------------------------
	● 웹 서버 종류
	------------------------------------------------------------------
		Weblogic	=> 웹 프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 실무용
		Websphere	=> 웹 프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 실무용
		JBoss		=> 웹 프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 실무용
		Tomcat		=> 웹 프로그래밍 자원으로 HTML, JSP, Java 를 사용한다. 연습용
		------------------------------------------------------------------
		IIS		=> 웹 프로그래밍 자원으로 HTML, ASP, C#, 닷넷 을 사용한다.
		------------------------------------------------------------------
		Apache		=> 웹 프로그래밍 자원으로 HTML, PHP 를 사용한다.
		------------------------------------------------------------------
		NodeJS		=> 웹 프로그래밍 자원으로 자바스크립트(*.js) 를 사용한다.
				   <참고> react 가 NodeJS 위에서 작동된다.
		------------------------------------------------------------------
		기타 JEUS(Tmax), iPlanet, Oracle 9iAs 등의 웹 서버도 있다.
		------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<3> [웹 브라우저]와 [웹 서버]의 통신 과정은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	<1> 일반 유저가 [웹 브라우저]에서 원하는 [웹 서버]의 자원을 호출하기 위해 아래와 같은
	    [URL 주소]로 입력하고 엔터를 친다. 이 때 [요청 메세지]를 가지고 [웹 서버]에 접속을 시도한다.
	------------------------------------------------------------------
		------------------------------------------------------------------
		http://서버의 도메인 주소 : 웹 서버 포트번호 / 웹 서버의 호출자원 명
		------------------------------------------------------------------
		------------------------------------------------------------------
		<참고> [요청 메세지]의 내용물
		------------------------------------------------------------------
			---------------------------------
			URL 주소
			---------------------------------
			[파라미터명]과 [파라미터값]	=> 클라이언트 쪽 입력양식 태그의 name 값과 value 값을 말한다.
							=> URL 주소에 물음표 이후 문자열 중 xxx=yyy 가 있으면
							   xxx가 파라미터명이고 yyy가 파라미터값이다
			---------------------------------
			[쿠키명]과 [쿠키값]
			---------------------------------
			[헤더명]과 [헤더값]		=> 클라이언트 웹 브라우저의 각종 정보
			---------------------------------
			기타 등등
			---------------------------------
		------------------------------------------------------------------
		<참고> 웹 서버 포트번호가 생략되면 :80 이 디폴트 값이다.
		------------------------------------------------------------------
		<참고> 웹 서버의 호출자원명 없이 http://서버의 도메인주소:웹서버포트번호 로 접속을 시도하면
		       [웹 서버]는 디폴트 대응 자원명을 호출한다.
		------------------------------------------------------------------
		<참고> URL 주소 중 http://서버의 도메인주소 까지는 유일한 값이다.
		       즉 중복되지 않는 유일한 대외적인 주소이다.
		       만약 서버의 도메인주소가 www로 시작하면 전세계의 유일한 주소이다.
		       만약 서버의 도메인주소가 www로 시작하지 않으면 국내의 유일한 주소이다.
		------------------------------------------------------------------
		<참고> URL 주소 중 http://서버의 도메인주소 이후의 주소는 웹서버 내부의 주소이다.
		------------------------------------------------------------------

	------------------------------------------------------------------
	<2> 인터넷 망을 타고 가다 [DNS 서버]에 들려 아래와 같이 [URL 주소]가 바뀐다.
	------------------------------------------------------------------
		------------------------------------------------------------------
		http://서버의 도메인주소 : 웹 서버 포트번호 / 웹 서버의 호출자원 명
		------------------------------------------------------------------
				↓
		------------------------------------------------------------------
		http://서버의 도메인주소에 대응하는 IP주소 : 웹 서버 포트번호 / 웹 서버의 호출자원 명
		------------------------------------------------------------------
			DNS 서버에는 서버의 도메인주소에 대응하는 IP 주소가 등록되어 있다.

	------------------------------------------------------------------
	<3> [DNS 서버]를 출발하여 인터넷 망을 타고 가다 [IP 주소]를 소유한 [서버 운영체제]에 접속한다.
	------------------------------------------------------------------
		<참고> [서버 운영체제]는 대부분 [Unix] 또는 [서버용 윈도우] 또는 [Linux] 이다.
		       Linux는 대규모가 아닌 중소기업용이다.
	
	------------------------------------------------------------------
	<4> [서버 운영체제] 내부에 웹서버 포트번호를 이용하는 [웹 서버]에 접속한다.
	------------------------------------------------------------------

	------------------------------------------------------------------
	<5> [웹 서버]가 URL 주소에 있는 [서버의 호출자원명]에 대응하는 [웹 프로그래밍 자원]을 호출한다
	    이 때 [웹 프로그래밍 자원]에게 [요청 메세지] 안의 파라미터명, 파라미터값, 쿠키명, 쿠키값이 전달된다.
	------------------------------------------------------------------
		---------------------------------
		파라미터명, 파라미터값은 DB 연동 시 사용한다.
		---------------------------------
		바로 파라미터명 이 오라클 테이블의 컬럼명이고,
		파라미터값은 테이블에 입력 또는 삭제 또는 수정 또는 검색할 데이터 이다.
		---------------------------------
		쿠키명, 쿠키값은 아주 가끔 DB 연동 시 사용한다.
		---------------------------------
		[웹 프로그래밍 자원] 이 JSP라면 xxx.jsp가 호출된다.
		[웹 프로그래밍 자원] 이 자바의 객체라면 특정 메소드가 실행된다.

	------------------------------------------------------------------
	<6> [웹 프로그래밍 자원]이 필요에 따라 파라미터명, 파라미터값을 가지고 DB 연동을 하고
	    그 결과물을 HTML 소스에 반영하여 HTML 소스를 생성한다.
	------------------------------------------------------------------
		------------------------------------------------------------------
		<참고> DB 연동이 필요없는 경우 HTML 소스에 DB 연동 결과물이 반영되지 않을 수도 있다.
		------------------------------------------------------------------
		<참고> 스프링 프레임워크에서는 필요에 따라 HTML 소스로 JSON이 포함되기도 한다.
		------------------------------------------------------------------
		<참고> 웹 프로그래밍 자원을 어떤 구조로 만드느냐에 따라 아래와 같은 [웹 개발 패턴]으로 나뉜다.
		------------------------------------------------------------------
			---------------------------------
			Model1 패턴
			---------------------------------
				① 클라이언트의 웹 브라우저에서 http://~/xxx.jsp 형태의 [URL 주소]로 웹 서버에 접속한다.
				② [웹 서버]에서 [URL 주소]에 대응하는 xxx.jsp 파일이 실행된다.
				③ xxx.jsp 파일이 실행된 후 HTML 소스가 생성된다.
				④ [웹 서버]가 [응답메세지]에 HTML 소스 등을 담아 클라이언트의 웹 브라우저에게 [응답메세지]를 전송한다.
				⑤ 클라이언트의 웹 브라우저에서 HTML 소스가 실행되어 웹 화면에 결과를 본다.
				------------------------------------------------------------------
				<장점> 프로젝트 규모가 작고 유지보수가 많지 않을 경우 작업 속도가 빠르다.
				<단점> 프로젝트 규모가 크고 유지보수가 많을 경우 사용하기 힘들다.
			
			---------------------------------
			Model2 패턴
			---------------------------------
				① 클라이언트의 웹 브라우저에서 http://~/xxx.jsp 형태의 [URL 주소]로 웹 서버에 접속한다.
				   xxx.do 는 xxx , xxx.html, xxx.action 등으로 표현되는 가짜 지원명이 있다.
				② [웹 서버]의 [Servlet 객체]의 특정 메소드가 호출된다. 모든 형태의 URL 주소 접속 시 이 Servlet 객체가 맞이한다.
				③ Servlet 객체의 특정 메소드에서 [URL 주소]에 대응하는 자바 객체 (=JavaBean)의 메소드를 호출한다.
				   이 자바 객체 (=JavaBean) 메소드 안에서 DB 연동을 한다.
				④ Servlet 객체의 특정 메소드에서 [URL 주소]에 대응하는 xxx.jsp 파일을 호출한다.
				⑤ xxx.jsp 파일이 실행되면서 DB 연동 결과물을 HTML 소스에 반영하여 HTML 소스를 생성한다.
				⑥ [웹 서버]가 [응답메세지]에 HTML 소스 등을 담아 클라이언트의 웹 브라우저에게 [응답메세지] 를 전송한다.
				⑦ 클라이언트의 웹 브라우저에서 HTML 소스가 실행되어 웹 화면에 결과를 본다.
				------------------------------------------------------------------
				<단점>
				------------------------------------------------------------------
					Model1 패턴 보다 유지보수성이 좋아졌지만
					시대의 흐름에 따라 프로젝트 규모가 커지기 시작하자 또 유지보수성이 현저히 낮아지게 된다.
					Model1 보다 체계적이기는 하나 Model1 과 동일한 점은 개발자 코딩 개성이 똑같다.
					즉 코딩이 개성에 따라 다르다.
				------------------------------------------------------------------
				<참고> Servlet 객체란 HttpServlet 클래스를 상속받은 객체를 말한다.
				------------------------------------------------------------------
					public Xxx extends HttpServlet{
						~~
					}
					---------------------------------
					Xxx 클래스가 객체화된다면 통상적으로 [Servlet 객체]라고 지칭한다.
					Spring MVC 패턴에서는 [Servlet 객체]는 개발자 만들지 않고 Spring 쪽에 제공한다.

			---------------------------------
			Spring MVC 패턴
			---------------------------------
				Spring framework 에서 지원하는 웹 개발 패턴이다.
				작동 구조는 Model2 방식과 거의 동일하나 더 많은 자바 객체가 동원된다.
				Model2 방식의 자바 객체(=JavaBean)과 비슷한 자바 객체가 Spring MVC 방식에서는 더 세분화되어 여러층으로 나뉜다.
				DB 연동의 관리를 쉽게하기 위함이다.
				현재 대기업이나 공기업 프로젝트에서 주로 사용하는 개발 패턴이다.
				------------------------------------------------------------------
				<장점>
				------------------------------------------------------------------
					프로젝트 규모가 클 수록 유지보수성이 좋다.
					Spring MVC 에서 정한 코딩패턴과 정해진 객체를 사용하기 때문이다.
					자바 객체 안에서 어노테이션을 적극적으로 사용하여 자바의 날코딩이 줄어든다.
					속성변수의 자료형으로 인터페이스를 적극적으로 사용하여 객체 간의 결합도를
						약하게 하여 연쇄 수정의 범위를 줄인다. (=유지보수성 증가)
					DB 연동 시 작성하는 SQL구문을 자바 객체 안에서 하지 않고 XML로 빼서 작업하기도 한다.
						이때 Mybatis 라는 프레임워크를 사용한다.
				------------------------------------------------------------------
				<단점>
				------------------------------------------------------------------
					환경 설정이 복잡핟.
					작동 원리가 복잡하기에 사전 학습이 힘들다.
					규모가 작은 프로젝트에서 어울리지 않는다.

	------------------------------------------------------------------
	<7> HTML 소스를 [웹 서버]로 전해준다
	------------------------------------------------------------------

	------------------------------------------------------------------
	<8> [웹 서버]는 [응답 메세지]를 만든다.
	------------------------------------------------------------------
		---------------------------------
		[응답 메세지]의 내용물
		---------------------------------
			DB연동 결과물을 반영한 HTML 소스
			쿠키명과 쿠키값
			헤더명과 헤더값
			사용자가 요청한 자원의 존재 여부 및 재 접속 여부
		---------------------------------
		<참고> 스프링에서는 HTML 소스에 DB연동 결과물을 반영한 JSON이 있을 수 있다.
		---------------------------------

	------------------------------------------------------------------
	<9> [웹 서버]는 [웹 브라우저]에게 [응답 메세지]를 전송한다.
	------------------------------------------------------------------

	------------------------------------------------------------------
	<10> [응답 메세지]를 받은 [웹 브라우저]는 [응답 메세지]에 내장된
	     요청 자원의 존재 여부를 확인하고 난 후 있다면
	     HTML 소스를 실행하여 [웹 브라우저] 화면에 출력한다.
	------------------------------------------------------------------
		<참고> 요청 자원의 존재 여부 확인 시 없다면
		       에러 메세지가 존재하는 자체 준비 HTML 문서를 실행하여 화면에 출력한다.


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<4> 위 [웹 브라우저]와 [웹 서버]의 통신 과정에서 개발자가 기억할 것과 작업해야 할 것을 정리하면 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------
	신경써야할 과정 번호 
	---------------------------------
		<5> <6>
	---------------------------------
	작업해야할 것
	---------------------------------
		---------------------------------
		접속 [URL 주소]를 기억
		---------------------------------
		[URL 주소]에 대응하는 자바 객체(=JavaBean)의 전신인 클래스 제작
		---------------------------------
		DB 연동 시 필요한 SQL 구문 제작
		---------------------------------
		HTML 소스를 생성하는 xxx.jsp 제작
		---------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<5> [웹 브라우저]가 [웹 서버]로 보낸 [요청메세지]를 관리하는 것은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	
	------------------------------------------------------------------
	[HttpServletRequest] 객체이다. 웹 서버에 지원해주는 객체이다.
	------------------------------------------------------------------
	<참고> JSP 페이지에서는 [HttpServletRequest] 객체를 request 객체라고 부르기도 한다.
	       JSP 페이지에서는 request 변수 안에 [HttpServletRequest] 객체의 메모리 위치 주소값이 저장되어 제공된다.
	       이 변수 이름을 객체이름으로 부르기도 합니다.

	------------------------------------------------------------------
	[HttpServletRequest] 객체 메소드
	------------------------------------------------------------------
		---------------------------------
		String getParameter("파라미터명")
		---------------------------------
			[요청 메세지] 안에 담긴 [파라미터명]에 대응하는 [파라미터값]을 String 형으로 리턴한다.
			[파라미터명]이 없을 경우 에러발생하지 않고 null 값이 리턴됨.
			동일한 [파라미터명]이 2개 이상일 경우 첫 번째의 파라미터명의 파라미터값만 리턴한다.
			------------------------------------------------------------------
			<예>
			------------------------------------------------------------------
			아이디 : <input type="text" name="uid">
			암  호 : <input type="password" name="pwd">
			------------------------------------------------------------------
				위의 html 소스의 웹 화면 실행 결과물에서 아이디는 "abc", 암호는 "123"을 입력한 상태에서
				특정 웹 서버에 접속하면
				이때 웹 서버로 전달되는 요청 메세지 안의 파라미터명과 파라미터값은 아래처럼 저장되어 있다.
					"uid=abc&pwd=123"
				위에서 uid,pwd 는 파라미터명이 되고 abc나 123는 파라미터값이 된다.
				즉 uid란 파라미터명에는 "abc" 가 대응되는 셈이다.
				즉 pwd 이란 파라미터명에는 "123" 가 대응되는 셈이다.
				웹서버에서 uid 이란 파라미터명에 대응하는 "abc" 을 꺼낼려면 아래처럼 코딩한다.
				-------------------------------------------------
				String uid = request.getParameter( "uid" );
				-------------------------------------------------
					request 변수에는 HttpServletRequest] 객체의 메위주가 저장되어 있다고 가정한다.
					웹서버에서 pwd 이란 파라미터명에 대응하는 "123" 을 꺼낼려면 아래처럼 코딩한다.
				-------------------------------------------------
				String pwd = request.getParameter( "pwd" );
				-------------------------------------------------
					request 변수에는 HttpServletRequest] 객체의 메위주가 저장되어 있다고 가정한다.
					
				------------------------------------------------------------------
				<예>
				------------------------------------------------------------------
				<input type="radio" name="addr" value="서울">서울
				<input type="radio" name="addr" value="경기">경기
				<input type="radio" name="addr" value="인천">인천
				<input type="radio" name="addr" value="기타">기타
				------------------------------------------------------------------
				위의 html 소스의 웹화면 실행결과물에서 서울 를 체크한 상태에서
				특정 웹서버에 접속하면
				이때 웹서버로 전달되는 요청메시지안의 파라미터명과 파라미터값은 아래 처럼 저장되어 있다.
					"addr=서울"
				위에서 addr 은 파라미터명이 되고 "서울" 는 파라미터값이된다.
				즉 addr 이란 파라미터명에는  "서울" 가 대응되는 셈이다.
				웹서버에서 addr 이란 파라미터명에 대응하는 파라미터값 "서울" 을 꺼낼려면
				아래처럼 코딩한다.
					-------------------------------------------------
					String addr = request.getParameter( "addr" );
					-------------------------------------------------
						request 변수에는 HttpServletRequest] 객체의 메위주가 저장되어 있다고 가정한다.

		---------------------------------
		String[] getParameterValues("파라미터명")
		---------------------------------
			[요청 메세지] 안의 파라미터명에 대응하는 파라미터값을 String[] 형으로 리턴한다.
			주로 checkbox 에서 체크된 데이터를 받아올 때 사용하는 메소드이다.
			checkbox 입력 양식이 2개 이상 있을 경우 name 값이 동일하고 value 값이 다르다.
			------------------------------------------------------------------
			<예>
			------------------------------------------------------------------
			<input type="checkbox" name="skill" value="JSP">JSP
			<input type="checkbox" name="skill" value="ASP">ASP
			<input type="checkbox" name="skill" value="PHP">PHP
			------------------------------------------------------------------
				위의 html 소스의 웹 화면 실행 결과물에서 JSP를 체크, ASP를 체크한 상태에서
				특정 웹 서버에 접속하면
				이때 웹 서버로 전달되는 요청 메세지 안의 파라미터명과 파라미터값은 아래처럼 저장되어 있다.
					"skill=JSP&skill=ASP"
				위에서 skill은 파라미터명이 되고 JSP나 ASP는 파라미터값이 된다.
				즉 skill이란 파라미터명에는 두개의 파라미터값 JSP,ASP 가 대응되는 셈이다.
				웹서버에서 skill이란 파라미터명에 대응하는 두개의 파라미터값 JSP, ASP를 꺼내려면
				아래처럼 코딩한다.
				------------------------------------------------------------------
				String[] skills = request.getParameterValues( "skill" );
				------------------------------------------------------------------
					request 변수에는 httpServletRequest 객체의 메위주가 저장되어 있다고 가정한다.
					결국 배열변수 skills[0] 에 저장된 데이터는 "JSP" 이다.
					결국 배열변수 skills[1] 에 저장된 데이터는 "ASP" 이다.
			------------------------------------------------------------------
			아이디 : <input type="text" name="uid">
			암  호 : <input type="password" name="pwd">

			<input type="checkbox" name="skill" value="JSP">JSP
			<input type="checkbox" name="skill" value="ASP">ASP
			<input type="checkbox" name="skill" value="PHP">PHP

			<input type="radio" name="addr" value="서울">서울
			<input type="radio" name="addr" value="경기">경기
			<input type="radio" name="addr" value="인천">인천
			<input type="radio" name="addr" value="기타">기타
			------------------------------------------------------------------

		---------------------------------
		void setAttribute("키값문자열", 저장객체)
		---------------------------------
			[키값문자열]에 [저장객체]를 연결하여 저장한다. HashMap 객체와 동일한 역할을 한다.
			매개변수로 전달되는 저장객체는 주로 DB 연동 결과물이다.
			================================================================================
			SQL 구문의 종류               SQL 구문 실행결과(=DB 연동 결과물)를 저장하는 자바 객체 자료형
			================================================================================
			insert,update,delete           정수
			--------------------------------------------------------------------------------
			1행 1열 검색 select            정수 또는 실수 또는 String
			--------------------------------------------------------------------------------
			1행 n열 검색 select            HashMap 객체
			--------------------------------------------------------------------------------
			n행 1열 검색 select            ArrayList, LinkedList, 배열 객체
			--------------------------------------------------------------------------------
			n행 m열 검색 select            List<Map<String,String>> 객체
			================================================================================
			
			------------------------------------------------------------------
			<예> insert 구문의 실행 결과를 setAttribute 메소드로 저장하기
			------------------------------------------------------------------
				insert 구문
					insert into dept values(50,'기획부','서울');

				insert 구문의 실행 결과가 저장되는 변수 
					int deptInsertCnt = ~;

				setAttribute 메소드 호출 코딩
					request.setAttribute( "deptInsertCnt", deptInsertCnt );

			------------------------------------------------------------------
			<예> update 구문의 실행 결과를 setAttribute 메소드로 저장하기
			------------------------------------------------------------------
				update 구문
					update dept set loc='부산' where dep_no=50; 

				update 구문의 실행 결과가 저장되는 변수 
					int deptUpCnt = ~;

				setAttribute 메소드 호출 코딩
					request.setAttribute( "deptUpCnt", deptUpCnt );
			
			------------------------------------------------------------------
			<예> 1행1열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
			------------------------------------------------------------------
				select 구문
					select count(*) from employee where salary>=4000; 

				select 구문의 실행 결과가 저장되는 변수 
					String depName = ~;

				setAttribute 메소드 호출 코딩
					request.setAttribute( "depName", depName );

			------------------------------------------------------------------
			<예> 1행1열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
			------------------------------------------------------------------
				select 구문
					select avg(salary) from employee; 

				select 구문의 실행 결과가 저장되는 변수 
					double avgSalary = ~;

				setAttribute 메소드 호출 코딩
					request.setAttribute( "avgSalary", avgSalary );
			
			------------------------------------------------------------------
			<예> 1행n열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
			------------------------------------------------------------------
				select 구문
					select emp_no, emp_name, salary from employee where emp_no=3;

				select 구문의 실행 결과가 저장되는 변수 
					HashMap employee = ~;
					HashMap empMap= ~;

				setAttribute 메소드 호출 코딩
					request.setAttribute( "employee", employee );
					request.setAttribute( "empMap", empMap );
			
			------------------------------------------------------------------
			<예> n행1열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
			------------------------------------------------------------------
				select 구문
					select emp_name from employee where jikup='과장';

				select 구문의 실행 결과가 저장되는 변수 
					ArrayList empNames= ~;
					ArrayList empNameList= ~;

				setAttribute 메소드 호출 코딩
					request.setAttribute( "empNames", empNames );
					request.setAttribute( "empNameList", empNameList );

			------------------------------------------------------------------
			<예> n행m열 검색 select 구문의 실행 결과를 setAttribute 메소드로 저장하기
			------------------------------------------------------------------
				select 구문
					select 
						e.emp_no, e.emp_name, d.dep_name;
					from
						employee e, dept d
					where
						e.dep_no = d.dep_no and e.salary>=3000;

				select 구문의 실행 결과가 저장되는 변수 
					List<Map<String,String>> empList= ~;

				setAttribute 메소드 호출 코딩
					request.setAttribute( "empList", empList );

		---------------------------------
		Object getAttribute("키값문자열")
		---------------------------------
			setAttribute("키값문자열", 저장객체)로 저장된 [저장객체]를 Object 타입으로 리턴한다.
			setAttribute("키값문자열", 저장객체)로 저장된 [저장객체]가 뭔지 모르는 상태에서
			getAttriobute 로 꺼냈을 때 리턴 자료형을 무엇으로 써야되는 지의 문제는 Object 타입으로 해결된다.
			모든 클래스 최상위 조상은 바로 Object 클래스이기 때문이다.
			<주의> getAttribute("empList") 에서 "empList" 라는 키값이 없을 경우
			       null이 리턴된다. 에러가 발생하지는 않는다.

		---------------------------------
		void removeAttribute("키값문자열")
		---------------------------------
			setAttribute("키값문자열", 저장객체)로 저장된 [저장객체]를 삭제한다.

		---------------------------------
		HttpSession getSession()
		---------------------------------
			HttpSession 객체의 메위주를 리턴한다.
		
		---------------------------------
		Cookie[] getCookies()
		---------------------------------
			---------------------------------
			Cookie 객체가 저장된 배열 객체를 리턴한다.
			---------------------------------
			Cookie 객체란?
			---------------------------------
				웹브라우저가 웹서버에게 보낸 [요청 메세지] 안에 저장된 쿠키값을 관리하는 객체이다.
				1개의 쿠키값을 1개의 Cookie 객체가 관리한다.
		
		---------------------------------
		StringBuffer getRequestURL( ) 
		---------------------------------
			------------------------------------------------------------------
			웹브라우저가 웹서버에 접속할 때 사용한 자원의 풀 주소 StringBuffer 형으로 리턴한다.
			즉 아래 같은 웹서버 자원을 찾기 위한 전체 주소
			------------------------------------------------------------------
			<예> http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명  
			------------------------------------------------------------------
			-------------------------------
			StringBuffer 객체란?
			-------------------------------
				String 객체 처럼 문자열을 관리하는 객체이다.


		---------------------------------
		String getRequestURI()
		---------------------------------
			------------------------------------------------------------------
			URL 중에 : 웹 서버 포트번호 이후의 주소를 String으로 리턴한다.
			------------------------------------------------------------------
			----------------------------------------------------------
			<예> http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명 중에
			     /웹서버의호출자원명이 바로 URI  이다
			----------------------------------------------------------
			<주의>URI 는 /  로 시작한다.
			----------------------------------------------------------

		---------------------------------
		String getContextPath()
		---------------------------------
			웹 브라우저가 접속하는 웹 서버의 [컨텍스트루트명]을 문자열로 리턴.

			컨텍스트루트명 은 프로젝트명을 의미한다.
			하나의 웹 서버 안에 2개 이상의 프로젝트가 존재 설계한다면
			아래와 같은 URL 주소로 접속해야한다.
				http://서버의도메인주소:웹서버포트번호/프로젝트명1/웹서버의호출자원명
				http://서버의도메인주소:웹서버포트번호/프로젝트명2/웹서버의호출자원명
			만약 하나의 웹 서버 안에 1개만의 프로젝트가 존재한다면
			아래와 같이 프로젝트명이 생략될 수 있다.
				http://서버의도메인주소:웹서버포트번호/웹서버의호출자원명
			이 경우 컨텍스트루트명은 없는게 아니라 / 가 된다.

		---------------------------------
		String getServerName()
		---------------------------------
			웹 서버의 도메인명을 문자열로 리턴.
			---------------------------------
			<예> http://www.naver.com 에서
			---------------------------------
				getServerName() 메소드 호출 시 www.naver.com 이 리턴된다.
		
		---------------------------------
		String getRemoteAddr()
		---------------------------------
			웹 서버에 접속한 클라이언트의 IP 주소를 문자열로 리턴
			---------------------------------
			<예> 192.168.0.123
			---------------------------------
		
		---------------------------------
		int getServerPort()
		---------------------------------
			웹 서버가 사용하는 포트 번호를 리턴. 
			---------------------------------
			<예> 80, 8080
			---------------------------------

		---------------------------------
		void setCharacterEncoding("문자셋")
		---------------------------------
			클라이언트가 전송한 [파라미터값]의 현재 인코딩 방식을 설정한다.
			즉 무슨 인코딩 방식으로 인코딩 했는지 설정을 해줘야 디코딩을 해서 원래 문자열로 복원할 수 있다.
			---------------------------------
			<예> request.setCharacterEncoding("UTF-8");
			---------------------------------
				웹 서버야 클라이언트가 보낸 파라미터값은 UTF-8 이라는 인코딩 기법으로 부호화 했단다.
				디코딩으로 원래 문자열로 복원할 때 참고해서 디코딩해다오.
				이 설정을 안하면 디코딩할 때 한글 같은 경우는 깨져서 복원되기도 한다.
				<참고> Spring MVC 에서는 이 메소드를 호출하지 않는다. 개발자가 간단히 설정만 해주면
					Spring framework가 알아서 해준다.
					Model1 또는 Model2 방식의 개발에서는 반드시 개발자가 코딩해서 호출 해야하는 메소드이다.



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<6> [웹 서버]가 [웹 브라우저]로 보내는 [응답메세지]를 관리하는 것은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	[HttpServletResponse] 객체이다. 웹 서버에 지원해주는 객체이다.
	------------------------------------------------------------------
	[HttpServletResponse] 객체 메소드
	------------------------------------------------------------------
		---------------------------------
		void sendRedirect("URL 주소")
		---------------------------------
			클라이언트의 웹 브라우저에게 지정한 URL 페이지로 이동을 요청한다
			sendRedirect 메소드가 호출되면 [응답메세지]에 301이란 상태정보가 저장되고
			이 [응답메세지]를 받은 웹 브라우저는 바로 매개변수로 전해준 URL 주소로 웹 서버에 재접속한다.
			<주의> 이 때 웹 브라우저는 먼저 [응답메세지] 안의 HTML 소스를 모두 실행한 후 이 URL 주소로 웹 서버에 재접속한다.

		---------------------------------
		void setContentType( type )
		---------------------------------
			[응답메세지]에 저장할 [HTML 소스]의 [문서종류], [문자셋]을 지정한다.
			<예> response.setContentType("text/html;charset=UTF-8");
			<참고> Spring MVC 패턴 사용 시 개발자가 호출하지 않아도 spring 쪽에서 알아서 세팅해준다.

		---------------------------------
		void addCookie( Cookie cookie )
		---------------------------------
			매개변수로 전해준 Cookie 객체가 소유한 [쿠키명]과 [쿠키값]을 [응답메세지]에 저장한다.
			추후 [응답메세지]를 받은 웹 브라우저는 이 [쿠키명]과 [쿠키값]을 클라이언트 쪽에 파일로 저장한다.



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<7> 임은지 씨가 네이버의 [웹 서버]에 접속해서 로그인을 했다.
    갑자기 백신 생각이 나서 백신 접종 사이트로 이동해서 접종 예약을 했다.
    다시 네이버로 접속했더니 로그인 상태였다.
    어떻게 네이버 웹 서버 내가 재 접속한 것을 알고 로그인 상태를 유지하고 있을까?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	[웹 브라우저]와 [웹 서버]의 [연결 상태]를 관리하는 객체 때문이다.
	------------------------------------------------------------------
	[HttpSession] 객체이다. 웹 서버에 지원해주는 객체이다.
	------------------------------------------------------------------
	<참고> [웹 브라우저]와 [웹 서버]의 [연결 상태]를 세션(=Session)이라고 부른다.
	------------------------------------------------------------------
	[웹 브라우저]와 [웹 서버]의 [연결 상태]를 관리하는 원리
	------------------------------------------------------------------
		------------------------------------------------------------------
		<1> [클라이언트]가 종료된 [웹브라우저]를 실행 한 후 URL 을 입력하고 [웹서버]에 접속한다.
		------------------------------------------------------------------
		<2> [웹서버]가 [HttpSession 객체]를 생성한다. [HttpSession 객체]는 [고유 아이디]를 가지고 있다.
		    개발자 코딩에 의해 HttpSession 객체에 원하는 데이터를 저장한다.
		------------------------------------------------------------------
		<3> [웹서버]가 [응답 메시지]를 전송한다. 
		    이때 [응답메시지]에는 [HttpSession 객체]의 [고유 아이디]가 쿠키로 저장되어 있다.
		------------------------------------------------------------------
		<4> [웹브라우저]가 [응답메시지] 받고 [응답메시지]안의 [고유 아이디]가 저장된 쿠키를 꺼내서 웹브라우저의 메모리 공간에 저장시킨다.
		    원래 쿠키값은 파일로 저장되는데 [고유 아이디]가 저장된 쿠키는 웹브라우저의 메모리 공간에 저장된다.
		    메모리 공간에 저장된다는 말은 웹 브라우저가 종료되면 이 쿠키값도 삭제된다는 의미이다.
		------------------------------------------------------------------
		<5> [클라이언트]의 [웹 브라우저]가 URL을 입력하고 [요청 메세지]를 가지고 [웹 서버]에 재접속한다.
		    이 때 [요청 메세지]에는 쿠키로 저장된 [고유 아이디]가 들어 있다.
		    만약 [요청 메세지]에 쿠키로 저장된 [고유 아이디]가 없다면 <2> 절차가 시행된다.
		    만약 [웹 서버] 안의 [고유 아이디]를 가진 HttpSession 객체가 없다면 <2> 절차가 시행된다.
		    만약 [웹 서버] 안의 [고유 아이디]를 가진 HttpSession 객체가 수명이 다해서 제거된다면 <2> 절차가 시행된다.
		    HttpSession 객체의 수명은 코딩에 의해 설정된다.
		------------------------------------------------------------------
		<6> [웹 서버]는 [요청 메세지] 안의 [고유 아이디] 쿠키값을 꺼내어
		    이 [고유 아이디]를 가진 HttpSession 객체를 찾아 대응시킨다.
		    HttpSession 객체에서 아까 접속 시 저장된 데이터를 꺼내서 어떤 작업을 한다.
		------------------------------------------------------------------

	------------------------------------------------------------------
	[HttpSession] 객체 메소드
	------------------------------------------------------------------
		---------------------------------
		void setAttribute("키값 문자열", 저장객체)
		---------------------------------
			[키값문자열]에 [저장객체]를 연결하여 저장한다.
			HttpServletRequest 객체의 setAttribute 메소드와 동일한 기능을 가진다.
			주로 DB 연동 결과물을 저장한다.
			주로 추후 재 접속 시 사용할 데이터를 저장할 때 호출하는 메소드이다.
			<예> 로그인이 성공하면 아이디 문자열을 setAttribute 를 사용하여 다음처럼 저장한다.
			     session.setAttribute("login_id","abc")

		---------------------------------
		Object getAttribute("키값 문자열")
		---------------------------------
			setAttribute("키값문자열",저장객체) 메소드 호출로 저장된 객체를 꺼낼 때 호출하는 메소드이다.
			HttpServletRequest 객체의 getAttribute 메소드와 동일한 기능을 한다.

		---------------------------------
		void removeAttribute("키값 문자열")
		---------------------------------
			setAttribute("키값문자열",저장객체) 메소드 호출로 저장된 객체를 삭제하는 메소드이다.

		---------------------------------
		void setMaxInactiveInterval(int second)
		---------------------------------
			클라이언트의 재 접속이 없을 때 HttpSession 객체의 존재 수명을 초단위로 설정. 기본값은 30분
		
		---------------------------------
		String getId()
		---------------------------------
			HttpSession 객체에 부여된 [고유 아이디]를 반환한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<8> Model1 패턴으로 개발된 프로젝트에서 [웹 브라우저]와 [웹 서버]의 통신 과정 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	(1) 클라이언트의 웹 브라우저에서 http://~/xxx.jsp 형태의 [URL 주소]로 웹 서버에 접속한다. xxx는 임의의 영단어 이다.
	------------------------------------------------------------------
	(2) [웹 서버]가 HttpServletRequest, HttpServletResponse, HttpSession 객체를 생성한다.
	------------------------------------------------------------------
		재 접속이라면 HttpSession 객체가 생성 안될 수 있다.
	------------------------------------------------------------------
	(3) [웹 서버]에서 [URL 주소]에 있는 xxx.jsp 파일을 호출하여 xxx.jsp 파일 안에서 필요에 따라 아래와 같은 일들을 진행한다.
	------------------------------------------------------------------
		[요청메세지] 안의 파라미터값 또는 쿠키값을 꺼내어 DB연동을 하고 결과물을 꺼내어 문자열로 표현하여 HTML 태그 사이에 삽입한다.
		HttpSession 객체에 이전 접속 시 저장한 데이터가 있으면 꺼내서 원하는 작업을 한다.
		클라이언트에게 보낼 쿠키명과 쿠키값을 Cookie 객체에 저장하고 Cookie 객체를 HttpServletResponse 객체에 저장한다.
		------------------------------------------------------------------
		<참고> DB연동은 jsp 파일 안에서 하지 않고 [DB 연동 자바 객체 (=DAO 객체)]에 넘길 수도 있다.
		------------------------------------------------------------------
		<참고> DAO(=Data Access Object)
		------------------------------------------------------------------
			DB 연동 기능의 메소드를 가진 자바 객체를 지칭한다.
		------------------------------------------------------------------
		<참고> DTO(=Data Transfer Object)
		------------------------------------------------------------------
			DB 연동 시 사용되는 다량의 데이터를 관리하는 자바 객체이다.
			private 리턴형 xxx; public void setXxx(~){~}; public 리턴형 getXxx(){~}; 가 한쌍으로 n개 쌍이 존재한다.
			Spring MVC 패턴 개발에서는 아주 중요한 역할을 한다.
	------------------------------------------------------------------
	(4) [웹서버]가 [응답 메시지] 준비한다.
	------------------------------------------------------------------
		xxx.jsp 파일을 호출의 실행 결과인 [HTML 소스]를 [응답 메시지]에 저장한다.
		HttpServletResponse 객체가 소유한 Cookie 객체에서 [쿠키명과 쿠키값]을 꺼내어 [응답 메시지]에 저장한다.
		자원의 호출 성공 여부를 저장한다. 웹브라우저의 [재 접속 여부]를 저장한다.
		기타 데이터를 응답 메시지에 저장한다.
	------------------------------------------------------------------
	(5) [웹서버]가 웹브라우저에게 [응답 메시지]를 전송한다.
	------------------------------------------------------------------
	------------------------------------------------------------------
	(6) 클라이언트의 웹브라우저에서 HTML 소스가 실행되어 웹화면에 결과를 본다.
	------------------------------------------------------------------
		만약 자원의 호출 성공 여부가 부정적이라면 에러페이지가 실행된다.
		만약 [재 접속 여부]가 있다면 웹서버에 접속을 시도한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<9> Model2 패턴으로 개발된 프로젝트에서 [웹 브라우저]와 [웹 서버]의 통신 과정 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	(1) 클라이언트의 웹 브라우저에서 http://~/xxx.do 형태의 [URL 주소]로 웹서버에 접속한다.
	------------------------------------------------------------------
		<참고> 자원명인 xxx.do 는 실존하지 않는 가짜 자원명으로 xxx, xxx.html, xxx.action 등으로 표기할 수 있다.
	------------------------------------------------------------------
	(2) [웹 서버]가 HttpServletRequest, HttpServletResponse, HttpSession 객체를 생성한다.
	------------------------------------------------------------------
		재 접속이라면 HttpSession 객체가 생성 안될수 있다.
	------------------------------------------------------------------
	(3) [웹서버]가 [Servlet 객체]의
	    doGet(HttpServletRequest request, HttpServletRespose respose) 메소드
	    또는
	    doPost(HttpServletRequest request, HttpServletRespose respose) 메소드
	    를 호출해서 아래 코딩이 실행된다.
	------------------------------------------------------------------
		------------------------------------------------------------------
		① [URL 주소]에 대응하는 자바 객체(=JavaBean)의 특정 메소드 호출하여 아래 일들을 하고 JSP 페이지명 (=xxx.jsp)를 받는다.
		------------------------------------------------------------------
			요청메세지 안의 파라미터값 또는 쿠키값을 꺼내어 DB연동을 하고
			DB연동 결과물을 HttpServletRequest 객체 또는 HttpSession 객체에 저장한다.
			HttpSession 객체에 이전 접속시 저장한 데이터가 있으면 꺼내서 원하는 작업을 한다.
			클라이언트에게 보낼 쿠키명과 쿠키값을 Cookie 객체에 저장하고 Cookie 객체 HttpServletResponse 객체에 저장한다.
		------------------------------------------------------------------
		② 리턴받은 문자열 "xxx.jsp" 파일을 찾아서 호출하여 xxx.jsp 파일 안에서 아래와 같은 일을 진행한다.
		------------------------------------------------------------------
			HttpServletRequest 또는 HttpSession 객체에서 DB 연동 결과물을 꺼내어 문자열로 표현하여 HTML 태그 사이에 삽입한다.
			이때 DB 연동 결과물을 꺼내어 문자열로 표현할 때 [자바]를 쓰거나 [커스텀 태그]와 [EL] 을 사용한다.
			[자바]를 쓰면 html 과 자바코드가 섞여있어 유지 보수가 힘들고 하나라도 에러가 발생하면 화면 전체가 출력되지 않는다
			[커스텀 태그]와 [EL] 을 사용하면 에러가 발생하면 에러난 부분만 출력안되고 나머지는 모두 출력된다
			------------------------------------------------------------------
			<예> uid 라는 파라미터명에 해당하는 파라미터값을 꺼내서 div 태그 사이에 삽입하기
			------------------------------------------------------------------
				---------------------------------
				자바 코드를 쓰는 경우
				---------------------------------
					<div> <%out.print( request.getParameter("uid") );%> </div>
				---------------------------------
				EL 을 사용 경우
				---------------------------------
					<예> <div> ${param.uid} </div>
	
	------------------------------------------------------------------
	(4) [웹서버]가 [응답 메시지] 준비한다.
	------------------------------------------------------------------

	------------------------------------------------------------------
	(5) [웹서버]가 웹브라우저에게 [응답 메시지]를 전송한다.
	------------------------------------------------------------------

	------------------------------------------------------------------
	(6) 클라이언트의 웹브라우저에서 HTML 소스가 실행되어 웹화면에 결과를 본다.
	------------------------------------------------------------------
		만약 자원의 호출 성공 여부가 부정적이라면 에러페이지가 실행된다.
		만약 [재 접속 여부]가 있다면 웹서버에 접속을 시도한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<10> 현재 대기업이나 공기업 프로젝트에서 제일 많이 사용하는
     Spring MVC 패턴으로 개발된 프로젝트에서 [웹브라우저]와 [웹서버]의 통신 과정
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------------------------------
	(1) 클라이언트의 웹브라우저에서 http://~/xxx.do 형태의 [URL 주소]로 웹서버에 접속한다.
	------------------------------------------------------------------
		<참고> 자원명인 xxx.do 는 실존하지 않는 가짜 자원명으로 xxx , xxx.html , xxx.action  등으로 표기 할수 있다.
	------------------------------------------------------------------
	(2) [웹서버]가 HttpServletRequest, HttpServletRespose, HttpSession 객체를 생성한다.
	------------------------------------------------------------------
	(3) [웹 서버]가 Spring이 제공하는 DispatcherServlet 객체에 접속한다.
	------------------------------------------------------------------
	(4) @Controller 어노테이션이 붙은 객체 안의 @RequestMapping("/xxx.do")가 붙은 메소드 xxx1을 호출하고 ModelAndView 객체를 리턴한다.
	------------------------------------------------------------------
		------------------------------------------------------------------
		@RequestMapping("/xxx.do") 가 붙은 메소드 안에서 일어나는 일
		------------------------------------------------------------------
			------------------------------------------------------------------
			@Service 와 @Transactional 어노테이션이 붙은 객체 안의 xxx2 메소드를 호출하여 DB 연동 결과물을 얻어
			ModelAndView 객체 또는 HttpSession 객체에 저장한다.
			ModelAndView 객체에 저장된 객체는 HttpServletRequest 객체에 저장된다.
			xxx2 메소드를 호출 시 파라미터값 또는 쿠키값이 xxx2 메소드 쪽으로 전달된다.
			------------------------------------------------------------------
			만약 재 접속이라면 이전 접속 시 HttpSession 객체에 저장된 인증 데이터를 꺼내어 원하는 작업을 한다.
			------------------------------------------------------------------
			만약 클라이언트에게 보낼 쿠키가 있다면 쿠키명과 쿠키값을 Cookie 객체에 저장하고
			cookie 객체 HttpServletResponse 객체에 저장한다.
			------------------------------------------------------------------
			만약 업로드할 파일이 있다면 파일 업로드를 진행한다.
			------------------------------------------------------------------
			JSP 페이지명(=xxx.jsp)을 문자열로 ModelAndView 객체에 저장한다.
			------------------------------------------------------------------
			ModelAndView 객체를 리턴한다.
			------------------------------------------------------------------
		
		------------------------------------------------------------------
		@RequestMapping("/xxx.do") 가 붙은 메소드 안에서 DB 연동 시 실행과정
		------------------------------------------------------------------
			------------------------------------------------------------------
			@RequestMapping("/xxx.do") 가 붙은 xxx1 메소드				컨트롤러 클래스
			------------------------------------------------------------------
				DB 연동 지시				ModelAndView 객체에
				↓					DB 연동 지시 결과와
				↓					"xxx.jsp" 저장
				↓						↑
				↓						↑
				↓						↑
				↓					DB 연동 지시 결과
			------------------------------------------------------------------
			@Service 와 @Transactional 어노테이션이 붙은 객체 안의 xxx2 메소드	이 작업은 트랜잭션이 필요없는경우 (Select)
			------------------------------------------------------------------	에는 이 층을 삭제가능
			1개의 SQL 구문 해당	↑	1개의 SQL 구문 해당	↑		입력 수정 삭제 작업이 2개 이상인 경우 사용
			DB 연동 지시1		↑	   DB 연동 지시2	↑
				↓		↑		↓		↑
				↓		↑		↓		↑		서비스 객체(클래스)
				↓	DB 연동 지시 1 결과	↓	DB 연동 지시2 결과
			------------------------------------------------------------------
			@Repository 어노테이션이 붙은 객체의 xxx3 메소드			DAO 객체(클래스)
			------------------------------------------------------------------
			1개의 SQL 구문 해당	↑	1개의 SQL 구문 해당	↑
			DB 연동 지시1		↑	   DB 연동 지시2	↑
				↓		↑		↓		↑
				↓		↑		↓		↑
				↓	DB 연동 지시 1 결과	↓	DB 연동 지시2 결과
			------------------------------------------------------------------
			SqlSessionTemplate 객체의 메소드
			------------------------------------------------------------------
			1개의 SQL 구문 해당	↑	1개의 SQL 구문 해당	↑
			DB 연동 지시1		↑	   DB 연동 지시2	↑
				↓		↑		↓		↑
				↓		↑		↓		↑
				↓	DB 연동 지시 1 결과	↓	DB 연동 지시2 결과
			------------------------------------------------------------------
			Connection, ResultSet, PreparedStatement 객체(=JDBC 객체들)
			------------------------------------------------------------------
			1개의 SQL 구문 해당	↑	1개의 SQL 구문 해당	↑
			DB 연동 1		↑	   DB 연동2		↑
				↓		↑		↓		↑
				↓		↑		↓		↑
				↓	DB 연동1 결과		↓	DB 연동2 결과
			------------------------------------------------------------------
			Oracle DB
			------------------------------------------------------------------
	------------------------------------------------------------------
	(5) ModelAndView 객체에 저장된 JSP 페이지명(=xxx.jsp)에 해당하는 JSP 페이지를 호출한다.
	------------------------------------------------------------------
		---------------------------------
		JSP 페이지 안에서 일어나는 일
		---------------------------------
			------------------------------------------------------------------
			HttpSevletRequest 또는 HttpSession 객체에서 DB 연동 결과물을 꺼내어 문자열로 표현하여
			HTML 태그 또는 자바스크립트 사이에 삽입한다.
			이 때 DB 연동 결과물을 꺼내어 문자열로 표현할 때 [자바]를 쓰거나 [커스텀 태그와 EL] 을 사용한다.
			------------------------------------------------------------------
	------------------------------------------------------------------
	(6) [웹 서버]가 [응답 메세지] 준비한다.
	------------------------------------------------------------------
		xxx.jsp 파일을 호출의 실행 결과인 [HTML 소스]를 [응답 메시지]에 저장한다.
		HttpServletRespose 객체가 소유한 Cookie 객체에서 [쿠키명과 쿠키값]을 꺼내어 [응답 메시지]에 저장한다.
		자원의 호출 성공 여부를 저장한다. 웹브라우저의 [재 접속 여부]를 저장한다.
		기타 데이터를 응답 메시지에 저장한다.
	------------------------------------------------------------------
	(7) [웹 서버]가 웹 브라우저에게 [응답 메세지]를 전송한다.
	------------------------------------------------------------------
	------------------------------------------------------------------
	(8)  클라이언트의 웹 브라우저에서 HTML 소스가 실행되어 웹 화면에 결과를 본다.
	------------------------------------------------------------------
		만약 자원의 호출 성공 여부가 부정적이라면 에러페이지가 실행된다.
		만약 [재 접속 여부]가 있다면 웹 서버에 접속을 시도한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<11> 개발 연습용 차원에서 다음과 같은 조건으로 [웹 서버]와 [웹 프로그램 자원]을 구축하고 싶다.
     이 때 설치해야 할 프로그램은 ?
     ------------------------------------------------------------------
     <조건> [웹 프로그램 자원] Java, JSP, 자바스크립트
     <조건> [웹 서버] Tomcat
     <조건> [DB] Oracle
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	
	---------------------------------
	(1) Java JDK 프로그램 설치
	---------------------------------
		Java 객체가 실행되는 JVM을 제공한다.
		기본적으로 자주 사용되는 기능을 가진 클래스를 제공한다.
		컴파일을 제공한다.
	---------------------------------
	(2) 웹 서버 프로그램 Tomcat 설치
	---------------------------------
		[웹 브라우저]로 [요청 메세지] 가지고 동시에 접속하는
		다수의 클라이언트를 맞이하고 동시에 [응답 메세지]로 응답한다.
	---------------------------------
	(3) Oracle 11g 설치
	---------------------------------
		동시에 접속하는 다수의 [웹 프로그램 자원]에게
		동시에 데이터의 입력, 수정, 삭제, 검색을 하게 하고
		그 결과를 리턴한다.
		즉 데이터를 영구 저장하고 관리한다.
	---------------------------------
	(4) Spring Tool Suite(STS) 프로그램 설치
	---------------------------------
		------------------------------------------------------------------
		웹 프로그래밍 자원 (JSP, Java 등)의 코딩을 관리한다. 
		------------------------------------------------------------------
			코딩하는 공간을 제공한다.
			에러 코딩을 찾아 문제 해결방법을 제공한다.
		------------------------------------------------------------------
		웹 프로그래밍 자원 실행 과정에서 필요한 외부 프로그램을 설치/연결하여 외부 프로그램을 사용 가능케한다.
		------------------------------------------------------------------
			JDK의 JVM을 사용 가능케한다.
			maven을 연결하여 외부 라이브러리(=자바 클래스)의 다운로드/버전/관련된 라이브러리를 자동 관리 해준다.
			DB와 연결하여 입력, 수정, 삭제, 검색을 가능하게 한다.
		------------------------------------------------------------------
		웹 프로그래밍 자원 실행 과정에서 필요한 외부 라이브러리(=자바 클래스)를 설치/연결하여 외부 라이브러리를 사용 가능케한다.
		------------------------------------------------------------------
			JDK를 연결하여 JDK의 기본 라이브러리(=자바 클래스) 를 사용 가능케한다.
			maven을 연결하여 외부 라이브러리의 다운로드/버전/관련된 라이브러리를 자동 관리해준다.
		------------------------------------------------------------------
		웹서버를 관리한다.
		------------------------------------------------------------------
			웹 서버의 연결, 웹 서버 on/off 등을 할 수 있다.
		------------------------------------------------------------------
		웹 서버 기반으로 웹 프로그래밍 자원을 실행하고 결과를 자체 웹 브라우저나 도스창에 보여준다.
		------------------------------------------------------------------
		------------------------------------------------------------------
		웹 개발 후 실제 서비스 할 웹 서버로 배치할 수 있는 파일로 만들어 준다.
		------------------------------------------------------------------
		------------------------------------------------------------------
		웹 개발에 사용되는 여러 개발 플랫폼을 [project] 라는 형식으로 제공한다.
		------------------------------------------------------------------
			---------------------------------
			Dynamic Web project
			---------------------------------
				실제 서비스하는 웹 서버와 비슷한 구조로 웹 개발을 사용할 수 있게 한다.
				---------------------------------
				단점
				---------------------------------
					외부 라이브러리는 개발자 직접 다운받아 저장해야 한다.
					개발 과정에 필요한 환경 정보를 주로 Java 또는 JSP 파일 안에서 관리해야한다.
			---------------------------------
			Spring Legacy project
			---------------------------------
				Spring MVC 패턴의 웹 개발을 사용할 수 있게한다.
				maven 이 외부 라이브러리를 자동 관리해준다.
				---------------------------------
				단점
				---------------------------------
					환경 설정이 매우 방대하고 어렵다.
						maven에서 관리할 외부 라이브러리 목록 등록이 복잡하고 방대하다.
						Spring MVC 패턴에서 사용되는 객체의 정보 등록이 복잡하고 방대하다.
					외부 웹 서버(Tomcat)을 연결해서 사용 중 외부 웹 서버(Tomcat)으로 인한 오류가 많다.
			---------------------------------
			Spring Stater project
			---------------------------------
				Spring MVC 패턴의 웹 개발을 사용할 수 있게한다.
				Spring boot 라는 플랫폼을 사용할 수 있게한다.
				---------------------------------
				Spring boot 플랫폼 장점
				---------------------------------
					환경 설정이 매우 심플하고 쉽다.
						maven에서 관리할 외부 라이브러리 목록 등록이 간단하다.
						Spring MVC 패턴에서 사용되는 객체의 정보 등록이 거의 없다.
					Tomcat 서버가 내장되어 있어 Tomcat 서버를 따로 설치할 필요가 없고
					Tomcat 서버 실행 시 발생하는 오류도 적다.


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<12> 답변형 게시판에서 만들어야할 자바 클래스, JSP 페이지는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------------------------------------------------------------------------
	URL 주소		컨트롤러 클래스								JSP 페이지
	---------------------------------------------------------------------------------------------------
	/loginForm.do		LoginController 클래스의 @RequestMapping("/loginForm.do") 메소드	loginForm.jsp
	---------------------------------------------------------------------------------------------------
	/loginProc.do		LoginController 클래스의 @RequestMapping("/loginProc.do") 메소드	loginProc.jsp (with 자바코드)
	---------------------------------------------------------------------------------------------------
	/boardList.do		BoardController 클래스의 @RequestMapping("/boardList.do") 메소드	boardList.jsp
	---------------------------------------------------------------------------------------------------
	/boardContentForm.do	BoardController 클래스의 @RequestMapping("/boardContentForm.do") 메소드	boardContentForm.jsp
	---------------------------------------------------------------------------------------------------
	/boardRegForm.do	BoardController 클래스의 @RequestMapping("/boardRegForm.do") 메소드	boardRegForm.jsp
	---------------------------------------------------------------------------------------------------
	/boardRegProc.do	BoardController 클래스의 @RequestMapping("/boardRegProc.do") 메소드	boardRegProc.jsp
	---------------------------------------------------------------------------------------------------
	/boardUpDelForm.do	BoardController 클래스의 @RequestMapping("/boardUpDelForm.do") 메소드	boardUpDelForm.jsp
	---------------------------------------------------------------------------------------------------
	/boardUpDelProc.do	BoardController 클래스의 @RequestMapping("/boardUpDelProc.do") 메소드	boardUpDelProc.jsp
	---------------------------------------------------------------------------------------------------
	/logout.do		LoginController 클래스의 @RequestMapping("/logout.do") 메소드		logout.jsp
	---------------------------------------------------------------------------------------------------
	/login_alert.do		LoginController 클래스의 @RequestMapping("/login_alert.do") 메소드	login_alert.jsp
	---------------------------------------------------------------------------------------------------

	컨트롤러 클래스
		LoginController 클래스
			로그인 관련 URL 주소로 접근할 때 호출되는 메소드를 소유하고 있다.
		BoardController 클래스
			게시판 관련 URL 주소로 접근할 때 호출되는 메소드를 소유하고 있다.
	서비스 클래스
		BoardServiceImpl 클래스
	서비스 인터페이스
		BoardService 인터페이스
	DAO 클래스
		LoginDAOImpl 클래스
		BoardDAOImpl 클래스
	DAO 인터페이스
		LoginDAO 인터페이스
		BoardDAO 인터페이스
	DTO 클래스
		BoardDTO 클래스
		BoardSearchDTO 클래스























































































































































