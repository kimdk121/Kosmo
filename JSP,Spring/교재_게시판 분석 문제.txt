
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문1> 웹브라우저에서 URL 입력란에 "localhost:8081/loginForm.do" 를 입력할 때
      localhost 자리에 원래는 도메인 주소 또는 아이피 주소가 들어가야한다.
      그런데 localhost는 무슨의미 인가 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	[웹브라우저]와 [웹서버]가 동일한 운영체제가 있을 경우
	[웹브라우저]에서 [웹서버]로 접근할 때 도메인 주소 또는 아이피 주소 대신에 쓰는 URL 주소 일부이다.
	연습용/개발용 주소이다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문2> 웹브라우저에서 URL 입력란에 "localhost:8081/loginForm.do" 를 입력하면
      내 컴퓨터안의 웹서버에 접근을 한다.
      이때 호출되는 실질적인 사용자정의 자원은 뭡니까 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	------------------------------------------
	localhost:8081/loginForm.do
	------------------------------------------

	------------------------------------------------------------------------------------
	@Controller가 붙은 클래스 중에 @RequestMapping(value="/loginForm.do") 가 붙은 메소드 호출된다.
	<주의> 이 때 호출되는 메소드 이름은 상관이 없다.
	------------------------------------------------------------------------------------
		↓
	------------------------------------------------------------------------------------
	@RequestMapping(value="/loginForm.do")가 붙은 메소드에서
	리턴되는 ModelAndView 객체가 소유한 JSP 페이지명에 해당하는 JSP 파일이 호출된다.
	------------------------------------------------------------------------------------
		↓
	------------------------------------------------------------------------------------
	JSP 파일이 실행된 후 생성되는 HTML 이 [응답메세지]에 저장된다.
	이 HTML 파일에 경우에 따라 [DB연동 결과물]이 삽입되어 있다.
	loginForm.jsp에는 DB 연동 결과물이 없다. 왜? 로그인 화면은 누구나 접근이 가능하기 때문이다.
	<참고> 관용적으로 URL 주소가 xxx.do 라면 호출되는 JSP 페이지는 xxx.jsp 이다.
	------------------------------------------------------------------------------------
		↓
	------------------------------------------------------------------------------------
	[응답메세지] 가 웹브라우저로 전달되고 웹 브라우저가 [응답메세지]안의 HTML 을 실행하여 웹브라우저 화면에 출력한다.
	------------------------------------------------------------------------------------


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문3> 웹브라우저에서 웹서버로 접속할 때 웹서버가 기본적으로 생성해 주는 중요한 객체 3개를 써라 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	
	---------------------------------------------
	HttpServletRequest 객체
	---------------------------------------------
		역할	 => 파라미터값을 리턴, JSP 페이지에서 꺼내볼 데이터를 저장/리턴/삭제.
		생명주기 => 웹브라우저에서 웹서버로 접속할 때 생성되고, 응답메세지를 보내고 난후 제거.
			    웹브라우저에서 웹서버로 접속할 때 생성되고, JSP 페이지 실행 이후 제거.

	---------------------------------------------
	HttpServletResponse 객체
	---------------------------------------------
		역할	 => 응답 메세지를 관리한다. 쿠키명-쿠키값을 응답메세지에 저장. 기타 등등
		생명주기 => 웹브라우저에서 웹서버로 접속할 때 생성되고, 응답메세지를 보내고 난후 제거.
			    웹브라우저에서 웹서버로 접속할 때 생성되고, JSP 페이지 실행 이후 제거.

	---------------------------------------------
	HttpSession 객체
	---------------------------------------------
		역할	 => 재접속할 때 꺼내보고 싶은 데이터를 저장한다.
		생명주기 => 웹브라우저에서 웹서버로 접속할 때 생성되고,
			    처음 접속해서 생성된 HttpSession 객체가 가진
			    고유 아이디를 서로 나누어 가진 이후
			    고유 아이디를 웹브라우저가 잃어버렸거나
			    고유 아이디를 가진 HttpSession 객체가 코딩에 의해 제거됐을때
			    설정한 생명 주기를 다했을 때
			    서로 만나지 못할 경우 제거 됐다고 본다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문4> @Controller 가 붙은 클래스 내부의 @RequestMapping 붙은 메소드가 리턴하는
      ModelAndView 객체의 역할은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	호출할 JSP 페이지명이 저장되어 있다.
	호출되는 JSP 페이지에서 꺼내볼 데이터가 저장되어 있다.
	이 데이터는 대부분 DB 연동 결과물이다.
	------------------------------------------------------------------------------------
	ModelAndView 객체 생성방법, JSP 페이지명 저장방법, JSP 페이지 꺼내볼 데이터 저장방법
	------------------------------------------------------------------------------------
		ModelAndView mav = new ModelAndView();
		mav.setViewName("호출할 JSP 페이지명");
		mav.addObject(호출할 JSP 페이지에서 꺼내볼 데이터);
	------------------------------------------------------------------------------------
	호출되는 JSP 페이지에 ModelAndView 객체에 저장된 데이터를 꺼낼 때 쓰는 EL 문법 형식
	------------------------------------------------------------------------------------
		${requestScope.키값명}

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문5> SqlSessionTemplate 객체의 메소드 정리 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	--------------------------
	테이블에 데이터 입력시
	--------------------------
	int insert(
		"namespace속성값.namespace속성을가진mapper태그내부의id값"	// insert 구문의 위치
		, insert 구문에 참여할 데이터
	)
	--------------------------
	테이블에 데이터 수정 시
	--------------------------
	int update(
		"namespace속성값.namespace속성을가진mapper태그내부의id값"	// update 구문의 위치
		, update 구문에 참여할 데이터
	)
	--------------------------
	테이블에 행 삭제 시
	--------------------------
	int delete(
		"namespace속성값.namespace속성을가진mapper태그내부의id값"	// delete 구문의 위치
		, delete 구문에 참여할 데이터
	)
	--------------------------
	1행 m열 검색 결과 얻을 때
	--------------------------
							자료형은 mapper_login에 resultType으로 결정됨
	String|int|double|DTO클래스명|Map<String,String>	selectOne(
		"namespace속성값.namespace속성을가진mapper태그내부의id값"	// select 구문의 위치
		, select 구문에 참여할 데이터
	)
	--------------------------
	n행 m열 검색 결과 얻을 때
	--------------------------
	List<DTO클래스명>|List<Map<String,String>>	selectList(
		"namespace속성값.namespace속성을가진mapper태그내부의id값"	// select 구문의 위치
		, select 구문에 참여할 데이터
	)

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문6> 자바스크립트에서 비동기 방식으로 웹서버와 통신 한 후 응답받는 데이터를 현 화면에 반영하거나
      응답 받은 데이터를 가지고 다양한 작업을 하고 싶다.
      자바스크립트에서 비동기 방식으로 웹서버와 통신하는 코딩 패턴은 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	--------------------------
	파일 업로드가 없는 경우
	--------------------------
	// alert ($("[name=폼태그 ]
	$.ajax({
		// --------------------------
		// 서버 쪽 호출 URL 주소 지정
		// --------------------------
		url : "서버 쪽 호출 URL 주소"
		// --------------------------
		// form 태그 안의 입력양식 데이터 즉, 파라미터값을 보내는 방법 지정
		// --------------------------
		, type : "post" 또는 "get"
		// --------------------------
		// 서버로 보낼 파라미터명과 파라미터값을 문자열로 설정
		// --------------------------
		, data : $("[name=폼태그name값]").serialize()
		// --------------------------
		// 서버의 응답을 성공적으로 받았을 경우 실행할 익명함수 설정
		// --------------------------
		, success : function(응답 HTML 문자열 저장 매개변수명 또는 DB연동 결과물 데이터 저장 매개변수명) {
			응답 HTML 문자열 저장 매개변수에서 원하는 데이터 꺼내서 현 화면에 반영하기
			또는
			DB 연동 결과물을 가지고 원하는 작업하기
		}
		// --------------------------
		// 서버의 응답을 
		// --------------------------
		, .error : function() {
			경고 창 띄우기
		}
	});

	--------------------------
	파일 업로드가 있는 경우
	--------------------------
	// --------------------------
	// form 태그에 파일업로드 전송 관련 설정하기
	// --------------------------
	document.폼태그name값.enctype="multipart/form-data"

	$.ajax({
		// --------------------------
		// 서버 쪽 호출 URL 주소 지정
		// --------------------------
		url : "서버 쪽 호출 URL 주소"
		// --------------------------
		// form 태그 안의 입력양식 데이터 즉, 파라미터값을 보내는 방법 지정
		// --------------------------
		, type : "post" 또는 "get"
		// --------------------------
		// 파일업로드를 위한 설정
		// --------------------------
		

		// --------------------------
		// 서버의 응답을 성공적으로 받았을 경우 실행할 익명함수 설정
		// --------------------------
		, success : function(응답 HTML 문자열 저장 매개변수명 또는 DB연동 결과물 데이터 저장 매개변수명) {
			응답 HTML 문자열 저장 매개변수에서 원하는 데이터 꺼내서 현 화면에 반영하기
			또는
			DB 연동 결과물을 가지고 원하는 작업하기
		}
		// --------------------------
		// 서버의 응답을 
		// --------------------------
		, .error : function() {
			경고 창 띄우기
		}
	});

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문7> 자바스크립트에서 document.폼태그 name값.submit(); 코딩의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	document.폼태그name값.submit(); 이 코딩이 있다면 아래의 HTML 코딩이 존재한다는 말이다.
	----------------------------------------------------
	<form name="xxx" action="서버의 URL주소" ~>
		입력양식 태그
	</form>
	----------------------------------------------------
	document.폼태그name값.submit();	이 코딩이 실행되면 "서버의 URL주소" 로 접근하는데
	입력 양식의 태그의 name값과 value 값을 가지고 get 또는 post 방식으로 서버에 접근한다는 의미이다.
	웹서버가 보낸 응답메세지 안의 HTML을 실행하게 됨으로
	현 화면이 다른 화면으로 바뀌게 된다.
	즉 동기 방식으로 웹서버에 접근하게 된다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문8> 자바스크립트에서 location.replace("서버의 URL주소"); 코딩의 의미는 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	웹서버에 get 방식으로 "서버의 URL주소" 로 접근한다는 의미이다.
	그러면 웹서버는 응답메세지를 보낼 것이고
	응답메세지 안의 HTML 코딩을 실행하여 현 화면이 다른 화면으로 바뀌게 된다.
	즉 동기 방식으로 웹서버에 접근하게 된다.
	----------------------------------------------------
	location.replace("도메인주소");
	----------------------------------------------------
		get 방식으로 "도메인주소"로 접근한다는 의미이다.
		파라미터명과 파라미터값이 없는 경우 이다. 
	----------------------------------------------------
	location.replace("도메인주소?aaa=bbb&ccc=ddd");
	----------------------------------------------------
		get 방식으로 "도메인주소"로 접근한다는 의미이다.
		파라미터명은 aaa, ccc 파라미터값은 "bbb", "ddd" 이다.
		<예>
		location.replace("/naver/boardContentForm.do?b_no=3");

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문9> JSP 페이지	${requestScope.xxx}	코딩이 있으면 어떻게 분석하나 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	
	HttpServletRequest 객체에 "xxx" 키값으로 저장된 놈이 있는지 찾는다.
		
		있으면
			"xxx" 키값으로 저장된 놈을 꺼내서 표현한다.
		없으면
			아무것도 표현하지 않는다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문10> JSP 페이지	${sessionScope.xxx}	코딩이 있으면 어떻게 분석하나 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	HttpSession 객체에 "xxx" 키값으로 저장된 놈이 있는지 먼저 찾는다.
	
		있으면 
			"xxx" 키값으로 저장된 놈을 꺼내서 표현한다.
		없으면 
			아무것도 표현하지 않는다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문11> JSP 페이지	${xxx}	코딩이 있으면 어떻게 분석하나 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	HttpSession 객체에 "xxx" 키값으로 저장된 놈이 있는지 먼저 찾는다.
	
		있으면 
			"xxx" 키값으로 저장된 놈을 꺼내서 표현한다.
		없으면 
	
	HttpServletRequest 객체에 "xxx" 키값으로 저장된 놈이 있는지 찾는다.
		
		있으면
			"xxx" 키값으로 저장된 놈을 꺼내서 표현한다.
		없으면
			아무것도 표현하지 않는다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문12> JSP 페이지에서	${requestScope.xxx.name}	코딩이 있으면 어떻게 분석하나 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	----------------------------------------------------
	HashMap 객체에 데이터 저장한 후
	HttpServletRequest 객체에 HashMap 객체 저장한 경우
	----------------------------------------------------
	Map xxx = new HashMap<String,String>();
	xxx.push("name","이성우");		// name 이란 속성변수에 "이성우" 저장하기
	xxx.push("age","23");			// age 란 속성변수에 "23" 저장하기
	request.setAttribute("xxx",xxx);

	----------------------------------------------------
	HashMap 객체에 데이터 저장한 후
	ModelAndView 객체에 HashMap 객체 저장한 경우
	----------------------------------------------------
	Map xxx = new HashMap<String,String>();
	xxx.push("name","이성우");		// name 이란 속성변수에 "이성우" 저장하기
	xxx.push("age","23");			// age 란 속성변수에 "23" 저장하기
	ModelAndView mav = new ModelAndView();
	mav.setViewName("호출할 JSP 페이지명");
	mav.addObject("xxx",xxx);
	----------------------------------------------------
	위 두 경우에 "xxx" 라는 키값으로 저장된 HashMap 객체 안의 "name" 키값의 "이성우"를
	JSP 페이지 꺼내서 표현할 때 아래처럼 한다.
	----------------------------------------------------
	${requestScope.xxx.name}
	----------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문13> JSP 페이지에서    ${sessionScope.xxx.name}    코딩이 있으면 어떻게 분석하나?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	
	---------------------------------------------
	HashMap 객체에 데이터 저장한 후 
	HttpSession 객체에 HashMap 객체 저장한 경우
	---------------------------------------------
	Map xxx = new HashMap<String,String>();
	xxx.push("name","이성우");
	xxx.push("age","23");
	session.setAttribute("xxx",xxx);	// session 에는 HttpSession 객체가 저장되어 있다.

	---------------------------------------------
	Employee 객체에 데이터 저장한 후 
	HttpSession 객체에 Employee 객체 저장한 경우
	---------------------------------------------
	Employee xxx = new Employee(); 
	xxx.setName("이성우");			// name 이란 속성변수에 "이성우" 저장하기
	xxx.setAge("23");			// age 이란 속성변수에 "23" 저장하기
	session.setAttribute("xxx",xxx);	// session 에는 HttpSession 객체가 저장되어 있다.

	---------------------------------------------
	위 두 경우에 "xxx" 라는 키값으로 저장된 Employee 객체 안의 name 속성변수 안의 "이성우"를 
	JSP 페이지 꺼내서 표할 때 아래처럼한다
	---------------------------------------------
	${requestScope.xxx.name} 
	---------------------------------------------



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문14> JSP 페이지에서	${xxx.yyy}	코딩이 있으면 어떻게 분석하나 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	${sessionScope.xxx.name} 으로 찾아서 표현하거나
	없으면
	${requestScope.xxx.name} 으로 찾아서 표현한다.
	그래도 없으면 아무것도 표현하지 않는다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문15> JSP 페이지에서 아래와 같은 코딩이 있으면 어떻게 분석하나 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
	
	---------------------------------------------
	<div>
	<c:if test="${empty request.xxx}">
		<span>얀센형제
	</c:if>
	</div>
	---------------------------------------------
	<c: 로 시작하는 태그는
	자카르타라는 단체에서 만든 JSTL [사용자 정의 태그=custom tag] 중에 c코어 태그이다.
	사용자 정의 태그(=custom tag)란 코딩은 HTML 태그의 형식을 가지고 있지만
	실행시 뒤에서 자바코드로 바꾸어 실행되는 태그를 말한다.
	초급개발자, 디자이너, 퍼블리셔 들의 접근성을 높이기 위함이다.
	그리고 null 처리에 대해 관대하다. 즉 null 같은 경우 무시하거나 표현을 하지 않는다.
	위 코딩을 아래 자바 코드로 바꾸면 금방 이해가 갈 것이다.
	${EL문법} 에서 EL 문법 중에 empty는 연산자로써 오른쪽 데이터가 null 이거나 길이가 없으면
	true를 리턴하는 EL 연산자 이다.
	<참고> 위 코딩을 EL의 삼항연산자로 쓰면 간단하게 표현될 수 있다.

		<div>${empty request.xxx?null:'얀센형제'}
	---------------------------------------------
	<div>
	<%
		String xxx = (String)request.getAttribute("xxx");
		if (xxx!=null && xxx.length()>0) {
			out.print("얀센형제");
		}
	%>
	</div>
	---------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<문16> JSP 페이지에서 아래와 같은 코딩이 있으면 어떻게 분석하나 ?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

	---------------------------------------------
	HttpServletRequest 객체에 "boardList" 라는 키값으로
	List<Map<String,String>> 객체가 저장되었다는 가정하에
	아래 코드가 있다.
	---------------------------------------------
	<c:forEach var="board" items="${requestScope.boardList}" varStatus="loopTagStatus">

		${loopStatus.index+1} ${board.subject} ${board.writer}<br>

	</c:forEach>
	---------------------------------------------
	위 코드를 자바코드로 바꾸면 아래와 같다.
	---------------------------------------------
	<%
		List<Map<String,String>> boardList = (List<Map<String,String>>)request.getAttribute("boardList");
		if (boardList!=null && boardList.size()>0) {
			for (int i=0; i<boardList.size(); i++) {
				Map board = boardList.get(i);
				out.print ((i+1) + "&nbsp;");
				out.print (board.get("subject") + "&nbsp;");
				out.print (board.get("writer") + "<br>");
			}
		}
	%>
	---------------------------------------------

	자바의 단위 프로그램 => 클래스, 인터페이스

	react 단위 프로그램 => 클래스컴포넌트, 함수 컴포넌트












































